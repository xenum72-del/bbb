name: Security Audit & Behavioral Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'scripts/**'
      - 'vite.config.ts'
      - 'package.json'
      - '.github/workflows/security-audit.yml'
  pull_request:
    branches: [ main ]

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: |
        # Clean install to avoid rolldown binding issues
        npm ci --ignore-optional || (
          echo "npm ci failed, trying fresh install..."
          rm -rf node_modules package-lock.json
          npm install
        )
      
    - name: Build application
      run: |
        # Try build, if it fails with rolldown issues, reinstall and retry
        npm run build || (
          echo "Build failed, clearing rolldown cache and retrying..."
          npm cache clean --force
          rm -rf node_modules/.vite node_modules/rolldown
          npm install rolldown --force
          npm run build
        )
      
    - name: Install Chromium for testing
      run: |
        npx puppeteer browsers install chrome
        
    - name: Start development server  
      run: |
        # Start dev server in background
        npm run dev &
        DEV_PID=$!
        echo "Started dev server with PID: $DEV_PID"
        
        # Wait for server to be ready with better error handling
        npx wait-on http://localhost:5173 --timeout 60000 --interval 1000 || (
          echo "Server failed to start, checking logs..."
          jobs -l
          kill $DEV_PID 2>/dev/null || true
          exit 1
        )
        
        echo "Development server is ready!"
      
    - name: Run NPM security audit
      run: |
        chmod +x scripts/npm-security-audit.sh
        ./scripts/npm-security-audit.sh
        
    - name: Run behavioral security test
      run: |
        # Verify server is still running
        curl -f http://localhost:5173 > /dev/null || (
          echo "Server not responding, restarting..."
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 30000
        )
        
        # Run the behavioral security test
        node scripts/behavior-security-test.js --port 5173
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.sha }}
        path: |
          behavior-security-report.json
          security-report.md
          security-audit-summary.json
        retention-days: 30
        
    - name: Parse security score
      id: security-score
      run: |
        SCORE=$(node -p "JSON.parse(require('fs').readFileSync('behavior-security-report.json', 'utf8')).summary.totalScore")
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        echo "Security Score: $SCORE/100"
        
    - name: Comment PR with security score
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const behaviorReport = JSON.parse(fs.readFileSync('behavior-security-report.json', 'utf8'));
          const npmAudit = JSON.parse(fs.readFileSync('security-audit-summary.json', 'utf8'));
          
          const body = `## üõ°Ô∏è Security Audit Results
          
          **Behavioral Security Score: ${behaviorReport.summary.totalScore}/100**
          **NPM Vulnerabilities: ${npmAudit.vulnerabilities} (${npmAudit.status})**
          
          ### üéØ Behavioral Security Summary
          - ‚úÖ Tests Passed: ${behaviorReport.summary.testsCount - behaviorReport.summary.issuesCount}
          - ‚ùå Issues Found: ${behaviorReport.summary.issuesCount}
          
          ### üì¶ NPM Dependencies
          - **Status:** ${npmAudit.status === 'secure' ? '‚úÖ Secure' : '‚ö†Ô∏è Vulnerabilities Found'}
          - **Node Version:** ${npmAudit.nodeVersion}
          - **NPM Version:** ${npmAudit.npmVersion}
          
          ### üîç Key Findings
          ${behaviorReport.summary.keyFindings.map(finding => `- ${finding}`).join('\n')}
          
          ### ‚ö° Performance
          - Load Time: ${behaviorReport.performance?.loadTime || 'N/A'}ms
          - Lighthouse Score: ${behaviorReport.performance?.lighthouseScore || 'N/A'}/100
          
          [View full report artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
          
    - name: Set commit status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const score = '${{ steps.security-score.outputs.score }}';
          const state = score >= 90 ? 'success' : score >= 70 ? 'pending' : 'failure';
          const description = `Security Score: ${score}/100`;
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: description,
            context: 'security-audit/behavioral-test'
          });

  publish-results:
    needs: security-audit
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download security report
      uses: actions/download-artifact@v4
      with:
        name: security-report-${{ github.sha }}
        path: reports/
        
    - name: Generate HTML report
      run: |
        mkdir -p public
        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Encounter Ledger - Security Audit Results</title>
          <style>
            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .score { font-size: 3em; font-weight: bold; text-align: center; margin: 20px 0; }
            .score.excellent { color: #22c55e; }
            .score.good { color: #f59e0b; }
            .score.poor { color: #ef4444; }
            .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
            .card { background: #f8f9fa; padding: 20px; border-radius: 6px; border-left: 4px solid #3b82f6; }
            .issue { background: #fef2f2; border-left-color: #ef4444; }
            .success { background: #f0fdf4; border-left-color: #22c55e; }
            .timestamp { color: #666; font-size: 0.9em; }
            pre { background: #f1f5f9; padding: 15px; border-radius: 4px; overflow-x: auto; }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>üõ°Ô∏è Encounter Ledger Security Audit</h1>
            <p class="timestamp">Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")</p>
            <div id="report-content">Loading report...</div>
          </div>
          
          <script>
            fetch('./behavior-security-report.json')
              .then(response => response.json())
              .then(data => {
                const score = data.summary.totalScore;
                const scoreClass = score >= 90 ? 'excellent' : score >= 70 ? 'good' : 'poor';
                
                document.getElementById('report-content').innerHTML = \`
                  <div class="score \${scoreClass}">\${score}/100</div>
                  
                  <div class="grid">
                    <div class="card">
                      <h3>üìä Summary</h3>
                      <p>Tests: \${data.summary.testsCount}</p>
                      <p>Issues: \${data.summary.issuesCount}</p>
                      <p>PWA Ready: \${data.pwa?.isInstallable ? '‚úÖ' : '‚ùå'}</p>
                    </div>
                    
                    <div class="card">
                      <h3>‚ö° Performance</h3>
                      <p>Load Time: \${data.performance?.loadTime || 'N/A'}ms</p>
                      <p>Lighthouse: \${data.performance?.lighthouseScore || 'N/A'}/100</p>
                    </div>
                    
                    <div class="card">
                      <h3>üîí Security</h3>
                      <p>Headers: \${data.security?.headersCount || 0}</p>
                      <p>CSP: \${data.security?.hasCSP ? '‚úÖ' : '‚ùå'}</p>
                    </div>
                    
                    <div class="card">
                      <h3>üîê Privacy</h3>
                      <p>External Requests: \${data.privacy?.externalRequests?.length || 0}</p>
                      <p>Data Collection: \${data.privacy?.hasDataCollection ? 'Yes' : 'No'}</p>
                    </div>
                  </div>
                  
                  <h3>üîç Key Findings</h3>
                  <div class="grid">
                    \${data.summary.keyFindings.map(finding => 
                      \`<div class="card \${finding.includes('‚ùå') ? 'issue' : 'success'}">\${finding}</div>\`
                    ).join('')}
                  </div>
                  
                  <h3>üìã Full Report</h3>
                  <pre>\${JSON.stringify(data, null, 2)}</pre>
                \`;
              })
              .catch(err => {
                document.getElementById('report-content').innerHTML = '<p>Error loading report: ' + err.message + '</p>';
              });
          </script>
        </body>
        </html>
        EOF
        
    - name: Copy report JSON
      run: |
        cp reports/behavior-security-report.json public/
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        destination_dir: security-reports
        keep_files: true
        
    - name: Update README badge
      run: |
        SCORE=$(node -p "JSON.parse(require('fs').readFileSync('reports/behavior-security-report.json', 'utf8')).summary.totalScore")
        BADGE_COLOR=$([ $SCORE -ge 90 ] && echo "brightgreen" || [ $SCORE -ge 70 ] && echo "yellow" || echo "red")
        
        # Create or update security badge in README
        if [ -f README.md ]; then
          sed -i "s|!\[Security Score\].*|![Security Score](https://img.shields.io/badge/Security%20Score-${SCORE}%2F100-${BADGE_COLOR})|" README.md || \
          echo "![Security Score](https://img.shields.io/badge/Security%20Score-${SCORE}%2F100-${BADGE_COLOR})" >> README.md
        fi