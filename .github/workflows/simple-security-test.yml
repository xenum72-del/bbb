name: Simple Security Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
permissions:
  contents: write
  issues: write
  pull-requests: write
  statuses: write
  pages: write
  id-token: write
  actions: read
jobs:
  security-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: 🏗️ Build Application  
      run: |
        # Fix rolldown binding issues first
        echo "🔧 Fixing rolldown binding issues..."
        rm -rf node_modules/.vite node_modules/rolldown node_modules/@rolldown
        rm -f package-lock.json
        
        # Clean install with proper Node version
        npm cache clean --force
        npm install
        
        # Try build, if it still fails, use fallback
        echo "🏗️ Building application..."
        npm run build || (
          echo "⚠️ Build failed, trying with legacy bundler..."
          # Switch to webpack/parcel as fallback if rolldown fails
          npm run build --bundler=esbuild 2>/dev/null || 
          npm run build --legacy 2>/dev/null ||
          echo "❌ Build failed - continuing with tests on source files"
        )

    - name: 🚀 Start Development Server
      run: |
        echo "Starting Vite development server..."
        
        # Start dev server in background with explicit host binding
        npm run dev -- --host 0.0.0.0 --port 5173 &
        DEV_PID=$!
        echo "Started dev server with PID: $DEV_PID"
        
        # Wait longer and check more frequently
        echo "Waiting for server to be ready..."
        for i in {1..60}; do
          if curl -f http://localhost:5173 >/dev/null 2>&1; then
            echo "✅ Development server is ready after ${i} seconds!"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "❌ Server failed to start after 60 seconds"
            exit 1
          fi
          sleep 1
        done

    - name: 🎭 Comprehensive Behavioral Security Testing
      run: |
        # Install testing dependencies (skip lighthouse due to Node.js version requirement)
        npm install puppeteer axe-core --no-save
        
        # Create the comprehensive behavioral security test
        cat > scripts/behavior-security-test.js << 'EOF'
        import puppeteer from 'puppeteer';
        import fs from 'fs';

        (async () => {
          console.log('🎭 Starting Comprehensive Behavioral Security Testing...');
          
          const browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          
          const page = await browser.newPage();
          const testResults = {
            timestamp: new Date().toISOString(),
            summary: {
              testsCompleted: 0,
              overallSafety: { score: 0 },
              keyFindings: []
            },
            security: {},
            performance: {},
            accessibility: {},
            inclusivity: {}
          };

          try {
            console.log('📱 Testing PWA and security headers...');
            
            // Navigate to the application (server should already be running)
            const response = await page.goto('http://localhost:5173', { 
              waitUntil: 'networkidle0',
              timeout: 30000
            });
            
            // Security Headers Analysis
            const headers = response.headers();
            testResults.security = {
              hasCSP: !!headers['content-security-policy'],
              hasHSTS: !!headers['strict-transport-security'],
              hasXFrameOptions: !!headers['x-frame-options'],
              hasXContentTypeOptions: !!headers['x-content-type-options'],
              headersCount: Object.keys(headers).length,
              securityHeadersPresent: 0
            };
            
            // Count security headers
            const securityHeaders = ['content-security-policy', 'strict-transport-security', 'x-frame-options', 'x-content-type-options'];
            testResults.security.securityHeadersPresent = securityHeaders.filter(header => headers[header]).length;
            testResults.summary.testsCompleted++;

            // PWA Manifest Test  
            console.log('📋 Testing PWA manifest...');
            try {
              const manifestExists = await page.evaluate(() => {
                const manifestLink = document.querySelector('link[rel="manifest"]');
                return !!manifestLink;
              });
              testResults.security.hasPWAManifest = manifestExists;
              if (manifestExists) {
                testResults.summary.keyFindings.push('✅ PWA manifest detected');
              } else {
                testResults.summary.keyFindings.push('⚠️ No PWA manifest found');  
              }
              testResults.summary.testsCompleted++;
            } catch (error) {
              testResults.summary.keyFindings.push('❌ PWA manifest test failed');
            }

            // Basic Performance Metrics
            console.log('⚡ Measuring performance...');
            const performanceMetrics = await page.evaluate(() => {
              const navigation = performance.getEntriesByType('navigation')[0];
              return {
                loadTime: navigation.loadEventEnd - navigation.loadEventStart,
                domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,
                firstPaint: performance.getEntriesByName('first-paint')[0]?.startTime || 0
              };
            });
            
            testResults.performance = performanceMetrics;
            testResults.summary.testsCompleted++;

            // Basic Accessibility Test
            console.log('♿ Running accessibility checks...');
            try {
              const accessibilityIssues = await page.evaluate(() => {
                const images = document.querySelectorAll('img');
                const imagesWithoutAlt = Array.from(images).filter(img => !img.alt).length;
                
                const buttons = document.querySelectorAll('button');
                const buttonsWithoutAriaLabel = Array.from(buttons).filter(btn => 
                  !btn.getAttribute('aria-label') && !btn.textContent.trim()
                ).length;
                
                return {
                  imagesWithoutAlt,
                  buttonsWithoutAriaLabel,
                  totalImages: images.length,
                  totalButtons: buttons.length
                };
              });
              
              testResults.accessibility = accessibilityIssues;
              
              if (accessibilityIssues.imagesWithoutAlt === 0 && accessibilityIssues.buttonsWithoutAriaLabel === 0) {
                testResults.summary.keyFindings.push('✅ Basic accessibility checks passed');
              } else {
                testResults.summary.keyFindings.push(`⚠️ Accessibility issues: ${accessibilityIssues.imagesWithoutAlt} images without alt, ${accessibilityIssues.buttonsWithoutAriaLabel} buttons without labels`);
              }
              testResults.summary.testsCompleted++;
            } catch (error) {
              testResults.summary.keyFindings.push('❌ Accessibility test failed');
            }

            // COMPREHENSIVE Gay-friendly content detection
            console.log('🏳️‍🌈 Running comprehensive fabulousness scan...');
            const gayFriendlyContent = await page.evaluate(() => {
              const bodyText = document.body.textContent.toLowerCase();
              const htmlContent = document.documentElement.innerHTML.toLowerCase();
              
              // Multiple tiers of gay content detection
              const basicGayWords = ['fabulous', 'fierce', 'slay', 'queen', 'rainbow', 'pride', 'inclusive', 'diversity', 'lgbtq', 'queer'];
              const dragWords = ['yasss', 'werk', 'serving', 'iconic', 'legendary', 'tea', 'shade', 'hunty', 'periodt'];
              const popCultureWords = ['taylor swift', 'beyonce', 'lady gaga', 'drag race', 'rupaul'];
              const funnyGayWords = ['disaster gay', 'gay panic', 'useless lesbian', 'plant parent', 'theater kid'];
              
              const foundBasic = basicGayWords.filter(word => bodyText.includes(word) || htmlContent.includes(word));
              const foundDrag = dragWords.filter(word => bodyText.includes(word) || htmlContent.includes(word));
              const foundPopCulture = popCultureWords.filter(word => bodyText.includes(word) || htmlContent.includes(word));
              const foundFunny = funnyGayWords.filter(word => bodyText.includes(word) || htmlContent.includes(word));
              
              // Check for rainbow CSS/styling
              const hasRainbowStyling = htmlContent.includes('rainbow') || htmlContent.includes('gradient') || htmlContent.includes('pride');
              
              return {
                foundGayPositiveWords: foundBasic.length + foundDrag.length + foundPopCulture.length + foundFunny.length,
                basicWords: foundBasic,
                dragWords: foundDrag,
                popCultureWords: foundPopCulture,
                funnyWords: foundFunny,
                hasRainbowStyling: hasRainbowStyling,
                fabulousnessLevel: foundBasic.length * 2 + foundDrag.length * 3 + foundPopCulture.length * 4 + foundFunny.length * 5
              };
            });
            
            testResults.inclusivity = gayFriendlyContent;
            
            // Generate fabulous findings
            if (gayFriendlyContent.fabulousnessLevel >= 20) {
              testResults.summary.keyFindings.push(`💎 LEGENDARY FABULOUSNESS: This app is serving main character energy!`);
            } else if (gayFriendlyContent.fabulousnessLevel >= 10) {
              testResults.summary.keyFindings.push(`👑 QUEEN BEHAVIOR: Gay-friendly content detected - We stan!`);
            } else if (gayFriendlyContent.foundGayPositiveWords > 0) {
              testResults.summary.keyFindings.push(`🌈 Gay-friendly vibes: ${[...gayFriendlyContent.basicWords, ...gayFriendlyContent.dragWords].join(', ')} - YASSS!`);
            } else {
              testResults.summary.keyFindings.push(`😐 Straight™ energy detected - needs more sparkle`);
            }
            
            if (gayFriendlyContent.hasRainbowStyling) {
              testResults.summary.keyFindings.push(`🌈 Visual gay rights detected in styling - CSS said pride!`);
            }

            // Calculate Overall Safety Score
            let score = 50; // Base score
            
            // Security headers bonus
            score += testResults.security.securityHeadersPresent * 5;
            
            // PWA bonus
            if (testResults.security.hasPWAManifest) score += 10;
            
            // Performance bonus
            if (testResults.performance.loadTime < 2000) score += 10;
            if (testResults.performance.loadTime < 1000) score += 5;
            
            // Accessibility bonus
            if (testResults.accessibility.imagesWithoutAlt === 0) score += 5;
            if (testResults.accessibility.buttonsWithoutAriaLabel === 0) score += 3;
            
            // Gay-friendly bonus - because representation matters!
            if (testResults.inclusivity.foundGayPositiveWords > 0) score += testResults.inclusivity.foundGayPositiveWords * 2;
            
            // Cap at 100
            testResults.summary.overallSafety.score = Math.min(score, 100);
            testResults.summary.testsCompleted++;

            console.log(`✅ Behavioral testing completed! Overall Safety Score: ${testResults.summary.overallSafety.score}/100`);
            
          } catch (error) {
            console.error('❌ Behavioral test error:', error);
            testResults.summary.keyFindings.push(`❌ Test error: ${error.message}`);
            testResults.summary.overallSafety.score = 25; // Fallback score
          } finally {
            await browser.close();
            
            // Write comprehensive results
            fs.writeFileSync('behavior-security-report.json', JSON.stringify(testResults, null, 2));
            console.log('📊 Behavioral security report saved');
            
            // Log summary
            console.log('🎯 TEST SUMMARY:');
            console.log(`   Tests Completed: ${testResults.summary.testsCompleted}`);
            console.log(`   Overall Safety Score: ${testResults.summary.overallSafety.score}/100`);
            console.log(`   Security Headers: ${testResults.security.securityHeadersPresent}/4`);
            console.log(`   Key Findings: ${testResults.summary.keyFindings.length}`);
          }
        })();
        EOF
        
        # Create scripts directory and run the test
        mkdir -p scripts
        timeout 90 node scripts/behavior-security-test.js || echo "Behavioral test completed with timeout"
    
    - name: 🔍 ESLint Security Analysis
      run: |
        # Use existing ESLint configuration (eslint.config.cjs)
        echo "Running ESLint with existing configuration..."
        
        # Run ESLint with the existing config and output results
        npx eslint src/ --format json > eslint-security.json || echo "ESLint security scan completed with warnings"
        
        # Show a summary of the results
        echo "ESLint Results Summary:"
        npx eslint src/ || echo "ESLint found issues - check report for details"

    - name: 📦 NPM Security Audit
      run: |
        npm audit --json > npm-audit-raw.json || true
        
        # Create comprehensive audit summary
        cat > create-audit-summary.js << 'EOF'
        import fs from 'fs';
        
        try {
          const rawAudit = JSON.parse(fs.readFileSync('npm-audit-raw.json', 'utf8'));
          const summary = {
            nodeVersion: process.version,
            npmVersion: rawAudit.npmVersion || 'unknown',
            vulnerabilities: rawAudit.metadata?.vulnerabilities?.total || 0,
            status: rawAudit.metadata?.vulnerabilities?.total === 0 ? 'secure' : 'has-issues',
            auditReportVersion: rawAudit.auditReportVersion,
            timestamp: new Date().toISOString()
          };
          
          fs.writeFileSync('security-audit-summary.json', JSON.stringify(summary, null, 2));
          console.log('📦 NPM Audit completed - Vulnerabilities:', summary.vulnerabilities);
        } catch (error) {
          const fallback = {
            nodeVersion: process.version,
            npmVersion: 'unknown',
            vulnerabilities: 0,
            status: 'unknown',
            error: error.message,
            timestamp: new Date().toISOString()
          };
          fs.writeFileSync('security-audit-summary.json', JSON.stringify(fallback, null, 2));
        }
        EOF
        
        node create-audit-summary.js

    - name: 🔒 Security Headers & Policy Analysis  
      run: |
        echo "### 🔒 Security Headers Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Check for security headers in build output
        if [ -d "dist" ]; then
          echo "✅ **Build Output**: Found dist directory" >> security-report.md
        else
          echo "❌ **Build Output**: No dist directory found" >> security-report.md
        fi
        
        # Check for CSP configuration
        if grep -r "Content-Security-Policy" src/ vite.config.* package.json 2>/dev/null; then
          echo "✅ **CSP Configuration**: Found CSP references" >> security-report.md
        else
          echo "⚠️ **CSP Configuration**: No CSP configuration detected" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🔐 Privacy & Data Protection Analysis
      run: |
        echo "### 🔐 Privacy Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Check for potential data collection
        PRIVACY_ISSUES=0
        
        # Check for tracking scripts
        if grep -r -i "google-analytics\|gtag\|facebook\|tracking" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.html"; then
          echo "⚠️ **Tracking Scripts**: Third-party tracking detected" >> security-report.md
          PRIVACY_ISSUES=$((PRIVACY_ISSUES + 1))
        fi
        
        # Check for localStorage usage
        if grep -r "localStorage\|sessionStorage" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
          echo "📝 **Local Storage**: Browser storage usage detected" >> security-report.md
        fi
        
        if [ $PRIVACY_ISSUES -eq 0 ]; then
          echo "✅ **Privacy**: No obvious privacy concerns detected" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🔒 Cryptographic Safety Analysis
      run: |
        echo "### 🔒 Cryptographic Safety Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Check for weak crypto usage
        CRYPTO_ISSUES=0
        
        # Check for deprecated crypto methods
        if grep -r -i "md5\|sha1\|des\|rc4" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
          echo "❌ **Weak Cryptography**: Deprecated algorithms detected" >> security-report.md
          CRYPTO_ISSUES=$((CRYPTO_ISSUES + 1))
        fi
        
        # Check for Math.random() usage (not cryptographically secure)
        if grep -r "Math\.random" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v ".test." | grep -v ".spec."; then
          echo "⚠️ **Weak Random**: Math.random() is not cryptographically secure" >> security-report.md
          CRYPTO_ISSUES=$((CRYPTO_ISSUES + 1))
        fi
        
        if [ $CRYPTO_ISSUES -eq 0 ]; then
          echo "✅ **Cryptographic Safety**: No obvious crypto issues detected" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🏳️‍🌈 Gay Safety & Inclusivity Analysis (COMPREHENSIVE EDITION)
      run: |
        echo "### 🏳️‍🌈 Gay Safety & Inclusivity Analysis - The Fabulous Edition™" >> security-report.md
        echo "*Serving looks, serving code, serving inclusivity realness*" >> security-report.md
        echo "" >> security-report.md
        
        # Initialize fabulousness score
        INCLUSIVITY_SCORE=0
        DRAG_BONUS=0
        
        # 🌈 TIER 1: Basic LGBTQ+ Representation (THE FOUNDATION)
        echo "#### 🌈 LGBTQ+ Representation Check" >> security-report.md
        if grep -r -i "pride\|rainbow\|inclusive\|diversity\|lgbtq\|queer\|gay\|lesbian\|bisexual\|transgender\|pansexual\|asexual" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          echo "✨ **Basic Representation**: LGBTQ+ positive language detected - We see you!" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 20))
        else
          echo "👻 **Basic Representation**: No obvious LGBTQ+ representation - Time to add some sparkle!" >> security-report.md
        fi
        
        # 💅 TIER 2: Drag Culture & Slang Detection (THE SPICE)
        echo "#### 💅 Drag Culture & Gay Slang Analysis" >> security-report.md
        DRAG_WORDS=0
        
        # Check for iconic drag/gay slang
        if grep -r -i "slay\|queen\|yasss\|werk\|fierce\|iconic\|legendary\|serve\|serving\|look\|looks\|tea\|spill\|shade\|throwing shade" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          DRAG_WORDS=$((DRAG_WORDS + 1))
          echo "👑 **Drag Vocabulary**: Drag slang detected - This app knows the assignment!" >> security-report.md
        fi
        
        if grep -r -i "hunty\|mawma\|periodt\|no cap\|its giving\|main character\|that's on periodt\|we been knew" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          DRAG_WORDS=$((DRAG_WORDS + 1))
          echo "🗣️ **Modern Slang**: Current gay vernacular detected - This app is chronically online (affectionate)" >> security-report.md
        fi
        
        if grep -r -i "camp\|kitsch\|over.the.top\|dramatic\|extra\|doing.the.most" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          DRAG_WORDS=$((DRAG_WORDS + 1))
          echo "🎭 **Camp Aesthetic**: Camp/dramatic language detected - Susan Sontag is proud!" >> security-report.md
        fi
        
        DRAG_BONUS=$((DRAG_WORDS * 15))
        INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + DRAG_BONUS))
        
        # 🏳️‍⚧️ TIER 3: Trans & Non-Binary Inclusivity (THE MUST-HAVE)
        echo "#### 🏳️‍⚧️ Trans & Non-Binary Inclusivity Check" >> security-report.md
        if grep -r -i "pronouns\|they/them\|she/her\|he/him\|ze/zir\|non-binary\|enby\|genderqueer\|genderfluid" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" 2>/dev/null; then
          echo "⚧️ **Pronoun Respect**: Inclusive pronoun options detected - Trans rights are human rights!" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 25))
        fi
        
        if grep -r -i "gender.*other\|gender.*custom\|prefer.not.to.say\|non.binary" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" 2>/dev/null; then
          echo "🌟 **Gender Options**: Non-binary gender options detected - Breaking the binary!" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 20))
        fi
        
        # 🎨 TIER 4: Visual Fabulousness & Accessibility
        echo "#### 🎨 Visual Inclusivity & Fabulousness Analysis" >> security-report.md
        if grep -r -i "rainbow\|gradient\|pride.flag\|colorful\|vibrant\|neon\|glitter\|sparkle" src/ --include="*.css" --include="*.scss" --include="*.ts" --include="*.tsx" 2>/dev/null; then
          echo "� **Visual Gay**: Rainbow/colorful theming detected - This app said gay rights with CSS!" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 15))
        fi
        
        if grep -r -i "dark.mode\|high.contrast\|color.blind\|accessibility\|a11y" src/ --include="*.css" --include="*.scss" --include="*.ts" --include="*.tsx" 2>/dev/null; then
          echo "♿ **Accessible Fabulousness**: Accessibility considerations found - Inclusive AND fabulous!" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 20))
        fi
        
        # 😂 TIER 5: FUNNY GAY TESTS (THE COMEDY GOLD)
        echo "#### 😂 Humor & Cultural References Analysis" >> security-report.md
        COMEDY_BONUS=0
        
        # Check for gay pop culture references
        if grep -r -i "taylor.swift\|beyonce\|lady.gaga\|madonna\|cher\|barbra.streisand\|judy.garland\|liza.minnelli" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          echo "🎵 **Gay Icons**: Pop diva references detected - The taste is immaculate!" >> security-report.md
          COMEDY_BONUS=$((COMEDY_BONUS + 10))
        fi
        
        # Check for RuPaul's Drag Race references
        if grep -r -i "rupaul\|drag.race\|charisma.uniqueness.nerve.talent\|can.i.get.an.amen\|gentlemen.start.your.engines" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          echo "👑 **Drag Race References**: RuPaul references detected - Start your engines!" >> security-report.md
          COMEDY_BONUS=$((COMEDY_BONUS + 15))
        fi
        
        # Check for gay panic/disaster gay energy
        if grep -r -i "gay.panic\|disaster.gay\|useless.lesbian\|bisexual.disaster\|cant.sit.straight" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          echo "🤡 **Gay Disaster Energy**: Self-aware gay chaos detected - We love a self-deprecating queen!" >> security-report.md
          COMEDY_BONUS=$((COMEDY_BONUS + 20))
        fi
        
        # Check for theater kid energy
        if grep -r -i "hamilton\|rent\|wicked\|phantom.of.the.opera\|les.mis\|broadway\|musical.theater" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          echo "🎭 **Theater Kid Energy**: Musical theater references detected - The drama! The passion!" >> security-report.md
          COMEDY_BONUS=$((COMEDY_BONUS + 12))
        fi
        
        # Check for houseplant parent energy (very gay millennial)
        if grep -r -i "plant.parent\|succulent\|fiddle.leaf.fig\|monstera\|pothos\|plant.killer" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          echo "🪴 **Plant Parent Energy**: Houseplant references detected - Very gay millennial of you!" >> security-report.md
          COMEDY_BONUS=$((COMEDY_BONUS + 8))
        fi
        
        INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + COMEDY_BONUS))
        
        # 🚨 TIER 6: Anti-Pattern Detection (THE REALITY CHECK)
        echo "#### 🚨 Problematic Pattern Detection" >> security-report.md
        DEDUCTIONS=0
        
        if grep -r -i "no.homo\|thats.gay\|gay.*insult\|homosexual.*negative" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          echo "❌ **Homophobic Language**: Problematic gay-related language detected - Not the serve we wanted" >> security-report.md
          DEDUCTIONS=$((DEDUCTIONS + 30))
        fi
        
        if grep -r -i "guys\|dude\|bro\|man up\|crazy\|insane" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md" 2>/dev/null; then
          echo "⚠️ **Gendered/Ableist Language**: Non-inclusive language patterns detected - Time for some vocabulary updates" >> security-report.md
          DEDUCTIONS=$((DEDUCTIONS + 10))
        fi
        
        INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE - DEDUCTIONS))
        
        # 🏆 FINAL FABULOUSNESS RATING
        echo "#### 🏆 Final Fabulousness Rating" >> security-report.md
        echo "**Total Score: $INCLUSIVITY_SCORE points**" >> security-report.md
        echo "" >> security-report.md
        
        if [ $INCLUSIVITY_SCORE -ge 100 ]; then
          echo "💎 **LEGENDARY STATUS**: This app is SERVING main character energy! Absolutely iconic, no notes. 10s across the board!" >> security-report.md
        elif [ $INCLUSIVITY_SCORE -ge 80 ]; then
          echo "👑 **QUEEN BEHAVIOR**: This app said gay rights and meant it! We stan a culturally aware icon!" >> security-report.md
        elif [ $INCLUSIVITY_SCORE -ge 60 ]; then
          echo "✨ **SOLID ALLY**: Good foundation but could use more sparkle. Add some rainbow gradients, bestie!" >> security-report.md
        elif [ $INCLUSIVITY_SCORE -ge 40 ]; then
          echo "🌱 **BABY GAY ENERGY**: You're trying and we appreciate that! Time to embrace the chaos!" >> security-report.md
        elif [ $INCLUSIVITY_SCORE -ge 20 ]; then
          echo "😐 **STRAIGHT™ ENERGY**: This app is giving 'I have a gay friend' vibes. Time for some education!" >> security-report.md
        else
          echo "💀 **HETERONORMATIVE NIGHTMARE**: This app needs immediate intervention. Call the gay agenda hotline!" >> security-report.md
        fi
        echo "" >> security-report.md
    
    - name: Create simple dashboard
      run: |
        mkdir -p public
        
        # Get scores from JSON files
        BEHAVIOR_SCORE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('behavior-security-report.json')).summary.overallSafety.score)" 2>/dev/null || echo "50")
        NPM_VULNS=$(node -e "console.log(JSON.parse(require('fs').readFileSync('security-audit-summary.json')).vulnerabilities)" 2>/dev/null || echo "0")
        
        echo "🎯 Scores: Behavioral=$BEHAVIOR_SCORE, NPM Vulns=$NPM_VULNS"
        
        # Create simple HTML page
        cat > public/index.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
          <title>Security Test Results</title>
          <style>
            body { font-family: Arial; margin: 40px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
            .score { font-size: 48px; font-weight: bold; text-align: center; margin: 20px 0; color: green; }
            .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
            h1 { text-align: center; color: #333; }
            h2 { color: #666; }
            pre { background: #f0f0f0; padding: 10px; overflow: auto; }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>🔒 Security Test Results</h1>
            <p>Generated: $(date)</p>
            
            <div class="section">
              <h2>🎯 Behavioral Security Score</h2>
              <div class="score">$BEHAVIOR_SCORE/100</div>
            </div>
            
            <div class="section">  
              <h2>📦 NPM Vulnerabilities</h2>
              <div class="score">$NPM_VULNS</div>
            </div>
            
            <div class="section">
              <h2>📋 Raw Behavioral Report</h2>
              <pre>$(cat behavior-security-report.json)</pre>
            </div>
            
            <div class="section">
              <h2>📦 Raw NPM Audit</h2>
              <pre>$(cat security-audit-summary.json)</pre>
            </div>
            
            <div class="section">
              <h2>🏳️‍🌈 Gay Safety & Inclusivity Report</h2>
              <pre>$(grep -A 20 "Gay Safety & Inclusivity Analysis" security-report.md 2>/dev/null || echo "Inclusivity analysis not found")</pre>
            </div>
          </div>
        </body>
        </html>
        EOF
        
        # Copy JSON files
        cp *.json public/
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        destination_dir: security-dashboard
