name: 🛡️ Security & Safety Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security audit
    - cron: '0 6 * * 1'
  workflow_dispatch:

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔍 Checkout Code
      uses: actions/checkout@v4

    - name: 📱 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🔒 NPM Security Audit
      run: |
        echo "# 📊 NPM Security Audit Report" > security-report.md
        echo "" >> security-report.md
        echo "**Scan Date:** $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## 📦 Package Vulnerabilities" >> security-report.md
        echo "" >> security-report.md
        npm audit --audit-level=moderate --format=json > audit.json || true
        
        # Parse and format audit results
        if [ -s audit.json ]; then
          echo "### 🚨 Found Vulnerabilities" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat audit.json | jq '.vulnerabilities' >> security-report.md
          echo "\`\`\`" >> security-report.md
        else
          echo "### ✅ No High/Critical Vulnerabilities Found" >> security-report.md
        fi

    - name: 🧪 TypeScript Safety Check
      run: |
        echo "" >> security-report.md
        echo "## 🔷 TypeScript Safety Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Type check with strict mode
        if npx tsc --noEmit --strict; then
          echo "### ✅ TypeScript: All types are safe and validated" >> security-report.md
        else
          echo "### ⚠️ TypeScript: Found type safety issues" >> security-report.md
          echo "\`\`\`" >> security-report.md
          npx tsc --noEmit --strict 2>&1 || true >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi

    - name: 🔍 ESLint Security Rules
      run: |
        echo "" >> security-report.md
        echo "## 🛡️ ESLint Security Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Run ESLint with security plugin
        npm install --no-save eslint-plugin-security
        
        # Create security-focused ESLint config
        cat > .eslintrc.security.json << 'EOF'
        {
          "extends": ["plugin:security/recommended"],
          "plugins": ["security"],
          "rules": {
            "security/detect-object-injection": "error",
            "security/detect-non-literal-regexp": "error",
            "security/detect-unsafe-regex": "error",
            "security/detect-buffer-noassert": "error",
            "security/detect-child-process": "error",
            "security/detect-disable-mustache-escape": "error",
            "security/detect-eval-with-expression": "error",
            "security/detect-no-csrf-before-method-override": "error",
            "security/detect-non-literal-fs-filename": "error",
            "security/detect-non-literal-require": "error",
            "security/detect-possible-timing-attacks": "error",
            "security/detect-pseudoRandomBytes": "error"
          }
        }
        EOF
        
        if npx eslint --config .eslintrc.security.json src/ --format json > eslint-security.json; then
          echo "### ✅ ESLint Security: No security issues detected" >> security-report.md
        else
          echo "### ⚠️ ESLint Security: Found potential security issues" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat eslint-security.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi

    - name: 🔐 Privacy & Data Protection Audit
      run: |
        echo "" >> security-report.md
        echo "## 🏳️‍🌈 Privacy & Data Protection Audit" >> security-report.md
        echo "" >> security-report.md
        
        # Check for potential privacy leaks
        echo "### 📊 External Network Calls" >> security-report.md
        echo "" >> security-report.md
        
        # Search for fetch/xhr calls
        NETWORK_CALLS=$(grep -r -n "fetch\|XMLHttpRequest\|axios" src/ --include="*.ts" --include="*.tsx" || true)
        
        if [ -z "$NETWORK_CALLS" ]; then
          echo "✅ **No external network calls found** - True offline-first architecture" >> security-report.md
        else
          echo "⚠️ **External network calls detected:**" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "$NETWORK_CALLS" >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "### 🍪 Cookie & Tracking Analysis" >> security-report.md
        
        # Check for tracking/cookies
        TRACKING_CODE=$(grep -r -n "document.cookie\|localStorage\|sessionStorage\|gtag\|analytics" src/ --include="*.ts" --include="*.tsx" || true)
        
        if echo "$TRACKING_CODE" | grep -v "analytics.ts" | grep -v "security.ts" >/dev/null; then
          echo "⚠️ **Potential tracking code found:**" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "$TRACKING_CODE" | grep -v "analytics.ts" | grep -v "security.ts" >> security-report.md
          echo "\`\`\`" >> security-report.md
        else
          echo "✅ **No unauthorized tracking detected** - Only user-controlled analytics" >> security-report.md
        fi

    - name: 🔒 Cryptographic Safety Check
      run: |
        echo "" >> security-report.md
        echo "## 🔐 Cryptographic Implementation Audit" >> security-report.md
        echo "" >> security-report.md
        
        # Check crypto usage
        CRYPTO_USAGE=$(grep -r -n "crypto\|hash\|encrypt\|password" src/ --include="*.ts" --include="*.tsx" || true)
        
        if [ -z "$CRYPTO_USAGE" ]; then
          echo "ℹ️ **No cryptographic operations detected**" >> security-report.md
        else
          echo "### 🔍 Cryptographic Operations Found" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "$CRYPTO_USAGE" >> security-report.md
          echo "\`\`\`" >> security-report.md
          
          # Check for weak crypto
          WEAK_CRYPTO=$(echo "$CRYPTO_USAGE" | grep -i "md5\|sha1\|des\|rc4" || true)
          
          if [ -z "$WEAK_CRYPTO" ]; then
            echo "" >> security-report.md
            echo "✅ **No weak cryptographic algorithms detected**" >> security-report.md
          else
            echo "" >> security-report.md
            echo "⚠️ **Weak cryptographic algorithms found:**" >> security-report.md
            echo "\`\`\`" >> security-report.md
            echo "$WEAK_CRYPTO" >> security-report.md
            echo "\`\`\`" >> security-report.md
          fi
        fi

    - name: 📱 PWA Security Audit
      run: |
        echo "" >> security-report.md
        echo "## 📱 PWA Security Configuration" >> security-report.md
        echo "" >> security-report.md
        
        # Check service worker security
        if [ -f "public/sw.js" ] || [ -f "src/sw.ts" ]; then
          echo "### 🔍 Service Worker Security" >> security-report.md
          
          # Check for HTTPS enforcement
          SW_SECURITY=$(grep -n "self.location.protocol.*https\|cache.*https" public/sw.js src/sw.ts 2>/dev/null || true)
          
          if [ -z "$SW_SECURITY" ]; then
            echo "ℹ️ **Service worker found** - Manual review recommended for HTTPS enforcement" >> security-report.md
          else
            echo "✅ **Service worker implements HTTPS security measures**" >> security-report.md
          fi
        else
          echo "ℹ️ **No service worker detected**" >> security-report.md
        fi
        
        # Check manifest security
        if [ -f "public/manifest.json" ]; then
          echo "" >> security-report.md
          echo "### 📋 Web App Manifest Security" >> security-report.md
          
          MANIFEST_PERMS=$(grep -i "permissions\|geolocation\|camera\|microphone" public/manifest.json || true)
          
          if [ -z "$MANIFEST_PERMS" ]; then
            echo "✅ **Web manifest requests no sensitive permissions**" >> security-report.md
          else
            echo "⚠️ **Web manifest requests sensitive permissions:**" >> security-report.md
            echo "\`\`\`json" >> security-report.md
            echo "$MANIFEST_PERMS" >> security-report.md
            echo "\`\`\`" >> security-report.md
          fi
        fi

    - name: � Behavioral Security Testing
      run: |
        echo "" >> security-report.md
        echo "## 🎭 App Behavior & Runtime Security Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Install Puppeteer for browser automation
        npm install --no-save puppeteer lighthouse @axe-core/puppeteer
        
        # Build the app for testing
        npm run build
        
        # Serve the built app
        npx serve dist -l 3000 &
        SERVER_PID=$!
        sleep 10
        
        # Create behavior test script
        cat > behavior-test.js << 'EOF'
        const puppeteer = require('puppeteer');
        const { AxePuppeteer } = require('@axe-core/puppeteer');
        const fs = require('fs');
        
        (async () => {
          console.log('🎭 Starting behavioral security analysis...');
          
          const browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          
          const page = await browser.newPage();
          
          // Monitor network requests
          const networkRequests = [];
          const consoleErrors = [];
          
          page.on('request', (request) => {
            networkRequests.push({
              url: request.url(),
              method: request.method(),
              headers: request.headers()
            });
          });
          
          page.on('console', (msg) => {
            if (msg.type() === 'error') {
              consoleErrors.push(msg.text());
            }
          });
          
          // Test app loading and behavior
          try {
            await page.goto('http://localhost:3000', { 
              waitUntil: 'networkidle2',
              timeout: 30000 
            });
            
            // Wait for React to load
            await page.waitForTimeout(3000);
            
            console.log('✅ App loaded successfully');
            
            // Test PWA behavior
            const isPWA = await page.evaluate(() => {
              return 'serviceWorker' in navigator;
            });
            
            // Test offline capability
            await page.setOfflineMode(true);
            await page.reload({ waitUntil: 'networkidle2' });
            
            const offlineWorks = await page.evaluate(() => {
              return document.body.innerHTML.length > 1000;
            });
            
            await page.setOfflineMode(false);
            
            // Test navigation without network calls
            const initialRequests = networkRequests.length;
            
            // Simulate navigation
            try {
              await page.click('[data-testid="nav-timeline"], button[aria-label*="timeline"], button:contains("Timeline")');
              await page.waitForTimeout(1000);
            } catch (e) {
              console.log('Navigation test: Using fallback selector');
            }
            
            const finalRequests = networkRequests.length;
            const noNavNetworkCalls = (finalRequests - initialRequests) === 0;
            
            // Test localStorage usage (privacy check)
            const localStorageUsage = await page.evaluate(() => {
              const keys = Object.keys(localStorage);
              return keys.map(key => ({
                key,
                hasPersonalData: /name|email|phone|address|id/.test(key.toLowerCase()),
                value: localStorage[key].substring(0, 100) + '...'
              }));
            });
            
            // Accessibility audit
            const axe = new AxePuppeteer(page);
            const axeResults = await axe.analyze();
            
            // Security headers check
            const response = await page.goto('http://localhost:3000');
            const headers = response.headers();
            
            const securityHeaders = {
              csp: headers['content-security-policy'] || 'Not set',
              xframe: headers['x-frame-options'] || 'Not set',
              xss: headers['x-xss-protection'] || 'Not set',
              nosniff: headers['x-content-type-nosniff'] || 'Not set'
            };
            
            // Results
            const results = {
              loading: true,
              pwaSupport: isPWA,
              offlineCapability: offlineWorks,
              networkRequests: networkRequests.filter(req => !req.url.includes('localhost')),
              noNavigationNetworkCalls: noNavNetworkCalls,
              consoleErrors,
              localStorage: localStorageUsage,
              accessibility: {
                violations: axeResults.violations.length,
                passes: axeResults.passes.length
              },
              securityHeaders
            };
            
            console.log('📊 Behavior analysis complete');
            fs.writeFileSync('behavior-results.json', JSON.stringify(results, null, 2));
            
          } catch (error) {
            console.error('❌ Behavior test failed:', error.message);
            fs.writeFileSync('behavior-results.json', JSON.stringify({ 
              error: error.message,
              loading: false 
            }, null, 2));
          }
          
          await browser.close();
        })();
        EOF
        
        # Run behavior analysis
        node behavior-test.js
        
        # Kill the server
        kill $SERVER_PID
        
        # Parse and report results
        if [ -f behavior-results.json ]; then
          echo "### 🎭 Runtime Behavior Analysis Results" >> security-report.md
          echo "" >> security-report.md
          
          # Extract key metrics using jq
          LOADING_SUCCESS=$(cat behavior-results.json | jq -r '.loading // false')
          PWA_SUPPORT=$(cat behavior-results.json | jq -r '.pwaSupport // false')
          OFFLINE_WORKS=$(cat behavior-results.json | jq -r '.offlineCapability // false')
          EXTERNAL_REQUESTS=$(cat behavior-results.json | jq -r '.networkRequests | length')
          NO_NAV_CALLS=$(cat behavior-results.json | jq -r '.noNavigationNetworkCalls // false')
          CONSOLE_ERRORS=$(cat behavior-results.json | jq -r '.consoleErrors | length')
          A11Y_VIOLATIONS=$(cat behavior-results.json | jq -r '.accessibility.violations // 0')
          
          # Report loading
          if [ "$LOADING_SUCCESS" = "true" ]; then
            echo "✅ **App Loading**: Successful browser load and render" >> security-report.md
          else
            echo "❌ **App Loading**: Failed to load properly" >> security-report.md
          fi
          
          # Report PWA capability
          if [ "$PWA_SUPPORT" = "true" ]; then
            echo "✅ **PWA Support**: Service Worker detected" >> security-report.md
          else
            echo "⚠️ **PWA Support**: No Service Worker found" >> security-report.md
          fi
          
          # Report offline capability
          if [ "$OFFLINE_WORKS" = "true" ]; then
            echo "✅ **Offline Functionality**: App works without network" >> security-report.md
          else
            echo "❌ **Offline Functionality**: App fails in offline mode" >> security-report.md
          fi
          
          # Report network behavior
          if [ "$EXTERNAL_REQUESTS" -eq 0 ]; then
            echo "✅ **Network Privacy**: No external requests detected" >> security-report.md
          else
            echo "⚠️ **Network Privacy**: $EXTERNAL_REQUESTS external requests found" >> security-report.md
          fi
          
          # Report navigation behavior
          if [ "$NO_NAV_CALLS" = "true" ]; then
            echo "✅ **Navigation Behavior**: No network calls during navigation" >> security-report.md
          else
            echo "⚠️ **Navigation Behavior**: Network calls detected during navigation" >> security-report.md
          fi
          
          # Report console errors
          if [ "$CONSOLE_ERRORS" -eq 0 ]; then
            echo "✅ **Runtime Stability**: No console errors detected" >> security-report.md
          else
            echo "⚠️ **Runtime Stability**: $CONSOLE_ERRORS console errors found" >> security-report.md
          fi
          
          # Report accessibility
          if [ "$A11Y_VIOLATIONS" -eq 0 ]; then
            echo "✅ **Accessibility**: No WCAG violations detected" >> security-report.md
          else
            echo "⚠️ **Accessibility**: $A11Y_VIOLATIONS WCAG violations found" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "**Detailed Behavior Analysis:**" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat behavior-results.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        else
          echo "❌ **Behavior Analysis**: Test execution failed" >> security-report.md
        fi

    - name: 🚀 Performance & Security Lighthouse Audit
      run: |
        echo "" >> security-report.md
        echo "## 🚀 Performance & Security Lighthouse Audit" >> security-report.md
        echo "" >> security-report.md
        
        # Serve the app again for Lighthouse
        npx serve dist -l 3001 &
        LIGHTHOUSE_SERVER_PID=$!
        sleep 5
        
        # Run Lighthouse audit
        npx lighthouse http://localhost:3001 --output=json --output-path=lighthouse-report.json --chrome-flags="--headless --no-sandbox" --quiet || true
        
        # Kill server
        kill $LIGHTHOUSE_SERVER_PID
        
        if [ -f lighthouse-report.json ]; then
          # Extract Lighthouse scores
          PERFORMANCE=$(cat lighthouse-report.json | jq -r '.categories.performance.score * 100 | floor')
          ACCESSIBILITY=$(cat lighthouse-report.json | jq -r '.categories.accessibility.score * 100 | floor')
          BEST_PRACTICES=$(cat lighthouse-report.json | jq -r '."categories"."best-practices".score * 100 | floor')
          SEO=$(cat lighthouse-report.json | jq -r '.categories.seo.score * 100 | floor')
          PWA_SCORE=$(cat lighthouse-report.json | jq -r '.categories.pwa.score * 100 | floor')
          
          echo "### 📊 Lighthouse Scores" >> security-report.md
          echo "" >> security-report.md
          echo "| Category | Score | Status |" >> security-report.md
          echo "|----------|-------|--------|" >> security-report.md
          
          # Performance
          if [ "$PERFORMANCE" -ge 90 ]; then
            echo "| 🚀 Performance | $PERFORMANCE% | ✅ Excellent |" >> security-report.md
          elif [ "$PERFORMANCE" -ge 70 ]; then
            echo "| 🚀 Performance | $PERFORMANCE% | ⚠️ Good |" >> security-report.md
          else
            echo "| 🚀 Performance | $PERFORMANCE% | ❌ Needs Work |" >> security-report.md
          fi
          
          # Accessibility
          if [ "$ACCESSIBILITY" -ge 95 ]; then
            echo "| ♿ Accessibility | $ACCESSIBILITY% | ✅ Excellent |" >> security-report.md
          elif [ "$ACCESSIBILITY" -ge 85 ]; then
            echo "| ♿ Accessibility | $ACCESSIBILITY% | ⚠️ Good |" >> security-report.md
          else
            echo "| ♿ Accessibility | $ACCESSIBILITY% | ❌ Needs Work |" >> security-report.md
          fi
          
          # Best Practices
          if [ "$BEST_PRACTICES" -ge 90 ]; then
            echo "| 🛡️ Best Practices | $BEST_PRACTICES% | ✅ Excellent |" >> security-report.md
          elif [ "$BEST_PRACTICES" -ge 70 ]; then
            echo "| 🛡️ Best Practices | $BEST_PRACTICES% | ⚠️ Good |" >> security-report.md
          else
            echo "| 🛡️ Best Practices | $BEST_PRACTICES% | ❌ Needs Work |" >> security-report.md
          fi
          
          # PWA
          if [ "$PWA_SCORE" -ge 90 ]; then
            echo "| 📱 PWA | $PWA_SCORE% | ✅ Excellent |" >> security-report.md
          elif [ "$PWA_SCORE" -ge 70 ]; then
            echo "| 📱 PWA | $PWA_SCORE% | ⚠️ Good |" >> security-report.md
          else
            echo "| 📱 PWA | $PWA_SCORE% | ❌ Needs Work |" >> security-report.md
          fi
          
          # Extract security-related audits
          echo "" >> security-report.md
          echo "### 🔒 Security-Specific Lighthouse Findings" >> security-report.md
          
          # Check for HTTPS
          HTTPS_AUDIT=$(cat lighthouse-report.json | jq -r '.audits["is-on-https"].score')
          if [ "$HTTPS_AUDIT" = "1" ]; then
            echo "✅ **HTTPS**: Site uses HTTPS" >> security-report.md
          else
            echo "❌ **HTTPS**: Site does not use HTTPS" >> security-report.md
          fi
          
          # Check for mixed content
          MIXED_CONTENT=$(cat lighthouse-report.json | jq -r '.audits["no-mixed-content"].score')
          if [ "$MIXED_CONTENT" = "1" ]; then
            echo "✅ **Mixed Content**: No mixed HTTP/HTTPS content" >> security-report.md
          else
            echo "❌ **Mixed Content**: Mixed HTTP/HTTPS content detected" >> security-report.md
          fi
          
        else
          echo "❌ **Lighthouse Audit**: Failed to generate report" >> security-report.md
        fi

    - name: �🏳️‍🌈 Gay Safety & Inclusivity Check
      run: |
        echo "" >> security-report.md
        echo "## 🏳️‍🌈 Gay Safety & Inclusivity Audit" >> security-report.md
        echo "" >> security-report.md
        
        # Check for inclusive language
        echo "### 💬 Language Inclusivity Scan" >> security-report.md
        
        EXCLUSIVE_TERMS=$(grep -r -i -n "straight\|normal\|weird\|abnormal\|deviant" src/ --include="*.ts" --include="*.tsx" || true)
        
        if [ -z "$EXCLUSIVE_TERMS" ]; then
          echo "✅ **No exclusionary language detected** - App uses inclusive terminology" >> security-report.md
        else
          echo "⚠️ **Potentially exclusionary terms found - review recommended:**" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "$EXCLUSIVE_TERMS" >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
        # Check for privacy-respecting design
        echo "" >> security-report.md
        echo "### 🔒 Privacy-First Design Verification" >> security-report.md
        
        # Verify no personal data exposure
        PERSONAL_DATA=$(grep -r -i -n "email\|phone\|address\|ssn\|credit.*card" src/ --include="*.ts" --include="*.tsx" || true)
        
        if [ -z "$PERSONAL_DATA" ]; then
          echo "✅ **No personal data collection patterns detected**" >> security-report.md
        else
          echo "⚠️ **Personal data patterns found - verify these are not collected:**" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "$PERSONAL_DATA" >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi

    - name: 📊 Generate Safety Badge
      run: |
        echo "" >> security-report.md
        echo "## 🏅 Safety Certification" >> security-report.md
        echo "" >> security-report.md
        
        # Count issues
        ISSUES=$(grep -c "⚠️\|🚨" security-report.md || echo "0")
        PASSED=$(grep -c "✅" security-report.md || echo "0")
        
        echo "**Audit Summary:**" >> security-report.md
        echo "- ✅ Checks Passed: $PASSED" >> security-report.md
        echo "- ⚠️ Issues Found: $ISSUES" >> security-report.md
        echo "- 📅 Last Audit: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        if [ "$ISSUES" -eq 0 ]; then
          echo "🏆 **SAFETY CERTIFIED** - This app meets gay safety and privacy standards!" >> security-report.md
          echo "SAFETY_STATUS=CERTIFIED" >> $GITHUB_ENV
        elif [ "$ISSUES" -lt 3 ]; then
          echo "⚡ **MOSTLY SAFE** - Minor issues detected, overall good safety posture" >> security-report.md
          echo "SAFETY_STATUS=MOSTLY_SAFE" >> $GITHUB_ENV
        else
          echo "⚠️ **NEEDS REVIEW** - Multiple safety issues require attention" >> security-report.md
          echo "SAFETY_STATUS=NEEDS_REVIEW" >> $GITHUB_ENV
        fi

    - name: 📤 Commit Safety Report
      run: |
        # Create safety reports directory if it doesn't exist
        mkdir -p docs/safety-reports
        
        # Copy report with timestamp
        REPORT_DATE=$(date +"%Y-%m-%d")
        cp security-report.md "docs/safety-reports/safety-audit-$REPORT_DATE.md"
        
        # Update latest report
        cp security-report.md docs/SAFETY-AUDIT.md
        
        # Create safety badge
        case "$SAFETY_STATUS" in
          "CERTIFIED")
            BADGE_COLOR="brightgreen"
            BADGE_TEXT="SAFETY%20CERTIFIED"
            ;;
          "MOSTLY_SAFE")  
            BADGE_COLOR="yellow"
            BADGE_TEXT="MOSTLY%20SAFE"
            ;;
          *)
            BADGE_COLOR="orange"
            BADGE_TEXT="NEEDS%20REVIEW"
            ;;
        esac
        
        # Update README with safety badge
        sed -i "s/\[![Gay Safety Audit](.*)/[![Gay Safety Audit](https:\/\/img.shields.io\/badge\/Gay%20Safety-$BADGE_TEXT-$BADGE_COLOR)](\/docs\/SAFETY-AUDIT.md)/" README.md || true

    - name: 📋 Upload Safety Report as Artifact  
      uses: actions/upload-artifact@v4
      with:
        name: safety-audit-report
        path: |
          security-report.md
          docs/safety-reports/
        retention-days: 90

    - name: 💬 Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🛡️ Security & Safety Audit Results\n\n${report.substring(0, 50000)}${report.length > 50000 ? '\n\n*Report truncated - see full report in artifacts*' : ''}`
          });