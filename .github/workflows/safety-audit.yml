name: 🛡️ Security & Safety Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security audit
    - cron: '0 6 * * 1'
  workflow_dispatch:

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔍 Checkout Code
      uses: actions/checkout@v4

    - name: 📱 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🔒 NPM Security Audit
      run: |
        echo "# 📊 NPM Security Audit Report" > security-report.md
        echo "" >> security-report.md
        echo "**Scan Date:** $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## 📦 Package Vulnerabilities" >> security-report.md
        echo "" >> security-report.md
        npm audit --audit-level=moderate --format=json > audit.json || true
        
        # Parse and format audit results
        if [ -s audit.json ]; then
          echo "### 🚨 Found Vulnerabilities" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat audit.json | jq '.vulnerabilities' >> security-report.md
          echo "\`\`\`" >> security-report.md
        else
          echo "### ✅ No High/Critical Vulnerabilities Found" >> security-report.md
        fi

    - name: 🧪 TypeScript Safety Check
      run: |
        echo "" >> security-report.md
        echo "## 🔷 TypeScript Safety Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Type check with strict mode
        if npx tsc --noEmit --strict; then
          echo "### ✅ TypeScript: All types are safe and validated" >> security-report.md
        else
          echo "### ⚠️ TypeScript: Found type safety issues" >> security-report.md
          echo "\`\`\`" >> security-report.md
          npx tsc --noEmit --strict 2>&1 || true >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi

    - name: 🔍 ESLint Security Rules
      run: |
        echo "" >> security-report.md
        echo "## 🛡️ ESLint Security Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Run ESLint with security plugin
        npm install --no-save eslint-plugin-security
        
        # Create security-focused ESLint config
        cat > .eslintrc.security.json << 'EOF'
        {
          "extends": ["plugin:security/recommended"],
          "plugins": ["security"],
          "rules": {
            "security/detect-object-injection": "error",
            "security/detect-non-literal-regexp": "error",
            "security/detect-unsafe-regex": "error",
            "security/detect-buffer-noassert": "error",
            "security/detect-child-process": "error",
            "security/detect-disable-mustache-escape": "error",
            "security/detect-eval-with-expression": "error",
            "security/detect-no-csrf-before-method-override": "error",
            "security/detect-non-literal-fs-filename": "error",
            "security/detect-non-literal-require": "error",
            "security/detect-possible-timing-attacks": "error",
            "security/detect-pseudoRandomBytes": "error"
          }
        }
        EOF
        
        if npx eslint --config .eslintrc.security.json src/ --format json > eslint-security.json; then
          echo "### ✅ ESLint Security: No security issues detected" >> security-report.md
        else
          echo "### ⚠️ ESLint Security: Found potential security issues" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat eslint-security.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi

    - name: 🔐 Privacy & Data Protection Audit
      run: |
        echo "" >> security-report.md
        echo "## 🏳️‍🌈 Privacy & Data Protection Audit" >> security-report.md
        echo "" >> security-report.md
        
        # Check for potential privacy leaks
        echo "### 📊 External Network Calls" >> security-report.md
        echo "" >> security-report.md
        
        # Search for fetch/xhr calls
        NETWORK_CALLS=$(grep -r -n "fetch\|XMLHttpRequest\|axios" src/ --include="*.ts" --include="*.tsx" || true)
        
        if [ -z "$NETWORK_CALLS" ]; then
          echo "✅ **No external network calls found** - True offline-first architecture" >> security-report.md
        else
          echo "⚠️ **External network calls detected:**" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "$NETWORK_CALLS" >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "### 🍪 Cookie & Tracking Analysis" >> security-report.md
        
        # Check for tracking/cookies
        TRACKING_CODE=$(grep -r -n "document.cookie\|localStorage\|sessionStorage\|gtag\|analytics" src/ --include="*.ts" --include="*.tsx" || true)
        
        if echo "$TRACKING_CODE" | grep -v "analytics.ts" | grep -v "security.ts" >/dev/null; then
          echo "⚠️ **Potential tracking code found:**" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "$TRACKING_CODE" | grep -v "analytics.ts" | grep -v "security.ts" >> security-report.md
          echo "\`\`\`" >> security-report.md
        else
          echo "✅ **No unauthorized tracking detected** - Only user-controlled analytics" >> security-report.md
        fi

    - name: 🔒 Cryptographic Safety Check
      run: |
        echo "" >> security-report.md
        echo "## 🔐 Cryptographic Implementation Audit" >> security-report.md
        echo "" >> security-report.md
        
        # Check crypto usage
        CRYPTO_USAGE=$(grep -r -n "crypto\|hash\|encrypt\|password" src/ --include="*.ts" --include="*.tsx" || true)
        
        if [ -z "$CRYPTO_USAGE" ]; then
          echo "ℹ️ **No cryptographic operations detected**" >> security-report.md
        else
          echo "### 🔍 Cryptographic Operations Found" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "$CRYPTO_USAGE" >> security-report.md
          echo "\`\`\`" >> security-report.md
          
          # Check for weak crypto
          WEAK_CRYPTO=$(echo "$CRYPTO_USAGE" | grep -i "md5\|sha1\|des\|rc4" || true)
          
          if [ -z "$WEAK_CRYPTO" ]; then
            echo "" >> security-report.md
            echo "✅ **No weak cryptographic algorithms detected**" >> security-report.md
          else
            echo "" >> security-report.md
            echo "⚠️ **Weak cryptographic algorithms found:**" >> security-report.md
            echo "\`\`\`" >> security-report.md
            echo "$WEAK_CRYPTO" >> security-report.md
            echo "\`\`\`" >> security-report.md
          fi
        fi

    - name: 📱 PWA Security Audit
      run: |
        echo "" >> security-report.md
        echo "## 📱 PWA Security Configuration" >> security-report.md
        echo "" >> security-report.md
        
        # Check service worker security
        if [ -f "public/sw.js" ] || [ -f "src/sw.ts" ]; then
          echo "### 🔍 Service Worker Security" >> security-report.md
          
          # Check for HTTPS enforcement
          SW_SECURITY=$(grep -n "self.location.protocol.*https\|cache.*https" public/sw.js src/sw.ts 2>/dev/null || true)
          
          if [ -z "$SW_SECURITY" ]; then
            echo "ℹ️ **Service worker found** - Manual review recommended for HTTPS enforcement" >> security-report.md
          else
            echo "✅ **Service worker implements HTTPS security measures**" >> security-report.md
          fi
        else
          echo "ℹ️ **No service worker detected**" >> security-report.md
        fi
        
        # Check manifest security
        if [ -f "public/manifest.json" ]; then
          echo "" >> security-report.md
          echo "### 📋 Web App Manifest Security" >> security-report.md
          
          MANIFEST_PERMS=$(grep -i "permissions\|geolocation\|camera\|microphone" public/manifest.json || true)
          
          if [ -z "$MANIFEST_PERMS" ]; then
            echo "✅ **Web manifest requests no sensitive permissions**" >> security-report.md
          else
            echo "⚠️ **Web manifest requests sensitive permissions:**" >> security-report.md
            echo "\`\`\`json" >> security-report.md
            echo "$MANIFEST_PERMS" >> security-report.md
            echo "\`\`\`" >> security-report.md
          fi
        fi

    - name: 🏳️‍🌈 Gay Safety & Inclusivity Check
      run: |
        echo "" >> security-report.md
        echo "## 🏳️‍🌈 Gay Safety & Inclusivity Audit" >> security-report.md
        echo "" >> security-report.md
        
        # Check for inclusive language
        echo "### 💬 Language Inclusivity Scan" >> security-report.md
        
        EXCLUSIVE_TERMS=$(grep -r -i -n "straight\|normal\|weird\|abnormal\|deviant" src/ --include="*.ts" --include="*.tsx" || true)
        
        if [ -z "$EXCLUSIVE_TERMS" ]; then
          echo "✅ **No exclusionary language detected** - App uses inclusive terminology" >> security-report.md
        else
          echo "⚠️ **Potentially exclusionary terms found - review recommended:**" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "$EXCLUSIVE_TERMS" >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
        # Check for privacy-respecting design
        echo "" >> security-report.md
        echo "### 🔒 Privacy-First Design Verification" >> security-report.md
        
        # Verify no personal data exposure
        PERSONAL_DATA=$(grep -r -i -n "email\|phone\|address\|ssn\|credit.*card" src/ --include="*.ts" --include="*.tsx" || true)
        
        if [ -z "$PERSONAL_DATA" ]; then
          echo "✅ **No personal data collection patterns detected**" >> security-report.md
        else
          echo "⚠️ **Personal data patterns found - verify these are not collected:**" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "$PERSONAL_DATA" >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi

    - name: 📊 Generate Safety Badge
      run: |
        echo "" >> security-report.md
        echo "## 🏅 Safety Certification" >> security-report.md
        echo "" >> security-report.md
        
        # Count issues
        ISSUES=$(grep -c "⚠️\|🚨" security-report.md || echo "0")
        PASSED=$(grep -c "✅" security-report.md || echo "0")
        
        echo "**Audit Summary:**" >> security-report.md
        echo "- ✅ Checks Passed: $PASSED" >> security-report.md
        echo "- ⚠️ Issues Found: $ISSUES" >> security-report.md
        echo "- 📅 Last Audit: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        if [ "$ISSUES" -eq 0 ]; then
          echo "🏆 **SAFETY CERTIFIED** - This app meets gay safety and privacy standards!" >> security-report.md
          echo "SAFETY_STATUS=CERTIFIED" >> $GITHUB_ENV
        elif [ "$ISSUES" -lt 3 ]; then
          echo "⚡ **MOSTLY SAFE** - Minor issues detected, overall good safety posture" >> security-report.md
          echo "SAFETY_STATUS=MOSTLY_SAFE" >> $GITHUB_ENV
        else
          echo "⚠️ **NEEDS REVIEW** - Multiple safety issues require attention" >> security-report.md
          echo "SAFETY_STATUS=NEEDS_REVIEW" >> $GITHUB_ENV
        fi

    - name: 📤 Commit Safety Report
      run: |
        # Create safety reports directory if it doesn't exist
        mkdir -p docs/safety-reports
        
        # Copy report with timestamp
        REPORT_DATE=$(date +"%Y-%m-%d")
        cp security-report.md "docs/safety-reports/safety-audit-$REPORT_DATE.md"
        
        # Update latest report
        cp security-report.md docs/SAFETY-AUDIT.md
        
        # Create safety badge
        case "$SAFETY_STATUS" in
          "CERTIFIED")
            BADGE_COLOR="brightgreen"
            BADGE_TEXT="SAFETY%20CERTIFIED"
            ;;
          "MOSTLY_SAFE")  
            BADGE_COLOR="yellow"
            BADGE_TEXT="MOSTLY%20SAFE"
            ;;
          *)
            BADGE_COLOR="orange"
            BADGE_TEXT="NEEDS%20REVIEW"
            ;;
        esac
        
        # Update README with safety badge
        sed -i "s/\[![Gay Safety Audit](.*)/[![Gay Safety Audit](https:\/\/img.shields.io\/badge\/Gay%20Safety-$BADGE_TEXT-$BADGE_COLOR)](\/docs\/SAFETY-AUDIT.md)/" README.md || true

    - name: 📋 Upload Safety Report as Artifact  
      uses: actions/upload-artifact@v4
      with:
        name: safety-audit-report
        path: |
          security-report.md
          docs/safety-reports/
        retention-days: 90

    - name: 💬 Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🛡️ Security & Safety Audit Results\n\n${report.substring(0, 50000)}${report.length > 50000 ? '\n\n*Report truncated - see full report in artifacts*' : ''}`
          });