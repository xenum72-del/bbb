name: 🛡️ Comprehensive Security & Safety Audit

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'scripts/**'
      - 'vite.config.ts'
      - 'package.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security audit
    - cron: '0 6 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  statuses: write
  pages: write
  id-token: write
  actions: read

jobs:
  comprehensive-security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔍 Checkout Code
      uses: actions/checkout@v4

    - name: 📱 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: 📦 Install Dependencies
      run: |
        # Clean install to avoid rolldown binding issues
        npm ci --ignore-optional || (
          echo "npm ci failed, trying fresh install..."
          rm -rf node_modules package-lock.json
          npm install
        )

    - name: 🔒 NPM Security Audit (Enhanced)
      run: |
        chmod +x scripts/npm-security-audit.sh
        ./scripts/npm-security-audit.sh

    - name: 🧪 TypeScript Safety Check
      run: |
        echo "### 🧪 TypeScript Safety Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Run TypeScript compiler in check mode
        if npx tsc --noEmit --strict; then
          echo "✅ **TypeScript Compilation**: No type safety issues" >> security-report.md
        else
          echo "❌ **TypeScript Compilation**: Type safety issues detected" >> security-report.md
          echo "\`\`\`" >> security-report.md
          npx tsc --noEmit --strict 2>&1 || true >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🔍 ESLint Security Rules
      run: |
        echo "### 🔍 ESLint Security Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Install security-focused ESLint plugins
        npm install --no-save eslint-plugin-security eslint-plugin-no-secrets
        
        # Create temporary ESLint config with security rules
        cat > .eslintrc.security.json << 'EOF'
        {
          "extends": ["./eslint.config.js"],
          "plugins": ["security", "no-secrets"],
          "rules": {
            "security/detect-object-injection": "error",
            "security/detect-non-literal-regexp": "error", 
            "security/detect-unsafe-regex": "error",
            "security/detect-buffer-noassert": "error",
            "security/detect-child-process": "error",
            "security/detect-disable-mustache-escape": "error",
            "security/detect-eval-with-expression": "error",
            "security/detect-no-csrf-before-method-override": "error",
            "security/detect-non-literal-fs-filename": "error",
            "security/detect-non-literal-require": "error",
            "security/detect-possible-timing-attacks": "error",
            "security/detect-pseudoRandomBytes": "error",
            "no-secrets/no-secrets": "error"
          }
        }
        EOF
        
        # Run security-focused linting
        if npx eslint --config .eslintrc.security.json src/ --format json > eslint-security.json; then
          echo "✅ **ESLint Security**: No security issues detected" >> security-report.md
        else
          echo "❌ **ESLint Security**: Security issues detected" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat eslint-security.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🔐 Privacy & Data Protection Audit
      run: |
        echo "### 🔐 Privacy & Data Protection Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Check for potential data leaks
        PRIVACY_ISSUES=0
        
        # Check for console.log in production code
        if grep -r "console\.log\|console\.error\|console\.warn" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v ".test." | grep -v ".spec."; then
          echo "⚠️ **Console Logs Found**: May leak sensitive data in production" >> security-report.md
          PRIVACY_ISSUES=$((PRIVACY_ISSUES + 1))
        fi
        
        # Check for hardcoded API keys or secrets
        if grep -r -i "api[_-]key\|secret\|password\|token" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v ".test." | grep -v ".spec." | grep -E "(=|:)" | grep -v "console.log"; then
          echo "❌ **Potential Hardcoded Secrets**: Found in source code" >> security-report.md
          PRIVACY_ISSUES=$((PRIVACY_ISSUES + 1))
        fi
        
        # Check for localStorage/sessionStorage usage without encryption
        if grep -r "localStorage\|sessionStorage" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v ".test." | grep -v ".spec."; then
          echo "⚠️ **Local Storage Usage**: Ensure sensitive data is encrypted" >> security-report.md
          PRIVACY_ISSUES=$((PRIVACY_ISSUES + 1))
        fi
        
        if [ $PRIVACY_ISSUES -eq 0 ]; then
          echo "✅ **Privacy Audit**: No obvious privacy issues detected" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🔒 Cryptographic Safety Check
      run: |
        echo "### 🔒 Cryptographic Safety Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Check for weak crypto usage
        CRYPTO_ISSUES=0
        
        # Check for deprecated crypto methods
        if grep -r -i "md5\|sha1\|des\|rc4" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
          echo "❌ **Weak Cryptography**: Deprecated algorithms detected" >> security-report.md
          CRYPTO_ISSUES=$((CRYPTO_ISSUES + 1))
        fi
        
        # Check for Math.random() usage (not cryptographically secure)
        if grep -r "Math\.random" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v ".test." | grep -v ".spec."; then
          echo "⚠️ **Weak Random**: Math.random() is not cryptographically secure" >> security-report.md
          CRYPTO_ISSUES=$((CRYPTO_ISSUES + 1))
        fi
        
        if [ $CRYPTO_ISSUES -eq 0 ]; then
          echo "✅ **Cryptographic Safety**: No obvious crypto issues detected" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🏗️ Build Application  
      run: |
        # Try build, if it fails with rolldown issues, reinstall and retry
        npm run build || (
          echo "Build failed, clearing rolldown cache and retrying..."
          npm cache clean --force
          rm -rf node_modules/.vite node_modules/rolldown
          npm install rolldown --force
          npm run build
        )

    - name: 🚀 Start Development Server
      run: |
        echo "Starting Vite development server..."
        
        # Start dev server in background with explicit host binding
        npm run dev -- --host 0.0.0.0 --port 5173 &
        DEV_PID=$!
        echo "Started dev server with PID: $DEV_PID"
        
        # Wait longer and check more frequently
        echo "Waiting for server to be ready..."
        for i in {1..60}; do
          if curl -f http://localhost:5173 >/dev/null 2>&1; then
            echo "✅ Development server is ready after ${i} seconds!"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "❌ Server failed to start after 60 seconds"
            echo "Checking running processes:"
            ps aux | grep node || true
            echo "Checking port 5173:"
            netstat -tlnp | grep 5173 || true
            echo "Trying to get server logs:"
            jobs -l || true
            kill $DEV_PID 2>/dev/null || true
            exit 1
          fi
          echo "Attempt $i/60 - waiting..."
          sleep 1
        done

    - name: 🛡️ Behavioral Security Testing (Enhanced)
      run: |
        echo "Verifying server is still responsive..."
        
        # Double-check server is still running
        if ! curl -f http://localhost:5173 >/dev/null 2>&1; then
          echo "❌ Server not responding, attempting restart..."
          
          # Kill any existing processes on port 5173
          lsof -ti:5173 | xargs kill -9 2>/dev/null || true
          
          # Restart server
          npm run dev -- --host 0.0.0.0 --port 5173 &
          NEW_PID=$!
          echo "Restarted server with PID: $NEW_PID"
          
          # Wait for restart
          for i in {1..30}; do
            if curl -f http://localhost:5173 >/dev/null 2>&1; then
              echo "✅ Server restarted successfully after ${i} seconds"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Server restart failed"
              exit 1
            fi
            sleep 1
          done
        else
          echo "✅ Server is responsive"
        fi
        
        # Run the behavioral security test with verbose output
        echo "Running behavioral security test..."
        node scripts/behavior-security-test.js --port 5173

    - name: 🏳️‍🌈 Gay Safety & Inclusivity Check
      run: |
        echo "### 🏳️‍🌈 Gay Safety & Inclusivity Analysis" >> security-report.md
        echo "" >> security-report.md
        
        INCLUSIVITY_SCORE=0
        
        # Check for inclusive language
        if grep -r -i "gay\|lgbt\|queer\|inclusive\|diversity" src/ README.md --include="*.ts" --include="*.tsx" --include="*.md"; then
          echo "✅ **Inclusive Language**: LGBT+ friendly language detected" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 1))
        fi
        
        # Check for accessibility features
        if grep -r "aria-\|alt=\|role=" src/ --include="*.tsx" --include="*.jsx"; then
          echo "✅ **Accessibility**: ARIA attributes and alt tags found" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 1))
        fi
        
        # Check for potentially harmful language
        if grep -r -i "homo\|f[a4]g\|tr[a4]nn[y1]\|d[y1]k[e3]" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md"; then
          echo "❌ **Harmful Language**: Potentially offensive terms detected" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE - 2))
        else
          echo "✅ **Language Safety**: No obviously harmful language detected" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 1))
        fi
        
        echo "**Inclusivity Score**: $INCLUSIVITY_SCORE/3" >> security-report.md
        echo "" >> security-report.md

    - name: 📊 Parse Security Scores
      id: security-scores
      run: |
        # Parse behavioral security score with better error handling
        if [ -f "behavior-security-report.json" ]; then
          BEHAVIOR_SCORE=$(node -p "JSON.parse(require('fs').readFileSync('behavior-security-report.json', 'utf8')).summary.totalScore" 2>/dev/null || echo "0")
        else
          BEHAVIOR_SCORE=0
        fi
        echo "behavior_score=$BEHAVIOR_SCORE" >> $GITHUB_OUTPUT
        
        # Parse NPM security status with better error handling
        if [ -f "security-audit-summary.json" ]; then
          NPM_VULNS=$(node -p "JSON.parse(require('fs').readFileSync('security-audit-summary.json', 'utf8')).vulnerabilities" 2>/dev/null || echo "0")
          NPM_STATUS=$(node -p "JSON.parse(require('fs').readFileSync('security-audit-summary.json', 'utf8')).status" 2>/dev/null || echo "unknown")
        else
          NPM_VULNS=0
          NPM_STATUS="unknown"
        fi
        echo "npm_vulnerabilities=$NPM_VULNS" >> $GITHUB_OUTPUT
        echo "npm_status=$NPM_STATUS" >> $GITHUB_OUTPUT
        
        # Calculate overall security score
        OVERALL_SCORE=$BEHAVIOR_SCORE
        if [ "$NPM_VULNS" -gt 0 ] && [ "$NPM_VULNS" != "999" ]; then
          OVERALL_SCORE=$((OVERALL_SCORE - NPM_VULNS * 5))
        fi
        
        # Ensure score doesn't go below 0
        if [ $OVERALL_SCORE -lt 0 ]; then
          OVERALL_SCORE=0
        fi
        
        echo "overall_score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
        echo "Overall Security Score: $OVERALL_SCORE/100"
        echo "Behavioral Score: $BEHAVIOR_SCORE/100" 
        echo "NPM Vulnerabilities: $NPM_VULNS ($NPM_STATUS)"

    - name: 📋 Upload Comprehensive Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-security-report-${{ github.sha }}
        path: |
          behavior-security-report.json
          security-report.md
          security-audit-summary.json
          eslint-security.json
        retention-days: 30

    - name: 💬 Comment on PR with Comprehensive Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let behaviorReport = {};
          let npmAudit = {};
          
          try {
            behaviorReport = JSON.parse(fs.readFileSync('behavior-security-report.json', 'utf8'));
          } catch (e) {
            console.log('Could not read behavior report:', e.message);
          }
          
          try {
            npmAudit = JSON.parse(fs.readFileSync('security-audit-summary.json', 'utf8'));
          } catch (e) {
            console.log('Could not read NPM audit:', e.message);
          }
          
          const overallScore = '${{ steps.security-scores.outputs.overall_score }}';
          const behaviorScore = '${{ steps.security-scores.outputs.behavior_score }}';
          const npmVulns = '${{ steps.security-scores.outputs.npm_vulnerabilities }}';
          const npmStatus = '${{ steps.security-scores.outputs.npm_status }}';
          
          const body = `## 🛡️ Comprehensive Security Audit Results
          
          ### 📊 Overall Security Score: ${overallScore}/100
          
          | Audit Type | Score/Status | Details |
          |------------|--------------|---------|
          | 🎯 **Behavioral Security** | **${behaviorScore}/100** | App behavior, PWA, privacy |
          | 📦 **NPM Dependencies** | **${npmVulns} vulnerabilities (${npmStatus})** | Package security |
          | 🧪 **TypeScript Safety** | See artifacts | Type safety analysis |
          | 🔍 **ESLint Security** | See artifacts | Code security patterns |
          | 🔐 **Privacy Audit** | See artifacts | Data protection compliance |
          | 🔒 **Cryptographic Safety** | See artifacts | Crypto implementation review |
          | 🏳️‍🌈 **Inclusivity Check** | See artifacts | Gay-friendly safety features |
          
          ### 🎯 Behavioral Security Summary
          ${behaviorReport.summary ? \`
          - ✅ Tests Passed: \${behaviorReport.summary.testsCount - behaviorReport.summary.issuesCount}
          - ❌ Issues Found: \${behaviorReport.summary.issuesCount}
          - 📱 PWA Ready: \${behaviorReport.pwa?.isInstallable ? '✅' : '❌'}
          \` : '- Report not available'}
          
          ### 📦 NPM Dependencies
          - **Status:** ${npmStatus === 'secure' ? '✅ Secure' : '⚠️ Vulnerabilities Found'}
          - **Vulnerabilities:** ${npmVulns}
          - **Node Version:** ${npmAudit.nodeVersion || 'Unknown'}
          
          ### 🔍 Key Findings
          ${behaviorReport.summary?.keyFindings ? behaviorReport.summary.keyFindings.map(finding => \`- \${finding}\`).join('\\n') : '- No findings available'}
          
          ### ⚡ Performance
          - Load Time: ${behaviorReport.performance?.loadTime || 'N/A'}ms
          - Lighthouse Score: ${behaviorReport.performance?.lighthouseScore || 'N/A'}/100
          
          [📋 View all report artifacts](https://github.com/\${context.repo.owner}/\${context.repo.repo}/actions/runs/\${context.runId})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: ✅ Set Comprehensive Commit Status  
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const overallScore = '${{ steps.security-scores.outputs.overall_score }}';
          const behaviorScore = '${{ steps.security-scores.outputs.behavior_score }}';
          const npmVulns = '${{ steps.security-scores.outputs.npm_vulnerabilities }}';
          
          // Determine status based on overall security
          let state, description;
          
          if (overallScore >= 85 && npmVulns == 0) {
            state = 'success';
            description = `🛡️ Excellent Security: ${overallScore}/100 (0 vulnerabilities)`;
          } else if (overallScore >= 70 && npmVulns <= 2) {
            state = 'pending';  
            description = `⚠️ Good Security: ${overallScore}/100 (${npmVulns} vulnerabilities)`;
          } else {
            state = 'failure';
            description = `❌ Security Issues: ${overallScore}/100 (${npmVulns} vulnerabilities)`;
          }
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: description,
            context: 'security-audit/comprehensive'
          });

  publish-security-dashboard:
    needs: comprehensive-security-audit
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download security reports
      uses: actions/download-artifact@v4
      with:
        name: comprehensive-security-report-${{ github.sha }}
        path: reports/
        
    - name: Generate Security Dashboard
      run: |
        mkdir -p public
        
        # Check if reports exist and extract scores
        if [ -f "reports/behavior-security-report.json" ]; then
          BEHAVIOR_SCORE=$(node -p "JSON.parse(require('fs').readFileSync('reports/behavior-security-report.json', 'utf8')).summary.totalScore" 2>/dev/null || echo "0")
        else
          echo "Warning: behavior-security-report.json not found"
          BEHAVIOR_SCORE=0
        fi
        
        if [ -f "reports/security-audit-summary.json" ]; then
          NPM_VULNS=$(node -p "JSON.parse(require('fs').readFileSync('reports/security-audit-summary.json', 'utf8')).vulnerabilities" 2>/dev/null || echo "0")
          NPM_STATUS=$(node -p "JSON.parse(require('fs').readFileSync('reports/security-audit-summary.json', 'utf8')).status" 2>/dev/null || echo "unknown")
        else
          echo "Warning: security-audit-summary.json not found" 
          NPM_VULNS=0
          NPM_STATUS="unknown"
        fi
        
        echo "Generating dashboard with: Behavioral=$BEHAVIOR_SCORE, NPM=$NPM_VULNS ($NPM_STATUS)"
        
        # Generate comprehensive HTML dashboard
        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>🛡️ Encounter Ledger - Security Dashboard</title>
          <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { 
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
              min-height: 100vh;
              color: #333;
            }
            .container { 
              max-width: 1400px; margin: 0 auto; padding: 20px;
              background: rgba(255,255,255,0.95); 
              min-height: 100vh;
            }
            .header {
              text-align: center; margin-bottom: 30px; padding: 30px;
              background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
              color: white; border-radius: 15px;
              box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            }
            .header h1 { font-size: 2.5rem; margin-bottom: 10px; }
            .header p { font-size: 1.1rem; opacity: 0.9; }
            
            .score-grid { 
              display: grid; 
              grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
              gap: 25px; 
              margin-bottom: 30px; 
            }
            .score-card { 
              background: white; 
              padding: 25px; 
              border-radius: 15px; 
              box-shadow: 0 5px 20px rgba(0,0,0,0.1);
              text-align: center;
              border: 2px solid #f0f0f0;
              transition: transform 0.3s ease;
            }
            .score-card:hover { transform: translateY(-5px); }
            
            .score-value { 
              font-size: 3rem; 
              font-weight: bold; 
              margin: 15px 0;
              text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
            }
            .score-excellent { color: #22c55e; }
            .score-good { color: #f59e0b; }
            .score-poor { color: #ef4444; }
            
            .metric-grid { 
              display: grid; 
              grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); 
              gap: 20px; 
              margin: 25px 0; 
            }
            .metric-card { 
              background: #f8f9fa; 
              padding: 20px; 
              border-radius: 10px; 
              border-left: 4px solid #3b82f6; 
            }
            .metric-card.success { border-left-color: #22c55e; background: #f0fdf4; }
            .metric-card.warning { border-left-color: #f59e0b; background: #fffbeb; }
            .metric-card.error { border-left-color: #ef4444; background: #fef2f2; }
            
            .timestamp { 
              text-align: center; 
              color: #666; 
              margin: 20px 0;
              font-size: 0.9rem;
            }
            .footer {
              text-align: center; 
              margin-top: 40px; 
              padding: 20px;
              background: #f8f9fa;
              border-radius: 10px;
              color: #666;
            }
            .report-link {
              display: inline-block;
              margin: 10px;
              padding: 10px 20px;
              background: #3b82f6;
              color: white;
              text-decoration: none;
              border-radius: 8px;
              transition: background 0.3s;
            }
            .report-link:hover { background: #2563eb; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>🛡️ Encounter Ledger Security Dashboard</h1>
              <p>Comprehensive security analysis and behavioral testing results</p>
              <div class="timestamp">Last updated: TIMESTAMP_PLACEHOLDER</div>
            </div>
            
            <div class="score-grid">
              <div class="score-card">
                <h3>🎯 Behavioral Security</h3>
                <div class="score-value BEHAVIOR_SCORE_CLASS">BEHAVIOR_SCORE_PLACEHOLDER/100</div>
                <p>App behavior, PWA compliance, privacy protection</p>
              </div>
              
              <div class="score-card">
                <h3>📦 NPM Dependencies</h3>
                <div class="score-value NPM_SCORE_CLASS">NPM_VULNS_PLACEHOLDER</div>
                <p>Vulnerabilities found (NPM_STATUS_PLACEHOLDER)</p>
              </div>
              
              <div class="score-card">
                <h3>🔒 Overall Status</h3>
                <div class="score-value OVERALL_SCORE_CLASS">OVERALL_STATUS_PLACEHOLDER</div>
                <p>Combined security assessment</p>
              </div>
            </div>
            
            <div id="detailed-reports">Loading detailed reports...</div>
            
            <div class="footer">
              <p>🤖 Generated automatically by GitHub Actions</p>
              <a href="./behavior-security-report.json" class="report-link">📋 Behavioral Report (JSON)</a>
              <a href="./security-audit-summary.json" class="report-link">📦 NPM Audit (JSON)</a>
              <p style="margin-top: 15px;">
                <a href="https://github.com/csbogdan/bbb" class="report-link">📚 View Source Code</a>
                <a href="https://github.com/csbogdan/bbb/actions" class="report-link">🔍 CI/CD Logs</a>
              </p>
            </div>
          </div>
          
          <script>
            // Load and display detailed reports
            Promise.all([
              fetch('./behavior-security-report.json').then(r => r.json()).catch(() => ({})),
              fetch('./security-audit-summary.json').then(r => r.json()).catch(() => ({}))
            ]).then(([behaviorData, npmData]) => {
              const container = document.getElementById('detailed-reports');
              
              let html = '<h2>📊 Detailed Analysis</h2><div class="metric-grid">';
              
              // Behavioral security details
              if (behaviorData.summary) {
                html += `
                  <div class="metric-card ${behaviorData.summary.issuesCount > 0 ? 'warning' : 'success'}">
                    <h3>🎯 Behavioral Security Analysis</h3>
                    <p><strong>Tests Run:</strong> ${behaviorData.summary.testsCount || 'N/A'}</p>
                    <p><strong>Issues Found:</strong> ${behaviorData.summary.issuesCount || 0}</p>
                    <p><strong>PWA Ready:</strong> ${behaviorData.pwa?.isInstallable ? '✅ Yes' : '❌ No'}</p>
                    <p><strong>Privacy Score:</strong> ${behaviorData.privacy?.score || 'N/A'}/100</p>
                  </div>
                `;
              }
              
              // NPM audit details  
              if (npmData.timestamp || npmData.vulnerabilities !== undefined) {
                html += `
                  <div class="metric-card ${npmData.vulnerabilities > 0 ? 'error' : 'success'}">
                    <h3>📦 NPM Dependencies Status</h3>
                    <p><strong>Node Version:</strong> ${npmData.nodeVersion || 'Unknown'}</p>
                    <p><strong>NPM Version:</strong> ${npmData.npmVersion || 'Unknown'}</p>
                    <p><strong>Vulnerabilities:</strong> ${npmData.vulnerabilities || 0}</p>
                    <p><strong>Status:</strong> ${npmData.status || 'Unknown'}</p>
                  </div>
                `;
              }
              
              // Performance metrics
              if (behaviorData.performance) {
                html += `
                  <div class="metric-card">
                    <h3>⚡ Performance Metrics</h3>
                    <p><strong>Load Time:</strong> ${behaviorData.performance.loadTime || 'N/A'}ms</p>
                    <p><strong>Lighthouse Score:</strong> ${behaviorData.performance.lighthouseScore || 'N/A'}/100</p>
                  </div>
                `;
              }
              
              // Security headers
              if (behaviorData.security) {
                html += `
                  <div class="metric-card">
                    <h3>🔒 Security Headers</h3>
                    <p><strong>CSP:</strong> ${behaviorData.security.hasCSP ? '✅ Present' : '❌ Missing'}</p>
                    <p><strong>HSTS:</strong> ${behaviorData.security.hasHSTS ? '✅ Present' : '❌ Missing'}</p>
                    <p><strong>Headers Count:</strong> ${behaviorData.security.headersCount || 0}</p>
                  </div>
                `;
              }
              
              html += '</div>';
              
              // Key findings
              if (behaviorData.summary?.keyFindings?.length > 0) {
                html += '<h3>🔍 Key Security Findings</h3><div class="metric-grid">';
                behaviorData.summary.keyFindings.forEach(finding => {
                  const cardClass = finding.includes('❌') ? 'error' : finding.includes('⚠️') ? 'warning' : 'success';
                  html += `<div class="metric-card ${cardClass}">${finding}</div>`;
                });
                html += '</div>';
              }
              
              container.innerHTML = html;
            }).catch(err => {
              document.getElementById('detailed-reports').innerHTML = `<div class="metric-card error">
                <h3>❌ Error Loading Reports</h3>
                <p>Could not load security reports: ${err.message}</p>
                <p>Check the CI/CD logs for detailed information.</p>
              </div>`;
            });
          </script>
        </body>
        </html>
        EOF
        
        # Replace placeholders with actual values
        sed -i "s/TIMESTAMP_PLACEHOLDER/$(date -u +'%Y-%m-%d %H:%M:%S UTC')/g" public/index.html
        sed -i "s/BEHAVIOR_SCORE_PLACEHOLDER/$BEHAVIOR_SCORE/g" public/index.html
        sed -i "s/NPM_VULNS_PLACEHOLDER/$NPM_VULNS/g" public/index.html
        sed -i "s/NPM_STATUS_PLACEHOLDER/$NPM_STATUS/g" public/index.html
        
        # Determine CSS classes for scores
        if [ "$BEHAVIOR_SCORE" -ge 85 ]; then
          BEHAVIOR_CLASS="score-excellent"
        elif [ "$BEHAVIOR_SCORE" -ge 70 ]; then
          BEHAVIOR_CLASS="score-good"
        else
          BEHAVIOR_CLASS="score-poor"
        fi
        
        if [ "$NPM_VULNS" -eq 0 ]; then
          NPM_CLASS="score-excellent"
        elif [ "$NPM_VULNS" -le 2 ]; then
          NPM_CLASS="score-good"
        else
          NPM_CLASS="score-poor"
        fi
        
        if [ "$BEHAVIOR_SCORE" -ge 85 ] && [ "$NPM_VULNS" -eq 0 ]; then
          OVERALL_STATUS="SECURE"
          OVERALL_CLASS="score-excellent"
        elif [ "$BEHAVIOR_SCORE" -ge 70 ] && [ "$NPM_VULNS" -le 2 ]; then
          OVERALL_STATUS="GOOD"
          OVERALL_CLASS="score-good"
        else
          OVERALL_STATUS="REVIEW"
          OVERALL_CLASS="score-poor"
        fi
        
        sed -i "s/BEHAVIOR_SCORE_CLASS/$BEHAVIOR_CLASS/g" public/index.html
        sed -i "s/NPM_SCORE_CLASS/$NPM_CLASS/g" public/index.html
        sed -i "s/OVERALL_SCORE_CLASS/$OVERALL_CLASS/g" public/index.html
        sed -i "s/OVERALL_STATUS_PLACEHOLDER/$OVERALL_STATUS/g" public/index.html
        
    - name: Copy Security Reports
      run: |
        # Copy all reports to public directory
        if [ -d "reports" ] && [ "$(ls -A reports)" ]; then
          cp reports/* public/
          echo "Copied security reports to public directory"
          ls -la public/
        else
          echo "No reports found - creating placeholder files"
          echo '{"error": "No behavioral report generated", "summary": {"totalScore": 0}}' > public/behavior-security-report.json
          echo '{"error": "No NPM audit generated", "vulnerabilities": 0, "status": "unknown"}' > public/security-audit-summary.json
        fi
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        destination_dir: security-dashboard
        keep_files: true