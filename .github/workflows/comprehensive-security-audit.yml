name: 🛡️ Comprehensive Security & Safety Audit

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'scripts/**'
      - 'vite.config.ts'
      - 'package.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security audit
    - cron: '0 6 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  statuses: write
  pages: write
  id-token: write
  actions: read

jobs:
  comprehensive-security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔍 Checkout Code
      uses: actions/checkout@v4

    - name: 📱 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: 📦 Install Dependencies
      run: |
        # Clean install to avoid rolldown binding issues
        npm ci --ignore-optional || (
          echo "npm ci failed, trying fresh install..."
          rm -rf node_modules package-lock.json
          npm install
        )

    - name: 🔒 NPM Security Audit (Enhanced)
      run: |
        chmod +x scripts/npm-security-audit.sh
        ./scripts/npm-security-audit.sh

    - name: 🧪 TypeScript Safety Check
      run: |
        echo "### 🧪 TypeScript Safety Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Run TypeScript compiler in check mode
        if npx tsc --noEmit --strict; then
          echo "✅ **TypeScript Compilation**: No type safety issues" >> security-report.md
        else
          echo "❌ **TypeScript Compilation**: Type safety issues detected" >> security-report.md
          echo "\`\`\`" >> security-report.md
          npx tsc --noEmit --strict 2>&1 || true >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🔍 ESLint Security Rules
      run: |
        echo "### 🔍 ESLint Security Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Install security-focused ESLint plugins
        npm install --no-save eslint-plugin-security eslint-plugin-no-secrets
        
        # Create temporary ESLint config with security rules
        cat > .eslintrc.security.json << 'EOF'
        {
          "extends": ["./eslint.config.js"],
          "plugins": ["security", "no-secrets"],
          "rules": {
            "security/detect-object-injection": "error",
            "security/detect-non-literal-regexp": "error", 
            "security/detect-unsafe-regex": "error",
            "security/detect-buffer-noassert": "error",
            "security/detect-child-process": "error",
            "security/detect-disable-mustache-escape": "error",
            "security/detect-eval-with-expression": "error",
            "security/detect-no-csrf-before-method-override": "error",
            "security/detect-non-literal-fs-filename": "error",
            "security/detect-non-literal-require": "error",
            "security/detect-possible-timing-attacks": "error",
            "security/detect-pseudoRandomBytes": "error",
            "no-secrets/no-secrets": "error"
          }
        }
        EOF
        
        # Run security-focused linting
        if npx eslint --config .eslintrc.security.json src/ --format json > eslint-security.json; then
          echo "✅ **ESLint Security**: No security issues detected" >> security-report.md
        else
          echo "❌ **ESLint Security**: Security issues detected" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat eslint-security.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🔐 Privacy & Data Protection Audit
      run: |
        echo "### 🔐 Privacy & Data Protection Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Check for potential data leaks
        PRIVACY_ISSUES=0
        
        # Check for console.log in production code
        if grep -r "console\.log\|console\.error\|console\.warn" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v ".test." | grep -v ".spec."; then
          echo "⚠️ **Console Logs Found**: May leak sensitive data in production" >> security-report.md
          PRIVACY_ISSUES=$((PRIVACY_ISSUES + 1))
        fi
        
        # Check for hardcoded API keys or secrets
        if grep -r -i "api[_-]key\|secret\|password\|token" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v ".test." | grep -v ".spec." | grep -E "(=|:)" | grep -v "console.log"; then
          echo "❌ **Potential Hardcoded Secrets**: Found in source code" >> security-report.md
          PRIVACY_ISSUES=$((PRIVACY_ISSUES + 1))
        fi
        
        # Check for localStorage/sessionStorage usage without encryption
        if grep -r "localStorage\|sessionStorage" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v ".test." | grep -v ".spec."; then
          echo "⚠️ **Local Storage Usage**: Ensure sensitive data is encrypted" >> security-report.md
          PRIVACY_ISSUES=$((PRIVACY_ISSUES + 1))
        fi
        
        if [ $PRIVACY_ISSUES -eq 0 ]; then
          echo "✅ **Privacy Audit**: No obvious privacy issues detected" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🔒 Cryptographic Safety Check
      run: |
        echo "### 🔒 Cryptographic Safety Analysis" >> security-report.md
        echo "" >> security-report.md
        
        # Check for weak crypto usage
        CRYPTO_ISSUES=0
        
        # Check for deprecated crypto methods
        if grep -r -i "md5\|sha1\|des\|rc4" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
          echo "❌ **Weak Cryptography**: Deprecated algorithms detected" >> security-report.md
          CRYPTO_ISSUES=$((CRYPTO_ISSUES + 1))
        fi
        
        # Check for Math.random() usage (not cryptographically secure)
        if grep -r "Math\.random" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v ".test." | grep -v ".spec."; then
          echo "⚠️ **Weak Random**: Math.random() is not cryptographically secure" >> security-report.md
          CRYPTO_ISSUES=$((CRYPTO_ISSUES + 1))
        fi
        
        if [ $CRYPTO_ISSUES -eq 0 ]; then
          echo "✅ **Cryptographic Safety**: No obvious crypto issues detected" >> security-report.md
        fi
        echo "" >> security-report.md

    - name: 🏗️ Build Application  
      run: |
        # Try build, if it fails with rolldown issues, reinstall and retry
        npm run build || (
          echo "Build failed, clearing rolldown cache and retrying..."
          npm cache clean --force
          rm -rf node_modules/.vite node_modules/rolldown
          npm install rolldown --force
          npm run build
        )

    - name: 🚀 Start Development Server
      run: |
        echo "Starting Vite development server..."
        
        # Start dev server in background with explicit host binding
        npm run dev -- --host 0.0.0.0 --port 5173 &
        DEV_PID=$!
        echo "Started dev server with PID: $DEV_PID"
        
        # Wait longer and check more frequently
        echo "Waiting for server to be ready..."
        for i in {1..60}; do
          if curl -f http://localhost:5173 >/dev/null 2>&1; then
            echo "✅ Development server is ready after ${i} seconds!"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "❌ Server failed to start after 60 seconds"
            echo "Checking running processes:"
            ps aux | grep node || true
            echo "Checking port 5173:"
            netstat -tlnp | grep 5173 || true
            echo "Trying to get server logs:"
            jobs -l || true
            kill $DEV_PID 2>/dev/null || true
            exit 1
          fi
          echo "Attempt $i/60 - waiting..."
          sleep 1
        done

    - name: 🛡️ Behavioral Security Testing (Enhanced)
      run: |
        echo "Verifying server is still responsive..."
        
        # Double-check server is still running
        if ! curl -f http://localhost:5173 >/dev/null 2>&1; then
          echo "❌ Server not responding, attempting restart..."
          
          # Kill any existing processes on port 5173
          lsof -ti:5173 | xargs kill -9 2>/dev/null || true
          
          # Restart server
          npm run dev -- --host 0.0.0.0 --port 5173 &
          NEW_PID=$!
          echo "Restarted server with PID: $NEW_PID"
          
          # Wait for restart
          for i in {1..30}; do
            if curl -f http://localhost:5173 >/dev/null 2>&1; then
              echo "✅ Server restarted successfully after ${i} seconds"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Server restart failed"
              exit 1
            fi
            sleep 1
          done
        else
          echo "✅ Server is responsive"
        fi
        
        # Run the behavioral security test with verbose output
        echo "Running behavioral security test..."
        node scripts/behavior-security-test.js --port 5173

    - name: 🏳️‍🌈 Gay Safety & Inclusivity Check
      run: |
        echo "### 🏳️‍🌈 Gay Safety & Inclusivity Analysis" >> security-report.md
        echo "" >> security-report.md
        
        INCLUSIVITY_SCORE=0
        
        # Check for inclusive language
        if grep -r -i "gay\|lgbt\|queer\|inclusive\|diversity" src/ README.md --include="*.ts" --include="*.tsx" --include="*.md"; then
          echo "✅ **Inclusive Language**: LGBT+ friendly language detected" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 1))
        fi
        
        # Check for accessibility features
        if grep -r "aria-\|alt=\|role=" src/ --include="*.tsx" --include="*.jsx"; then
          echo "✅ **Accessibility**: ARIA attributes and alt tags found" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 1))
        fi
        
        # Check for potentially harmful language
        if grep -r -i "homo\|f[a4]g\|tr[a4]nn[y1]\|d[y1]k[e3]" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.md"; then
          echo "❌ **Harmful Language**: Potentially offensive terms detected" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE - 2))
        else
          echo "✅ **Language Safety**: No obviously harmful language detected" >> security-report.md
          INCLUSIVITY_SCORE=$((INCLUSIVITY_SCORE + 1))
        fi
        
        echo "**Inclusivity Score**: $INCLUSIVITY_SCORE/3" >> security-report.md
        echo "" >> security-report.md

    - name: 📊 Parse Security Scores
      id: security-scores
      run: |
        # Parse behavioral security score with better error handling
        if [ -f "behavior-security-report.json" ]; then
          BEHAVIOR_SCORE=$(node -p "JSON.parse(require('fs').readFileSync('behavior-security-report.json', 'utf8')).summary.totalScore" 2>/dev/null || echo "0")
        else
          BEHAVIOR_SCORE=0
        fi
        echo "behavior_score=$BEHAVIOR_SCORE" >> $GITHUB_OUTPUT
        
        # Parse NPM security status with better error handling
        if [ -f "security-audit-summary.json" ]; then
          NPM_VULNS=$(node -p "JSON.parse(require('fs').readFileSync('security-audit-summary.json', 'utf8')).vulnerabilities" 2>/dev/null || echo "0")
          NPM_STATUS=$(node -p "JSON.parse(require('fs').readFileSync('security-audit-summary.json', 'utf8')).status" 2>/dev/null || echo "unknown")
        else
          NPM_VULNS=0
          NPM_STATUS="unknown"
        fi
        echo "npm_vulnerabilities=$NPM_VULNS" >> $GITHUB_OUTPUT
        echo "npm_status=$NPM_STATUS" >> $GITHUB_OUTPUT
        
        # Calculate overall security score
        OVERALL_SCORE=$BEHAVIOR_SCORE
        if [ "$NPM_VULNS" -gt 0 ] && [ "$NPM_VULNS" != "999" ]; then
          OVERALL_SCORE=$((OVERALL_SCORE - NPM_VULNS * 5))
        fi
        
        # Ensure score doesn't go below 0
        if [ $OVERALL_SCORE -lt 0 ]; then
          OVERALL_SCORE=0
        fi
        
        echo "overall_score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
        echo "Overall Security Score: $OVERALL_SCORE/100"
        echo "Behavioral Score: $BEHAVIOR_SCORE/100" 
        echo "NPM Vulnerabilities: $NPM_VULNS ($NPM_STATUS)"

    - name: 📋 Upload Comprehensive Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-security-report-${{ github.sha }}
        path: |
          behavior-security-report.json
          security-report.md
          security-audit-summary.json
          eslint-security.json
        retention-days: 30

    - name: 💬 Comment on PR with Comprehensive Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let behaviorReport = {};
          let npmAudit = {};
          
          try {
            behaviorReport = JSON.parse(fs.readFileSync('behavior-security-report.json', 'utf8'));
          } catch (e) {
            console.log('Could not read behavior report:', e.message);
          }
          
          try {
            npmAudit = JSON.parse(fs.readFileSync('security-audit-summary.json', 'utf8'));
          } catch (e) {
            console.log('Could not read NPM audit:', e.message);
          }
          
          const overallScore = '${{ steps.security-scores.outputs.overall_score }}';
          const behaviorScore = '${{ steps.security-scores.outputs.behavior_score }}';
          const npmVulns = '${{ steps.security-scores.outputs.npm_vulnerabilities }}';
          const npmStatus = '${{ steps.security-scores.outputs.npm_status }}';
          
          const body = `## 🛡️ Comprehensive Security Audit Results
          
          ### 📊 Overall Security Score: ${overallScore}/100
          
          | Audit Type | Score/Status | Details |
          |------------|--------------|---------|
          | 🎯 **Behavioral Security** | **${behaviorScore}/100** | App behavior, PWA, privacy |
          | 📦 **NPM Dependencies** | **${npmVulns} vulnerabilities (${npmStatus})** | Package security |
          | 🧪 **TypeScript Safety** | See artifacts | Type safety analysis |
          | 🔍 **ESLint Security** | See artifacts | Code security patterns |
          | 🔐 **Privacy Audit** | See artifacts | Data protection compliance |
          | 🔒 **Cryptographic Safety** | See artifacts | Crypto implementation review |
          | 🏳️‍🌈 **Inclusivity Check** | See artifacts | Gay-friendly safety features |
          
          ### 🎯 Behavioral Security Summary
          ${behaviorReport.summary ? \`
          - ✅ Tests Passed: \${behaviorReport.summary.testsCount - behaviorReport.summary.issuesCount}
          - ❌ Issues Found: \${behaviorReport.summary.issuesCount}
          - 📱 PWA Ready: \${behaviorReport.pwa?.isInstallable ? '✅' : '❌'}
          \` : '- Report not available'}
          
          ### 📦 NPM Dependencies
          - **Status:** ${npmStatus === 'secure' ? '✅ Secure' : '⚠️ Vulnerabilities Found'}
          - **Vulnerabilities:** ${npmVulns}
          - **Node Version:** ${npmAudit.nodeVersion || 'Unknown'}
          
          ### 🔍 Key Findings
          ${behaviorReport.summary?.keyFindings ? behaviorReport.summary.keyFindings.map(finding => \`- \${finding}\`).join('\\n') : '- No findings available'}
          
          ### ⚡ Performance
          - Load Time: ${behaviorReport.performance?.loadTime || 'N/A'}ms
          - Lighthouse Score: ${behaviorReport.performance?.lighthouseScore || 'N/A'}/100
          
          [📋 View all report artifacts](https://github.com/\${context.repo.owner}/\${context.repo.repo}/actions/runs/\${context.runId})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: ✅ Set Comprehensive Commit Status  
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const overallScore = '${{ steps.security-scores.outputs.overall_score }}';
          const behaviorScore = '${{ steps.security-scores.outputs.behavior_score }}';
          const npmVulns = '${{ steps.security-scores.outputs.npm_vulnerabilities }}';
          
          // Determine status based on overall security
          let state, description;
          
          if (overallScore >= 85 && npmVulns == 0) {
            state = 'success';
            description = `🛡️ Excellent Security: ${overallScore}/100 (0 vulnerabilities)`;
          } else if (overallScore >= 70 && npmVulns <= 2) {
            state = 'pending';  
            description = `⚠️ Good Security: ${overallScore}/100 (${npmVulns} vulnerabilities)`;
          } else {
            state = 'failure';
            description = `❌ Security Issues: ${overallScore}/100 (${npmVulns} vulnerabilities)`;
          }
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: description,
            context: 'security-audit/comprehensive'
          });

  # GitHub Pages deployment disabled temporarily - focus on core security audit first
  # Will re-enable once the main security testing is stable