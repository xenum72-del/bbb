[{"filePath":"/home/runner/work/bbb/bbb/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/ActivitiesSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/AzureBackup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/EncounterForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/InteractionTypeManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/LocationInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/MapView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/MapViewLeaflet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/ParticipantsSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/PaymentSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/PhotoManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/StarRating.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/TagsInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/TestRunner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/components/UnlockScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/db/sampleData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/db/schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/hooks/useDatabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/pages/AddEncounter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/pages/Analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/pages/Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/pages/EditEncounter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/pages/Friends.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/pages/Help.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/pages/Settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8004,8007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8004,8007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8409,8412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8409,8412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":291,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8937,8940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8937,8940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useSettings, useInteractionTypes, settingsApi } from '../hooks/useDatabase';\nimport { useState, useEffect } from 'react';\nimport { db } from '../db/schema';\nimport { isiOS } from '../utils/iosBackup';\nimport {\n  getSecuritySettings,\n  saveSecuritySettings,\n  setupPin,\n  removePin,\n  verifyPin,\n  setupBiometrics,\n  disableBiometrics,\n  lockSession,\n  setBackupEncryption\n} from '../utils/security';\nimport { useAnalytics } from '../utils/analytics';\nimport AzureBackup from '../components/AzureBackup';\nimport InteractionTypeManager from '../components/InteractionTypeManager';\nimport { generateRealisticSampleData } from '../db/sampleData';\n\n// Developer mode - activated by tapping Settings title 7 times within 3 seconds\n\n\ninterface SettingsProps {\n  onNavigate: (page: string) => void;\n}\n\nexport default function Settings({ onNavigate }: SettingsProps) {\n  const settings = useSettings();\n  const interactionTypes = useInteractionTypes();\n  \n  const [localSettings, setLocalSettings] = useState({\n    scoringWeights: {\n      frequency: 0.35,\n      recency: 0.25,\n      quality: 0.30,\n      mutuality: 0.10\n    },\n    defaultRating: 4,\n    defaultTypeId: undefined as number | undefined,\n    theme: 'system' as 'light' | 'dark' | 'system',\n    notificationsEnabled: false,\n    reminderFrequency: 'none' as 'daily' | 'weekly' | 'none',\n    enableOnlineGeocoding: false\n  });\n\n  const [showExport, setShowExport] = useState(false);\n  const [securitySettings, setSecuritySettings] = useState(() => getSecuritySettings());\n  const [showPinSetup, setShowPinSetup] = useState(false);\n  const [newPin, setNewPin] = useState('');\n  const [confirmPin, setConfirmPin] = useState('');\n  const [currentPin, setCurrentPin] = useState('');\n  \n  // Analytics hook\n  const { enable, disable, getStatus } = useAnalytics();\n  const [analyticsStatus, setAnalyticsStatus] = useState(() => getStatus());\n  \n  // Azure Backup state\n  const [showAzureBackup, setShowAzureBackup] = useState(false);\n  \n  // Interaction Type Manager state\n  const [showTypeManager, setShowTypeManager] = useState(false);\n\n  // Developer mode state\n  const [tapCount, setTapCount] = useState(0);\n  const [tapTimeout, setTapTimeout] = useState<number | null>(null);\n  const [isDeveloperMode, setIsDeveloperMode] = useState(false);\n\n  // Developer mode activation function\n  const handleTitleTap = () => {\n    const newCount = tapCount + 1;\n    setTapCount(newCount);\n\n    // Clear existing timeout\n    if (tapTimeout) {\n      clearTimeout(tapTimeout);\n    }\n\n    // Reset counter after 3 seconds\n    const timeout = setTimeout(() => {\n      setTapCount(0);\n      setTapTimeout(null);\n    }, 3000);\n    setTapTimeout(timeout);\n\n    // Activate developer mode after 7 taps\n    if (newCount === 7) {\n      setIsDeveloperMode(true);\n      setTapCount(0);\n      if (tapTimeout) clearTimeout(tapTimeout);\n      setTapTimeout(null);\n      \n      // Show confirmation\n      alert('🔧 Developer mode activated! Developer tools are now visible.');\n    }\n  };\n  \n\n\n\n  useEffect(() => {\n    if (settings) {\n      setLocalSettings({\n        scoringWeights: settings.scoringWeights,\n        defaultRating: settings.defaultRating,\n        defaultTypeId: settings.defaultTypeId,\n        theme: settings.theme,\n        notificationsEnabled: settings.notificationsEnabled,\n        reminderFrequency: settings.reminderFrequency,\n        enableOnlineGeocoding: settings.enableOnlineGeocoding ?? false\n      });\n    }\n  }, [settings]);\n\n  // Refresh security settings\n  useEffect(() => {\n    setSecuritySettings(getSecuritySettings());\n  }, []);\n\n  // Security functions\n  const handlePinSetup = async () => {\n    if (newPin !== confirmPin) {\n      alert('PINs do not match');\n      return;\n    }\n    if (newPin.length < 4) {\n      alert('PIN must be at least 4 digits');\n      return;\n    }\n    \n    try {\n      await setupPin(newPin);\n      \n      // Automatically enable backup encryption when PIN is set\n      setBackupEncryption(true);\n      \n      setSecuritySettings(getSecuritySettings());\n      setShowPinSetup(false);\n      setNewPin('');\n      setConfirmPin('');\n      alert('PIN set successfully! Backup encryption has been automatically enabled.');\n    } catch (error) {\n      alert('Error setting PIN: ' + (error as Error).message);\n    }\n  };\n\n  const handlePinRemove = async () => {\n    if (!currentPin) {\n      alert('Please enter your current PIN');\n      return;\n    }\n    \n    try {\n      // Verify current PIN first\n      const isValid = await verifyPin(currentPin);\n      if (!isValid) {\n        alert('Incorrect PIN');\n        return;\n      }\n      \n      removePin();\n      setSecuritySettings(getSecuritySettings());\n      setCurrentPin('');\n      alert('PIN removed successfully');\n    } catch (error) {\n      alert('Error removing PIN: ' + (error as Error).message);\n    }\n  };\n\n  const handleBiometricsToggle = async () => {\n    try {\n      if (securitySettings.biometricsEnabled) {\n        await disableBiometrics();\n      } else {\n        await setupBiometrics();\n      }\n      setSecuritySettings(getSecuritySettings());\n    } catch (error) {\n      alert('Error with biometrics: ' + (error as Error).message);\n    }\n  };\n\n  const handleAutoLockChange = (minutes: number) => {\n    const updated = { ...securitySettings, autoLockMinutes: minutes };\n    saveSecuritySettings(updated);\n    setSecuritySettings(updated);\n  };\n\n  const handleBackupEncryptionToggle = () => {\n    const newValue = !securitySettings.encryptBackups;\n    setBackupEncryption(newValue);\n    setSecuritySettings(getSecuritySettings());\n  };\n\n  // Analytics functions\n  const handleAnalyticsToggle = () => {\n    if (analyticsStatus.enabled) {\n      disable();\n    } else {\n      enable();\n    }\n    setAnalyticsStatus(getStatus());\n  };\n\n\n\n  const handleSaveSettings = async () => {\n    try {\n      await settingsApi.update(localSettings);\n      alert('Settings saved successfully!');\n    } catch (error) {\n      console.error('Error saving settings:', error);\n      alert('Failed to save settings');\n    }\n  };\n\n\n\n  const handleExportData = async () => {\n    try {\n      const { exportToFiles } = await import('../utils/backup');\n      await exportToFiles(true); // true = include photos\n      setShowExport(false);\n      alert('✅ Data exported to Files app!');\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      alert('Failed to export data: ' + (error as Error).message);\n    }\n  };\n\n  const handleImportData = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = async (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n\n      try {\n        const text = await file.text();\n        const importData = JSON.parse(text);\n        \n        // Support both old format (with .data) and new format (direct)\n        const backupData = importData.data || importData;\n        \n        // Validate backup format - check for required fields\n        if (!backupData.friends && !backupData.encounters && !backupData.interactionTypes) {\n          alert('Invalid backup file format. Expected friends, encounters, or interactionTypes data.');\n          return;\n        }\n\n        // Ask user if they want to merge or replace\n        const replace = confirm(\n          'Do you want to REPLACE all existing data? Click OK to replace, Cancel to merge with existing data.'\n        );\n\n        if (replace) {\n          // Clear existing data first\n          await db.transaction('rw', [db.friends, db.encounters, db.interactionTypes, db.settings], async () => {\n            await db.friends.clear();\n            await db.encounters.clear();\n            await db.interactionTypes.clear();\n            await db.settings.clear();\n          });\n        }\n\n        // Import data\n        if (backupData.friends && backupData.friends.length > 0) {\n          await db.friends.bulkAdd(backupData.friends.map((f: Record<string, any>) => ({\n            ...f,\n            createdAt: new Date(f.createdAt),\n            updatedAt: f.updatedAt ? new Date(f.updatedAt) : undefined,\n            lastTested: f.lastTested ? new Date(f.lastTested) : undefined\n          })));\n        }\n\n        if (backupData.encounters && backupData.encounters.length > 0) {\n          await db.encounters.bulkAdd(backupData.encounters.map((e: Record<string, any>) => ({\n            ...e,\n            date: new Date(e.date),\n            createdAt: new Date(e.createdAt),\n            updatedAt: e.updatedAt ? new Date(e.updatedAt) : undefined\n          })));\n        }\n\n        if (backupData.interactionTypes && backupData.interactionTypes.length > 0) {\n          await db.interactionTypes.bulkAdd(backupData.interactionTypes);\n        }\n\n        if (backupData.settings && backupData.settings.length > 0) {\n          await db.settings.bulkAdd(backupData.settings.map((s: Record<string, any>) => ({\n            ...s,\n            createdAt: new Date(s.createdAt),\n            updatedAt: s.updatedAt ? new Date(s.updatedAt) : undefined\n          })));\n        }\n\n        alert('Data imported successfully! Refresh the page to see changes.');\n        window.location.reload();\n      } catch (error) {\n        console.error('Error importing data:', error);\n        alert('Failed to import data. Make sure the file is a valid backup.');\n      }\n    };\n    input.click();\n  };\n\n\n\n  const handleClearData = async () => {\n    if (!confirm('This will permanently delete ALL your data. This cannot be undone. Are you sure?')) {\n      return;\n    }\n    \n    if (!confirm('Last chance! This will delete everything: friends, encounters, settings. Continue?')) {\n      return;\n    }\n\n    try {\n      await db.delete();\n      await db.open();\n      alert('All data cleared successfully!');\n      window.location.reload();\n    } catch (error) {\n      console.error('Error clearing data:', error);\n      alert('Failed to clear data');\n    }\n  };\n\n  const totalWeight = Object.values(localSettings.scoringWeights).reduce((a, b) => a + b, 0);\n  const isWeightValid = Math.abs(totalWeight - 1.0) < 0.001;\n\n  return (\n    <div className=\"p-4 space-y-4 min-h-screen relative\">\n      <div className=\"space-y-6 relative z-10\">\n        <div className=\"flex items-center mb-8 p-6 bg-white/70 dark:bg-gray-800/70 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/30 dark:border-gray-700/30\">\n          <div className=\"relative\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-600 via-purple-600 to-purple-700 rounded-3xl flex items-center justify-center shadow-2xl hover:scale-110 transition-transform duration-300\">\n              <svg className=\"w-8 h-8 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n              </svg>\n            </div>\n            <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-br from-emerald-400 to-teal-500 rounded-full shadow-lg animate-pulse\"></div>\n          </div>\n          <div className=\"ml-6\" onClick={handleTitleTap} style={{ cursor: 'default', userSelect: 'none' }}>\n            <h2 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-600 bg-clip-text text-transparent dark:from-white dark:via-gray-100 dark:to-gray-300 drop-shadow-sm\">\n              Settings\n              {tapCount > 0 && tapCount < 7 && (\n                <span className=\"text-xs ml-2 opacity-50\">({tapCount}/7)</span>\n              )}\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400 text-lg mt-1\">\n              Customize your experience\n              {isDeveloperMode && <span className=\"text-xs ml-2 text-orange-500\">🔧 Dev Mode</span>}\n            </p>\n          </div>\n        </div>\n\n        {/* Friend Scoring Algorithm */}\n        <div className=\"group relative bg-white/90 dark:bg-gray-800/90 backdrop-blur-2xl rounded-3xl p-8 shadow-2xl border border-white/40 dark:border-gray-700/40 hover:shadow-3xl hover:scale-[1.01] transition-all duration-500 overflow-hidden\">\n          {/* Card glow effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/5 via-transparent to-emerald-600/5 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n          \n          <div className=\"flex items-center space-x-4 mb-6 relative z-10\">\n            <div className=\"relative\">\n              <div className=\"w-14 h-14 bg-gradient-to-br from-green-500 via-emerald-500 to-emerald-600 rounded-2xl flex items-center justify-center shadow-xl transform group-hover:scale-110 transition-transform duration-300\">\n                <svg className=\"w-8 h-8 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                </svg>\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 animate-pulse\"></div>\n            </div>\n            <div>\n              <h3 className=\"text-xl font-bold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-600 bg-clip-text text-transparent dark:from-white dark:via-gray-100 dark:to-gray-300 drop-shadow-sm\">\n                Friend Scoring Algorithm\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Adjust how friend rankings are calculated</p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 gap-6 mb-4\">\n            {Object.entries(localSettings.scoringWeights).map(([key, value]) => (\n              <div key={key} className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <label className=\"text-sm font-semibold capitalize text-gray-700 dark:text-gray-300\">{key}</label>\n                  <span className=\"text-sm font-bold text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/30 px-2 py-1 rounded-lg\">\n                    {(value * 100).toFixed(0)}%\n                  </span>\n                </div>\n                <div className=\"relative\">\n                  <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.05\"\n                    value={value}\n                    onChange={(e) => setLocalSettings(s => ({\n                      ...s,\n                      scoringWeights: {\n                        ...s.scoringWeights,\n                        [key]: parseFloat(e.target.value)\n                      }\n                    }))}\n                    className=\"w-full h-2 bg-gray-200 dark:bg-gray-600 rounded-lg appearance-none cursor-pointer hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\"\n                    style={{\n                      background: `linear-gradient(to right, #3B82F6 0%, #3B82F6 ${value * 100}%, #E5E7EB ${value * 100}%, #E5E7EB 100%)`,\n                    }}\n                  />\n                  <div \n                    className=\"absolute top-1/2 transform -translate-y-1/2 w-5 h-5 bg-blue-600 border-2 border-white rounded-full shadow-lg pointer-events-none transition-all duration-200\"\n                    style={{ left: `calc(${value * 100}% - 10px)` }}\n                  />\n                </div>\n                <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400\">\n                  <span>0%</span>\n                  <span>25%</span>\n                  <span>50%</span>\n                  <span>75%</span>\n                  <span>100%</span>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className={`text-sm p-3 rounded-lg ${\n            isWeightValid \n              ? 'bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-400' \n              : 'bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400'\n          }`}>\n            Total: {(totalWeight * 100).toFixed(0)}% {!isWeightValid && '(Must equal 100%)'}\n          </div>\n        </div>\n\n        {/* Interaction Types */}\n        <div className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-xl rounded-2xl p-6 shadow-xl border border-white/20\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-pink-500 to-rose-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                <svg className=\"w-6 h-6 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-bold bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent dark:from-white dark:to-gray-300\">\n                  Interaction Types\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Manage activity categories</p>\n              </div>\n            </div>\n            \n            <button\n              onClick={() => setShowTypeManager(true)}\n              className=\"px-4 py-2 bg-gradient-to-r from-pink-500 to-rose-600 text-white rounded-xl hover:from-pink-600 hover:to-rose-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105\"\n            >\n              Manage Types\n            </button>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-2 max-h-40 overflow-y-auto\">\n            {interactionTypes.map(type => (\n              <div key={type.id} className=\"flex items-center space-x-2 p-2 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                <span className=\"text-lg\">{type.icon}</span>\n                <span className=\"text-sm flex-1 truncate\">{type.name}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Security Settings */}\n        <div className=\"group relative bg-white/90 dark:bg-gray-800/90 backdrop-blur-2xl rounded-3xl p-8 shadow-2xl border border-white/40 dark:border-gray-700/40 hover:shadow-3xl hover:scale-[1.01] transition-all duration-500 overflow-hidden\">\n          {/* Card glow effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-red-500/5 via-transparent to-orange-600/5 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n          \n          <div className=\"flex items-center space-x-4 mb-6 relative z-10\">\n            <div className=\"relative\">\n              <div className=\"w-14 h-14 bg-gradient-to-br from-red-500 via-red-600 to-orange-600 rounded-2xl flex items-center justify-center shadow-xl transform group-hover:scale-110 transition-transform duration-300\">\n                <span className=\"text-white text-2xl drop-shadow-sm\">🔒</span>\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 animate-pulse\"></div>\n            </div>\n            <div>\n              <h3 className=\"text-xl font-bold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-600 bg-clip-text text-transparent dark:from-white dark:via-gray-100 dark:to-gray-300 drop-shadow-sm\">\n                Security & Privacy\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Protect your intimate data with PIN or biometrics</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-6 relative z-10\">\n            {/* PIN Section */}\n            <div className=\"p-6 bg-gradient-to-br from-gray-50/80 to-white/80 dark:from-gray-700/80 dark:to-gray-600/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-600/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h4 className=\"font-medium\">PIN Protection</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {securitySettings.hasPin \n                      ? 'PIN is enabled - encrypts all backups automatically' \n                      : 'Secure app & encrypt backups with PIN'\n                    }\n                  </p>\n                </div>\n                <div className=\"flex space-x-2\">\n                  {securitySettings.hasPin ? (\n                    <button\n                      onClick={() => {\n                        const pin = prompt('Enter current PIN to remove:');\n                        if (pin) {\n                          setCurrentPin(pin);\n                          handlePinRemove();\n                        }\n                      }}\n                      className=\"px-3 py-1 bg-red-500 text-white text-sm rounded-lg hover:bg-red-600 transition-colors\"\n                    >\n                      Remove\n                    </button>\n                  ) : (\n                    <button\n                      onClick={() => setShowPinSetup(!showPinSetup)}\n                      className=\"px-3 py-1 bg-green-500 text-white text-sm rounded-lg hover:bg-green-600 transition-colors\"\n                    >\n                      Set PIN\n                    </button>\n                  )}\n                </div>\n              </div>\n\n              {showPinSetup && (\n                <div className=\"space-y-4 border-t border-gray-200 dark:border-gray-600 pt-4\">\n                  <input\n                    type=\"password\"\n                    placeholder=\"Enter 4+ digit PIN\"\n                    value={newPin}\n                    onChange={(e) => setNewPin(e.target.value)}\n                    className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-600 rounded-xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm shadow-inner hover:shadow-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                  />\n                  <input\n                    type=\"password\"\n                    placeholder=\"Confirm PIN\"\n                    value={confirmPin}\n                    onChange={(e) => setConfirmPin(e.target.value)}\n                    className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-600 rounded-xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm shadow-inner hover:shadow-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                  />\n                  \n                  {/* Encryption Warning */}\n                  <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/30 dark:to-indigo-900/30 border-2 border-blue-300 dark:border-blue-600 rounded-xl p-4 shadow-lg\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"text-blue-600 dark:text-blue-400 text-2xl\">🔐</div>\n                      <div>\n                        <h4 className=\"font-bold text-blue-900 dark:text-blue-100 text-base mb-2\">\n                          🚨 Important: Backup Encryption\n                        </h4>\n                        <p className=\"text-blue-800 dark:text-blue-200 text-sm leading-relaxed\">\n                          <strong>This PIN will automatically encrypt ALL your backups!</strong><br/>\n                          • Manual file downloads → Encrypted<br/>\n                          • Azure cloud backups → Encrypted<br/>\n                          • Automatic backups → Encrypted<br/><br/>\n                          <span className=\"text-blue-700 dark:text-blue-300\">\n                            Choose a PIN you'll remember - you'll need it to restore any backup.\n                          </span>\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex space-x-3\">\n                    <button\n                      onClick={handlePinSetup}\n                      className=\"px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl font-medium shadow-lg hover:from-blue-600 hover:to-blue-700 hover:scale-105 transition-all duration-300\"\n                    >\n                      Save PIN\n                    </button>\n                    <button\n                      onClick={() => {\n                        setShowPinSetup(false);\n                        setNewPin('');\n                        setConfirmPin('');\n                      }}\n                      className=\"px-6 py-3 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-xl font-medium shadow-lg hover:from-gray-600 hover:to-gray-700 hover:scale-105 transition-all duration-300\"\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Biometrics Section */}\n            <div className=\"p-6 bg-gradient-to-br from-gray-50/80 to-white/80 dark:from-gray-700/80 dark:to-gray-600/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-600/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">Biometric Authentication</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Use Face ID, Touch ID, or fingerprint\n                  </p>\n                </div>\n                <button\n                  onClick={handleBiometricsToggle}\n                  className={`px-6 py-3 text-sm font-medium rounded-2xl shadow-lg transform hover:scale-105 transition-all duration-300 ${\n                    securitySettings.biometricsEnabled\n                      ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:from-green-600 hover:to-emerald-700 shadow-green-500/30'\n                      : 'bg-gradient-to-r from-gray-300 to-gray-400 text-gray-700 hover:from-gray-400 hover:to-gray-500 dark:from-gray-600 dark:to-gray-700 dark:text-gray-300 dark:hover:from-gray-500 dark:hover:to-gray-600 shadow-gray-400/30'\n                  }`}\n                >\n                  {securitySettings.biometricsEnabled ? 'Enabled' : 'Enable'}\n                </button>\n              </div>\n            </div>\n\n            {/* Auto-lock Section */}\n            <div className=\"p-6 bg-gradient-to-br from-gray-50/80 to-white/80 dark:from-gray-700/80 dark:to-gray-600/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-600/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div>\n                <h4 className=\"font-medium mb-3\">Auto-lock Timer</h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                  Lock app after: {securitySettings.autoLockMinutes} minutes\n                </p>\n                <select\n                  value={securitySettings.autoLockMinutes}\n                  onChange={(e) => handleAutoLockChange(Number(e.target.value))}\n                  className=\"w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-600 rounded-xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm shadow-inner hover:shadow-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                >\n                  <option value={1}>1 minute</option>\n                  <option value={15}>15 minutes</option>\n                  <option value={30}>30 minutes</option>\n                  <option value={60}>1 hour</option>\n                </select>\n              </div>\n            </div>\n\n            {/* Backup Encryption Section */}\n            {securitySettings.hasPin && (\n              <div className=\"p-6 bg-gradient-to-br from-gray-50/80 to-white/80 dark:from-gray-700/80 dark:to-gray-600/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-600/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Encrypt Backups</h4>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {securitySettings.encryptBackups \n                        ? 'Backups will be encrypted with your PIN' \n                        : 'Backups will be saved as plain text (not recommended)'\n                      }\n                    </p>\n                  </div>\n                  <button\n                    onClick={handleBackupEncryptionToggle}\n                    className={`px-6 py-3 text-sm font-medium rounded-2xl shadow-lg transform hover:scale-105 transition-all duration-300 ${\n                      securitySettings.encryptBackups\n                        ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:from-green-600 hover:to-emerald-700 shadow-green-500/30'\n                        : 'bg-gradient-to-r from-red-500 to-red-600 text-white hover:from-red-600 hover:to-red-700 shadow-red-500/30'\n                    }`}\n                  >\n                    {securitySettings.encryptBackups ? 'Enabled' : 'Disabled'}\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {/* Lock Now Button */}\n            {securitySettings.hasPin || securitySettings.biometricsEnabled ? (\n              <button\n                onClick={() => {\n                  lockSession();\n                  window.location.reload(); // Force re-authentication\n                }}\n                className=\"w-full px-4 py-3 bg-gradient-to-r from-red-600 to-orange-600 text-white rounded-xl font-medium hover:shadow-lg hover:scale-105 transition-all duration-200\"\n              >\n                🔒 Lock App Now\n              </button>\n            ) : null}\n          </div>\n        </div>\n\n        {/* Analytics Settings */}\n        <div className=\"group relative bg-white/90 dark:bg-gray-800/90 backdrop-blur-2xl rounded-3xl p-8 shadow-2xl border border-white/40 dark:border-gray-700/40 hover:shadow-3xl hover:scale-[1.01] transition-all duration-500 overflow-hidden\">\n          {/* Card glow effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/5 via-transparent to-purple-600/5 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n          \n          <div className=\"flex items-center space-x-4 mb-6 relative z-10\">\n            <div className=\"relative\">\n              <div className=\"w-14 h-14 bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-xl transform group-hover:scale-110 transition-transform duration-300\">\n                <svg className=\"w-8 h-8 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                </svg>\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 animate-pulse\"></div>\n            </div>\n            <div>\n              <h3 className=\"text-xl font-bold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-600 bg-clip-text text-transparent dark:from-white dark:via-gray-100 dark:to-gray-300 drop-shadow-sm\">\n                Anonymous Usage Analytics\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Help improve the app with completely anonymous data</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-6 relative z-10\">\n            {/* Analytics Toggle */}\n            <div className=\"p-6 bg-gradient-to-br from-gray-50/80 to-white/80 dark:from-gray-700/80 dark:to-gray-600/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-600/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h4 className=\"font-medium\">Enable Anonymous Analytics</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {analyticsStatus.enabled ? 'Sharing anonymous usage data' : 'No data collection (default)'}\n                  </p>\n                </div>\n                <button\n                  onClick={handleAnalyticsToggle}\n                  className={`px-6 py-3 text-sm font-medium rounded-2xl shadow-lg transform hover:scale-105 transition-all duration-300 ${\n                    analyticsStatus.enabled\n                      ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:from-green-600 hover:to-emerald-700 shadow-green-500/30'\n                      : 'bg-gradient-to-r from-gray-300 to-gray-400 text-gray-700 hover:from-gray-400 hover:to-gray-500 dark:from-gray-600 dark:to-gray-700 dark:text-gray-300 dark:hover:from-gray-500 dark:hover:to-gray-600 shadow-gray-400/30'\n                  }`}\n                >\n                  {analyticsStatus.enabled ? 'Enabled' : 'Disabled'}\n                </button>\n              </div>\n              \n              {analyticsStatus.enabled && (\n                <div className=\"text-xs text-gray-500 dark:text-gray-400 border-t pt-3\">\n                  <p className=\"mb-1\">📊 Anonymous ID: {analyticsStatus.anonymousId.substring(0, 16)}...</p>\n                  <p className=\"mb-1\">📈 Events queued: {analyticsStatus.eventsQueued}</p>\n                </div>\n              )}\n            </div>\n\n            {/* What We Collect */}\n            <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-xl border border-blue-200 dark:border-blue-800\">\n              <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">📋 What We Collect (If Enabled)</h4>\n              <div className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                <p>✅ Anonymous app interactions (button clicks, page views)</p>\n                <p>✅ General location (city/state level only)</p>\n                <p>✅ Feature usage patterns and error rates</p>\n                <p>✅ Performance metrics and app version</p>\n                <p className=\"font-medium text-green-700 dark:text-green-300 mt-2\">❌ NO personal data, names, or encounter details</p>\n                <p className=\"font-medium text-green-700 dark:text-green-300\">❌ NO precise location or device identification</p>\n              </div>\n            </div>\n\n            {/* Privacy Notice */}\n            <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-xl border border-green-200 dark:border-green-800\">\n              <h4 className=\"font-medium text-green-900 dark:text-green-100 mb-2\">🛡️ Privacy Guarantee</h4>\n              <div className=\"text-sm text-green-800 dark:text-green-200 space-y-1\">\n                <p>• All analytics are completely anonymous and cannot be traced back to you</p>\n                <p>• Your encounter data, friends list, and personal info are NEVER shared</p>\n                <p>• You can disable this anytime with zero impact on app functionality</p>\n                <p>• Data helps us improve features but your privacy comes first, always</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Location Search Settings */}\n        <div className=\"group relative bg-white/90 dark:bg-gray-800/90 backdrop-blur-2xl rounded-3xl p-8 shadow-2xl border border-white/40 dark:border-gray-700/40 hover:shadow-3xl hover:scale-[1.01] transition-all duration-500 overflow-hidden\">\n          {/* Card glow effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-teal-500/5 via-transparent to-green-600/5 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n          \n          <div className=\"flex items-center space-x-4 mb-6 relative z-10\">\n            <div className=\"relative\">\n              <div className=\"w-14 h-14 bg-gradient-to-br from-teal-500 via-green-500 to-emerald-600 rounded-2xl flex items-center justify-center shadow-xl transform group-hover:scale-110 transition-transform duration-300\">\n                <svg className=\"w-8 h-8 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                </svg>\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-gradient-to-br from-orange-400 to-red-500 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 animate-pulse\"></div>\n            </div>\n            <div>\n              <h3 className=\"text-xl font-bold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-600 bg-clip-text text-transparent dark:from-white dark:via-gray-100 dark:to-gray-300 drop-shadow-sm\">\n                Location Search\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Enable online location search and suggestions</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-6 relative z-10\">\n            {/* Location Search Toggle */}\n            <div className=\"p-6 bg-gradient-to-br from-gray-50/80 to-white/80 dark:from-gray-700/80 dark:to-gray-600/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-600/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h4 className=\"font-medium\">Enable Online Location Search</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {localSettings.enableOnlineGeocoding ? 'Location suggestions enabled' : 'Manual location entry only (default)'}\n                  </p>\n                </div>\n                <button\n                  onClick={() => setLocalSettings(s => ({...s, enableOnlineGeocoding: !s.enableOnlineGeocoding}))}\n                  className={`px-6 py-3 text-sm font-medium rounded-2xl shadow-lg transform hover:scale-105 transition-all duration-300 ${\n                    localSettings.enableOnlineGeocoding\n                      ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:from-green-600 hover:to-emerald-700 shadow-green-500/30'\n                      : 'bg-gradient-to-r from-gray-300 to-gray-400 text-gray-700 hover:from-gray-400 hover:to-gray-500 dark:from-gray-600 dark:to-gray-700 dark:text-gray-300 dark:hover:from-gray-500 dark:hover:to-gray-600 shadow-gray-400/30'\n                  }`}\n                >\n                  {localSettings.enableOnlineGeocoding ? 'Enabled' : 'Disabled'}\n                </button>\n              </div>\n            </div>\n\n            {/* What Happens When Enabled */}\n            <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-xl border border-blue-200 dark:border-blue-800\">\n              <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">🌍 When Enabled</h4>\n              <div className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                <p>✅ Auto-complete location suggestions as you type</p>\n                <p>✅ Search for places, addresses, and landmarks</p>\n                <p>✅ Reverse geocoding for \"Use current location\" button</p>\n                <p>✅ Uses OpenStreetMap Nominatim service (free)</p>\n              </div>\n            </div>\n\n            {/* Privacy Notice */}\n            <div className=\"p-4 bg-amber-50 dark:bg-amber-900/20 rounded-xl border border-amber-200 dark:border-amber-800\">\n              <h4 className=\"font-medium text-amber-900 dark:text-amber-100 mb-2\">🔒 Privacy & Usage Information</h4>\n              <div className=\"text-sm text-amber-800 dark:text-amber-200 space-y-1\">\n                <p>• Location searches are sent to OpenStreetMap's servers</p>\n                <p>• No personal data is transmitted with location queries</p>\n                <p>• Search queries are not stored or associated with your account</p>\n                <p>• Disabled by default to maximize privacy</p>\n                <p>• Search is rate-limited to prevent service overload</p>\n                <p>• Global search enabled (not restricted to specific countries)</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Data Management */}\n        <div className=\"group relative bg-white/90 dark:bg-gray-800/90 backdrop-blur-2xl rounded-3xl p-8 shadow-2xl border border-white/40 dark:border-gray-700/40 hover:shadow-3xl hover:scale-[1.01] transition-all duration-500 overflow-hidden\">\n          {/* Card glow effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/5 via-transparent to-pink-600/5 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n          \n          <div className=\"flex items-center space-x-4 mb-6 relative z-10\">\n            <div className=\"relative\">\n              <div className=\"w-14 h-14 bg-gradient-to-br from-purple-500 via-purple-600 to-pink-600 rounded-2xl flex items-center justify-center shadow-xl transform group-hover:scale-110 transition-transform duration-300\">\n                <svg className=\"w-8 h-8 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4\" />\n                </svg>\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-gradient-to-br from-amber-400 to-orange-500 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 animate-pulse\"></div>\n            </div>\n            <div>\n              <h3 className=\"text-xl font-bold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-600 bg-clip-text text-transparent dark:from-white dark:via-gray-100 dark:to-gray-300 drop-shadow-sm\">\n                Data Management\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Backup and manage your data</p>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4 relative z-10\">\n            <button\n              onClick={() => onNavigate('help')}\n              className=\"w-full p-4 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border border-purple-200 dark:border-purple-700 rounded-xl text-left hover:shadow-lg hover:scale-[1.02] transition-all duration-200 group\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                  <svg className=\"w-6 h-6 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253\" />\n                  </svg>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-gray-800 dark:text-white\">Help & Guide</div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">Complete user manual and app documentation</div>\n                </div>\n              </div>\n            </button>\n\n            <button\n              onClick={handleExportData}\n              className=\"w-full p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border border-blue-200 dark:border-blue-700 rounded-xl text-left hover:shadow-lg hover:scale-[1.02] transition-all duration-200 group\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                  <svg className=\"w-6 h-6 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z\" />\n                  </svg>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-gray-800 dark:text-white\">\n                    {isiOS() ? 'Share Data' : 'Export Data'}\n                  </div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {isiOS() ? 'iOS-optimized sharing options' : 'Download all your data as JSON'}\n                  </div>\n                </div>\n              </div>\n            </button>\n\n            <button\n              onClick={handleImportData}\n              className=\"w-full p-4 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border border-green-200 dark:border-green-700 rounded-xl text-left hover:shadow-lg hover:scale-[1.02] transition-all duration-200 group\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                  <svg className=\"w-6 h-6 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\n                  </svg>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-gray-800 dark:text-white\">Import Data</div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">Restore from JSON backup file</div>\n                </div>\n              </div>\n            </button>\n\n            <button\n              onClick={() => setShowAzureBackup(true)}\n              className=\"w-full p-4 bg-gradient-to-r from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 border border-blue-200 dark:border-blue-700 rounded-xl text-left hover:shadow-lg hover:scale-[1.02] transition-all duration-200 group\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                  <svg className=\"w-6 h-6 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z\" />\n                  </svg>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-gray-800 dark:text-white\">Azure Backup & Restore</div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">Backup to Microsoft Azure with date selection</div>\n                </div>\n              </div>\n            </button>\n\n            {/* Developer-only features */}\n            {isDeveloperMode && (\n              <>\n                <button\n                  onClick={async () => {\n                    if (confirm('This will replace all current data with 221 realistic sample encounters and 65 friends. Are you sure?')) {\n                      try {\n                        await generateRealisticSampleData();\n                        alert('✅ Successfully generated 221 realistic encounters and 65 friends!\\n\\n📍 Locations: Central/Eastern Europe, India, Los Angeles\\n⏱️ Duration: 15-90 minutes\\n💰 Very few paid (mostly massage)\\n⭐ Average rating: >4 stars\\n🎯 All activities match proper IDs');\n                        window.location.reload(); // Refresh to show new data\n                      } catch (error) {\n                        console.error('Sample data generation failed:', error);\n                        alert('❌ Failed to generate sample data. Check console for details.');\n                      }\n                    }\n                  }}\n                  className=\"w-full p-4 bg-gradient-to-r from-amber-50 to-yellow-50 dark:from-amber-900/20 dark:to-yellow-900/20 border border-amber-200 dark:border-amber-700 rounded-xl text-left hover:shadow-lg hover:scale-[1.02] transition-all duration-200 group\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-amber-500 to-yellow-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                      <svg className=\"w-6 h-6 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z\" />\n                      </svg>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-gray-800 dark:text-white\">🔧 Generate Sample Data</div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">221 realistic encounters + 65 friends (developer only)</div>\n                    </div>\n                  </div>\n                </button>\n\n                <button\n                  onClick={() => onNavigate('tests')}\n                  className=\"w-full p-4 bg-gradient-to-r from-purple-50 to-violet-50 dark:from-purple-900/20 dark:to-violet-900/20 border border-purple-200 dark:border-purple-700 rounded-xl text-left hover:shadow-lg hover:scale-[1.02] transition-all duration-200 group\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-violet-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                      <svg className=\"w-6 h-6 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                      </svg>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-gray-800 dark:text-white\">🔧 Run Data Tests</div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">Comprehensive data integrity validation (developer only)</div>\n                    </div>\n                  </div>\n                </button>\n              </>\n            )}\n\n            <button\n              onClick={handleClearData}\n              className=\"w-full p-4 bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20 border border-red-200 dark:border-red-700 rounded-xl text-left hover:shadow-lg hover:scale-[1.02] transition-all duration-200 group\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-red-500 to-pink-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                  <svg className=\"w-6 h-6 text-white drop-shadow-sm\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                  </svg>\n                </div>\n                <div>\n                  <div className=\"font-semibold text-red-700 dark:text-red-400\">Clear All Data</div>\n                  <div className=\"text-sm text-red-600 dark:text-red-500\">Permanently delete everything</div>\n                </div>\n              </div>\n            </button>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className=\"pt-4\">\n          <button\n            onClick={handleSaveSettings}\n            disabled={!isWeightValid}\n            className={`w-full py-4 rounded-2xl font-semibold text-lg shadow-xl transform transition-all duration-200 ${\n              isWeightValid\n                ? 'bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white hover:scale-[1.02] hover:shadow-2xl'\n                : 'bg-gray-300 dark:bg-gray-700 text-gray-500 cursor-not-allowed'\n            }`}\n          >\n            {isWeightValid ? 'Save Settings' : 'Fix Weights First (must total 100%)'}\n          </button>\n        </div>\n      </div>\n\n      {/* Export Modal */}\n      {showExport && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50\">\n          <div className=\"bg-white/95 dark:bg-gray-800/95 backdrop-blur-xl rounded-2xl p-6 m-4 max-w-sm w-full shadow-2xl border border-white/20\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl flex items-center justify-center mx-auto\">\n                <span className=\"text-white text-2xl\">📤</span>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-bold mb-2\">Export Your Data</h3>\n                <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4\">\n                  Download all your encounters, friends, and settings as a JSON file. \n                  Save this file to iCloud Drive via Files app for backup.\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <button\n                  onClick={handleExportData}\n                  className=\"w-full bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white py-3 rounded-xl font-semibold transition-all duration-200\"\n                >\n                  <svg className=\"w-6 h-6 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4\" />\n                  </svg>\n                  Export to Downloads\n                </button>\n                \n                <button\n                  onClick={() => setShowExport(false)}\n                  className=\"w-full py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors duration-200\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Azure Backup Modal */}\n      <AzureBackup\n        isOpen={showAzureBackup}\n        onClose={() => setShowAzureBackup(false)}\n      />\n\n      {/* Interaction Type Manager Modal */}\n      <InteractionTypeManager\n        isOpen={showTypeManager}\n        onClose={() => setShowTypeManager(false)}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/pages/Timeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/tests/dataIntegrityTests.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11003,11006],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11003,11006],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":247,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11479,11482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11479,11482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":260,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12206,12209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12206,12209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12834,12837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12834,12837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":280,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13951,13954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13951,13954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":282,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14095,14098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14095,14098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":504,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":504,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24962,24965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24962,24965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":541,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":541,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27123,27126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27123,27126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":542,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":542,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27231,27234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27231,27234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":562,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":562,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27897,27900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27897,27900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":570,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":570,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28132,28135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28132,28135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1100,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1100,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50002,50005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50002,50005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1101,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1101,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50065,50068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50065,50068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1105,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1105,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50238,50241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50238,50241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { db, GAY_ACTIVITIES } from '../db/schema';\nimport { friendsApi, encountersApi } from '../hooks/useDatabase';\nimport { createBackup, restoreFromBackup } from '../utils/backup';\nimport type { Friend, Encounter } from '../db/schema';\n\n// Test configuration - SIGNIFICANTLY MORE DATA\nconst TEST_CONFIG = {\n  FRIENDS_COUNT: 50,           // 5x more friends\n  ENCOUNTERS_COUNT: 200,       // 10x more encounters  \n  PHOTOS_PER_FRIEND: 5,        // More photos per friend\n  PHOTOS_PER_ENCOUNTER: 4,     // More photos per encounter\n  TEST_TIMEOUT: 60000,         // 60 seconds for larger dataset\n  PAID_ENCOUNTER_RATE: 0.15    // Only 15% paid encounters (much more realistic)\n};\n\n// Test utilities\nclass TestLogger {\n  private logs: string[] = [];\n  private errors: string[] = [];\n  \n  log(message: string) {\n    console.log(`✅ ${message}`);\n    this.logs.push(message);\n  }\n  \n  error(message: string) {\n    console.error(`❌ ${message}`);\n    this.errors.push(message);\n  }\n  \n  warn(message: string) {\n    console.warn(`⚠️ ${message}`);\n  }\n  \n  summary() {\n    console.log('\\n📊 Test Summary:');\n    console.log(`✅ Passed: ${this.logs.length}`);\n    console.log(`❌ Failed: ${this.errors.length}`);\n    \n    if (this.errors.length > 0) {\n      console.log('\\nErrors:');\n      this.errors.forEach(error => console.log(`  - ${error}`));\n    }\n    \n    return this.errors.length === 0;\n  }\n}\n\n// Generate test data\nfunction generateTestPhoto(): string {\n  // Create a small test image as base64\n  const canvas = document.createElement('canvas');\n  canvas.width = 100;\n  canvas.height = 100;\n  const ctx = canvas.getContext('2d')!;\n  \n  // Generate random colored square\n  ctx.fillStyle = `hsl(${Math.random() * 360}, 70%, 50%)`;\n  ctx.fillRect(0, 0, 100, 100);\n  \n  // Add some text\n  ctx.fillStyle = 'white';\n  ctx.font = '20px Arial';\n  ctx.fillText(`#${Math.floor(Math.random() * 1000)}`, 10, 50);\n  \n  return canvas.toDataURL();\n}\n\nfunction generateTestFriend(index: number): Omit<Friend, 'id' | 'createdAt' | 'updatedAt'> {\n  // Globally diverse name pools for maximum randomness\n  const firstNames = [\n    // English/American\n    'Alex', 'Blake', 'Casey', 'Drew', 'Emery', 'Finley', 'Gray', 'Harley', 'Indigo', 'Jazz',\n    'Kai', 'Logan', 'Morgan', 'Noah', 'Oakley', 'Parker', 'Quinn', 'River', 'Sage', 'Taylor',\n    'Adrian', 'Brandon', 'Carter', 'Daniel', 'Ethan', 'Felix', 'Gabriel', 'Hunter', 'Ivan', 'Jake',\n    'Kyle', 'Liam', 'Mason', 'Nathan', 'Owen', 'Preston', 'Quincy', 'Ryan', 'Sean', 'Tyler',\n    \n    // International diversity\n    'Mateo', 'Diego', 'Carlos', 'Alejandro', 'Santiago', 'Sebastián', 'Joaquín', 'Nicolás',\n    'Hiroshi', 'Kenji', 'Akira', 'Takeshi', 'Yuki', 'Daiki', 'Ryu', 'Sora',\n    'Ahmed', 'Omar', 'Yussef', 'Hassan', 'Malik', 'Tariq', 'Karim', 'Rashid',\n    'Luca', 'Marco', 'Alessandro', 'Giovanni', 'Francesco', 'Lorenzo', 'Matteo', 'Andrea',\n    'Jean', 'Pierre', 'Antoine', 'Maxime', 'Louis', 'Hugo', 'Lucas', 'Noah',\n    'Klaus', 'Hans', 'Stefan', 'Thomas', 'Michael', 'Alexander', 'Christian', 'Daniel',\n    'Vladimir', 'Dmitri', 'Alexei', 'Mikhail', 'Pavel', 'Sergei', 'Nikolai', 'Ivan',\n    'Raj', 'Arjun', 'Vikram', 'Rohan', 'Kiran', 'Arun', 'Suresh', 'Ravi',\n    'Chen', 'Wei', 'Jun', 'Ming', 'Lei', 'Feng', 'Hao', 'Long'\n  ];\n  \n  const lastNames = [\n    // American/English\n    'Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis',\n    'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson',\n    'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson',\n    \n    // Global surnames  \n    'González', 'Fernández', 'Rodríguez', 'López', 'Martínez', 'Sánchez', 'Pérez', 'Gómez',\n    'Tanaka', 'Suzuki', 'Takahashi', 'Watanabe', 'Itō', 'Yamamoto', 'Nakamura', 'Kobayashi',\n    'Al-Rashid', 'Al-Mansouri', 'Al-Zahra', 'Hakim', 'Nassar', 'Khalil', 'Farouk', 'Abbas',\n    'Rossi', 'Russo', 'Ferrari', 'Esposito', 'Bianchi', 'Romano', 'Colombo', 'Ricci',\n    'Dubois', 'Martin', 'Bernard', 'Thomas', 'Petit', 'Robert', 'Richard', 'Durand',\n    'Müller', 'Schmidt', 'Schneider', 'Fischer', 'Weber', 'Meyer', 'Wagner', 'Schulz',\n    'Petrov', 'Ivanov', 'Sidorov', 'Kuznetsov', 'Popov', 'Volkov', 'Sokolov', 'Lebedev',\n    'Patel', 'Sharma', 'Gupta', 'Singh', 'Kumar', 'Mishra', 'Agarwal', 'Jain',\n    'Wang', 'Li', 'Zhang', 'Liu', 'Chen', 'Yang', 'Huang', 'Zhao'\n  ];\n  \n  const bodyTypes = ['Slim', 'Athletic', 'Average', 'Muscular', 'Chubby', 'Bear', 'Daddy', 'Twink', 'Otter'];\n  const hivStatuses = ['Negative', 'Positive Undetectable', 'Unknown', 'Prefer Not to Say'];\n  const relationships = ['Single', 'Taken', 'Open Relationship', 'Married', 'Complicated'];\n  const ethnicities = [\n    'White', 'Black', 'Latino/Hispanic', 'East Asian', 'South Asian', 'Middle Eastern', \n    'Native American', 'Pacific Islander', 'Mixed Race', 'Indigenous', 'European', \n    'African', 'Caribbean', 'North African', 'Southeast Asian', 'Other'\n  ];\n  \n  const occupations = [\n    'Teacher', 'Engineer', 'Doctor', 'Nurse', 'Artist', 'Chef', 'Lawyer', 'Student', 'Trainer', 'Designer',\n    'Developer', 'Consultant', 'Manager', 'Therapist', 'Photographer', 'Writer', 'Musician', 'Actor',\n    'Entrepreneur', 'Mechanic', 'Bartender', 'Server', 'Retail Worker', 'Sales Rep', 'Marketing Specialist',\n    'Accountant', 'Architect', 'Social Worker', 'Firefighter', 'Police Officer', 'Paramedic', 'Pilot',\n    'Flight Attendant', 'Uber Driver', 'Personal Trainer', 'Massage Therapist', 'Hair Stylist', 'Model',\n    'Dancer', 'DJ', 'Barista', 'Shop Owner', 'Real Estate Agent', 'Insurance Agent', 'Bank Teller',\n    'Construction Worker', 'Electrician', 'Plumber', 'Carpenter', 'Landscaper', 'Delivery Driver',\n    'Security Guard', 'Janitor', 'Office Manager', 'HR Specialist', 'Data Analyst', 'Researcher'\n  ];\n  \n  const cities = [\n    // Major US Cities\n    'New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego',\n    'Dallas', 'San Jose', 'Austin', 'Jacksonville', 'Fort Worth', 'Columbus', 'Charlotte', 'San Francisco',\n    'Indianapolis', 'Seattle', 'Denver', 'Washington DC', 'Boston', 'Nashville', 'Baltimore', 'Portland',\n    'Oklahoma City', 'Las Vegas', 'Louisville', 'Milwaukee', 'Albuquerque', 'Tucson', 'Fresno', 'Sacramento',\n    'Kansas City', 'Mesa', 'Atlanta', 'Omaha', 'Colorado Springs', 'Raleigh', 'Miami', 'Virginia Beach',\n    \n    // International Cities\n    'Toronto', 'Vancouver', 'Montreal', 'London', 'Manchester', 'Berlin', 'Paris', 'Amsterdam',\n    'Madrid', 'Barcelona', 'Rome', 'Milan', 'Stockholm', 'Oslo', 'Copenhagen', 'Helsinki',\n    'Prague', 'Vienna', 'Zurich', 'Brussels', 'Dublin', 'Tel Aviv', 'Tokyo', 'Osaka',\n    'Seoul', 'Sydney', 'Melbourne', 'Auckland', 'São Paulo', 'Mexico City', 'Buenos Aires',\n    'Santiago', 'Bogotá', 'Lima', 'Mumbai', 'Delhi', 'Bangkok', 'Singapore', 'Hong Kong'\n  ];\n  \n  const photos = [];\n  for (let i = 0; i < TEST_CONFIG.PHOTOS_PER_FRIEND; i++) {\n    photos.push(generateTestPhoto());\n  }\n  \n  // Select random preferences from GAY_ACTIVITIES with heavily varied distributions\n  const preferences = [];\n  \n  // Vary number of preferences more dramatically to reduce uniformity\n  let numPrefs: number;\n  const prefRand = Math.random();\n  if (prefRand < 0.15) {\n    numPrefs = 1; // 15% - very limited preferences\n  } else if (prefRand < 0.35) {\n    numPrefs = 2; // 20% - few preferences  \n  } else if (prefRand < 0.65) {\n    numPrefs = 3 + Math.floor(Math.random() * 3); // 30% - 3-5 preferences\n  } else if (prefRand < 0.85) {\n    numPrefs = 6 + Math.floor(Math.random() * 4); // 20% - 6-9 preferences\n  } else {\n    numPrefs = 10 + Math.floor(Math.random() * 8); // 15% - very adventurous (10-17 preferences)\n  }\n  \n  const availableActivities = [...GAY_ACTIVITIES];\n  const selectedPrefs = new Set<string>();\n  \n  for (let i = 0; i < numPrefs && availableActivities.length > 0; i++) {\n    let attempts = 0;\n    let selectedPref: string;\n    \n    do {\n      const randomIndex = Math.floor(Math.random() * availableActivities.length);\n      selectedPref = availableActivities[randomIndex].name;\n      attempts++;\n    } while (selectedPrefs.has(selectedPref) && attempts < 20);\n    \n    if (!selectedPrefs.has(selectedPref)) {\n      preferences.push(selectedPref);\n      selectedPrefs.add(selectedPref);\n    }\n  }\n  \n  return {\n    name: `${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]}`,\n    avatarUrl: generateTestPhoto(),\n    notes: `Met this guy in ${cities[Math.floor(Math.random() * cities.length)]}. ${[\n      'Really chill and down to earth',\n      'Super hot and knows it',\n      'Great conversation and even better in bed',\n      'Shy at first but opens up quickly',\n      'Very experienced and taught me some new things',\n      'Sweet guy with a wild side',\n      'Amazing body and personality to match',\n      'Funny and charming, great energy',\n      'Passionate and intense, unforgettable',\n      'Laid back surfer type, very relaxed'\n    ][Math.floor(Math.random() * 10)]}.`,\n    // Highly varied age distribution to reduce uniformity\n    age: (() => {\n      const ageRand = Math.random();\n      if (ageRand < 0.25) return 18 + Math.floor(Math.random() * 7); // 25% young (18-24)\n      if (ageRand < 0.55) return 25 + Math.floor(Math.random() * 15); // 30% prime (25-39)  \n      if (ageRand < 0.8) return 40 + Math.floor(Math.random() * 15); // 25% mature (40-54)\n      return 55 + Math.floor(Math.random() * 20); // 20% older (55-74)\n    })(),\n    \n    // More realistic height distribution (not uniform)\n    height: (() => {\n      const heightRand = Math.random();\n      if (heightRand < 0.1) return `5'${2 + Math.floor(Math.random() * 4)}\"`; // 10% shorter (5'2\"-5'5\")\n      if (heightRand < 0.6) return `5'${6 + Math.floor(Math.random() * 4)}\"`; // 50% average (5'6\"-5'9\")\n      if (heightRand < 0.9) return `5'${10 + Math.floor(Math.random() * 3)}\"`; // 30% tall (5'10\"-6'0\")\n      return `6'${1 + Math.floor(Math.random() * 4)}\"`; // 10% very tall (6'1\"-6'4\")\n    })(),\n    \n    // More realistic weight distribution\n    weight: (() => {\n      const weightRand = Math.random();\n      if (weightRand < 0.15) return `${130 + Math.floor(Math.random() * 25)} lbs`; // 15% slim (130-154)\n      if (weightRand < 0.5) return `${155 + Math.floor(Math.random() * 25)} lbs`; // 35% average (155-179)\n      if (weightRand < 0.8) return `${180 + Math.floor(Math.random() * 30)} lbs`; // 30% heavy (180-209)\n      return `${210 + Math.floor(Math.random() * 50)} lbs`; // 20% large (210-259)\n    })(),\n    \n    // Weighted body type distribution (not uniform)\n    bodyType: (() => {\n      const bodyRand = Math.random();\n      if (bodyRand < 0.2) return bodyTypes[Math.floor(Math.random() * 3)]; // 20% slim types\n      if (bodyRand < 0.6) return bodyTypes[3 + Math.floor(Math.random() * 3)]; // 40% average types\n      return bodyTypes[6 + Math.floor(Math.random() * 3)]; // 40% larger types\n    })() as any,\n    \n    ethnicity: ethnicities[Math.floor(Math.random() * ethnicities.length)],\n    \n    // More realistic sexual role distribution\n    sexualRole: (() => {\n      const roleRand = Math.random();\n      if (roleRand < 0.25) return 'Top';\n      if (roleRand < 0.35) return 'Bottom'; \n      if (roleRand < 0.7) return 'Versatile'; // Most common\n      if (roleRand < 0.85) return 'Vers Top';\n      if (roleRand < 0.95) return 'Vers Bottom';\n      return 'Side';\n    })() as any,\n    \n    // More realistic dick size distribution (bell curve)\n    dickSize: (() => {\n      const sizeRand = Math.random();\n      if (sizeRand < 0.1) return `${4 + Math.random() * 1}\".toFixed(1)} inches`; // 10% smaller\n      if (sizeRand < 0.4) return `${5 + Math.random() * 1}\".toFixed(1)} inches`; // 30% average-\n      if (sizeRand < 0.8) return `${6 + Math.random() * 1}\".toFixed(1)} inches`; // 40% average+\n      if (sizeRand < 0.95) return `${7 + Math.random() * 1}\".toFixed(1)} inches`; // 15% large\n      return `${8 + Math.random() * 1.5}\".toFixed(1)} inches`; // 5% very large\n    })(),\n    \n    // Varied circumcision rates by ethnicity (more realistic)\n    dickType: Math.random() > 0.4 ? 'Cut' : 'Uncut' as any, // 60% cut (more varied)\n    preferences,\n    limits: ['No bareback', 'No pain', 'No kissing', 'No anal', 'No oral'].slice(0, Math.floor(Math.random() * 3)),\n    metOn: [\n      'Grindr', 'Romeo', 'Tinder', 'Bumble', 'Hinge', 'Scruff', 'Hornet', 'Jack\\'d',\n      'Instagram', 'Twitter', 'TikTok', 'Snapchat', 'Discord', 'Reddit',\n      'Bar/Club', 'Coffee Shop', 'Gym', 'Park', 'Beach', 'Library', 'Bookstore',\n      'Friend Intro', 'Work', 'School', 'Party', 'Concert', 'Festival', 'Pride Event',\n      'Dating Event', 'Sport Club', 'Hiking Group', 'Volunteer Work', 'Gaming Group'\n    ][Math.floor(Math.random() * 33)] as any,\n    socialProfiles: {\n      grindr: Math.random() > 0.3 ? `${firstNames[index % firstNames.length].toLowerCase()}${Math.floor(Math.random() * 999)}` : undefined,\n      instagram: Math.random() > 0.5 ? `@${firstNames[index % firstNames.length].toLowerCase()}_${Math.floor(Math.random() * 99)}` : undefined,\n      twitter: Math.random() > 0.7 ? `@${firstNames[index % firstNames.length].toLowerCase()}${Math.floor(Math.random() * 999)}` : undefined,\n      telegram: Math.random() > 0.6 ? `@${firstNames[index % firstNames.length].toLowerCase()}${index}` : undefined,\n      whatsapp: Math.random() > 0.4 ? `+1${Math.floor(Math.random() * 900) + 100}${Math.floor(Math.random() * 900) + 100}${String(index).padStart(4, '0')}` : undefined,\n      phone: Math.random() > 0.7 ? `+1${Math.floor(Math.random() * 900) + 100}${Math.floor(Math.random() * 900) + 100}${String(index).padStart(4, '0')}` : undefined\n    },\n    photos,\n    lastTested: Math.random() > 0.2 ? new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000) : undefined,\n    hivStatus: hivStatuses[Math.floor(Math.random() * hivStatuses.length)] as any,\n    onPrep: Math.random() > 0.6, // 40% on PrEP\n    relationshipStatus: relationships[Math.floor(Math.random() * relationships.length)] as any,\n    overallRating: Math.random() > 0.3 ? 1 + Math.floor(Math.random() * 5) : undefined,\n    sexRating: Math.random() > 0.4 ? 1 + Math.floor(Math.random() * 5) : undefined,\n    personalityRating: Math.random() > 0.4 ? 1 + Math.floor(Math.random() * 5) : undefined,\n    location: `${cities[Math.floor(Math.random() * cities.length)]}, ${Math.floor(Math.random() * 20) + 1} miles away`,\n    canHost: Math.random() > 0.4, // 60% can host\n    canTravel: Math.random() > 0.3, // 70% can travel\n    occupation: occupations[Math.floor(Math.random() * occupations.length)],\n    languages: Math.random() > 0.3 ? [\n      'English', 'Spanish', 'French', 'German', 'Italian', 'Portuguese', 'Mandarin', 'Japanese',\n      'Korean', 'Arabic', 'Hindi', 'Russian', 'Dutch', 'Swedish', 'Norwegian', 'Polish',\n      'Turkish', 'Hebrew', 'Thai', 'Vietnamese', 'Tagalog', 'Greek', 'Czech', 'Hungarian'\n    ].slice(0, 1 + Math.floor(Math.random() * 3)).sort(() => Math.random() - 0.5) : ['English'],\n    tags: [`tag-${index}`, 'test-friend', 'generated'].concat(\n      Math.random() > 0.5 ? ['kinky'] : [],\n      Math.random() > 0.7 ? ['romantic'] : [],\n      Math.random() > 0.8 ? ['experienced'] : []\n    ),\n    isArchived: Math.random() > 0.95 // 5% archived\n  };\n}\n\nasync function generateTestEncounter(friendIds: number[], index: number): Promise<Omit<Encounter, 'id' | 'createdAt' | 'updatedAt'>> {\n  const locations = [\n    // North America\n    { lat: 40.7128, lon: -74.0060, place: 'Manhattan, New York' },\n    { lat: 34.0522, lon: -118.2437, place: 'West Hollywood, Los Angeles' },\n    { lat: 41.8781, lon: -87.6298, place: 'Boystown, Chicago' },\n    { lat: 37.7749, lon: -122.4194, place: 'Castro District, San Francisco' },\n    { lat: 25.7617, lon: -80.1918, place: 'South Beach, Miami' },\n    { lat: 45.5017, lon: -73.5673, place: 'Le Village, Montreal' },\n    { lat: 43.6532, lon: -79.3832, place: 'Church & Wellesley, Toronto' },\n    { lat: 49.2827, lon: -123.1207, place: 'Davie Village, Vancouver' },\n    { lat: 19.4326, lon: -99.1332, place: 'Zona Rosa, Mexico City' },\n    \n    // Europe\n    { lat: 51.5074, lon: -0.1278, place: 'Soho, London' },\n    { lat: 48.8566, lon: 2.3522, place: 'Le Marais, Paris' },\n    { lat: 52.5200, lon: 13.4050, place: 'Schöneberg, Berlin' },\n    { lat: 41.3851, lon: 2.1734, place: 'Eixample, Barcelona' },\n    { lat: 52.3676, lon: 4.9041, place: 'Reguliersdwarsstraat, Amsterdam' },\n    { lat: 59.3293, lon: 18.0686, place: 'Södermalm, Stockholm' },\n    { lat: 55.6761, lon: 12.5683, place: 'Vesterbro, Copenhagen' },\n    { lat: 41.9028, lon: 12.4964, place: 'Trastevere, Rome' },\n    { lat: 50.1109, lon: 8.6821, place: 'Sachsenhausen, Frankfurt' },\n    { lat: 47.3769, lon: 8.5417, place: 'Niederdorf, Zurich' },\n    \n    // Asia-Pacific\n    { lat: 35.6762, lon: 139.6503, place: 'Shinjuku Ni-chōme, Tokyo' },\n    { lat: 22.3193, lon: 114.1694, place: 'Sheung Wan, Hong Kong' },\n    { lat: 1.3521, lon: 103.8198, place: 'Tanjong Pagar, Singapore' },\n    { lat: -33.8688, lon: 151.2093, place: 'Oxford Street, Sydney' },\n    { lat: -37.8136, lon: 144.9631, place: 'Fitzroy, Melbourne' },\n    { lat: 13.7563, lon: 100.5018, place: 'Silom, Bangkok' },\n    { lat: -22.9068, lon: -43.1729, place: 'Ipanema, Rio de Janeiro' },\n    { lat: -34.6037, lon: -58.3816, place: 'Palermo, Buenos Aires' },\n    { lat: 39.0458, lon: 125.7549, place: 'Gangnam, Seoul' },\n    { lat: 31.2304, lon: 121.4737, place: 'French Concession, Shanghai' },\n    \n    // Middle East & Africa\n    { lat: 32.0853, lon: 34.7818, place: 'Rothschild Boulevard, Tel Aviv' },\n    { lat: 25.2048, lon: 55.2708, place: 'DIFC, Dubai' },\n    { lat: -33.9249, lon: 18.4241, place: 'De Waterkant, Cape Town' },\n    { lat: 30.0444, lon: 31.2357, place: 'Zamalek, Cairo' },\n    \n    // South America & Others\n    { lat: -23.5505, lon: -46.6333, place: 'República, São Paulo' },\n    { lat: 4.7110, lon: -74.0721, place: 'Zona Rosa, Bogotá' },\n    { lat: -12.0464, lon: -77.0428, place: 'Miraflores, Lima' },\n    { lat: -25.2637, lon: -57.5759, place: 'Villa Morra, Asunción' },\n    { lat: 19.0760, lon: 72.8777, place: 'Bandra, Mumbai' },\n    { lat: 28.6139, lon: 77.2090, place: 'Khan Market, New Delhi' }\n  ];\n  \n  const venues = [\n    // Private spaces\n    'my apartment', 'his place', 'hotel room', 'AirBnB', 'friend\\'s place', 'his dorm room', 'my dorm room',\n    'penthouse suite', 'serviced apartment', 'studio flat', 'loft apartment', 'beach house', 'mountain cabin',\n    'pool house', 'garage', 'basement', 'rooftop terrace', 'balcony', 'backyard', 'guest house',\n    \n    // Vehicles & Mobile\n    'car in parking lot', 'his car', 'my car', 'truck cab', 'RV', 'yacht', 'boat', 'private jet',\n    'train compartment', 'sleeper car', 'van', 'motorcycle', 'limousine',\n    \n    // Fitness & Wellness\n    'gym locker room', 'sauna', 'steam room', 'spa private room', 'massage parlor', 'hot tub',\n    'onsen (hot spring)', 'hammam', 'wellness center', 'pool area', 'shower at gym', 'yoga studio',\n    \n    // Nightlife & Entertainment\n    'club bathroom', 'bar back room', 'VIP lounge', 'darkroom', 'cabaret booth', 'karaoke room',\n    'nightclub private area', 'strip club booth', 'casino suite', 'theater box',\n    \n    // Public & Semi-Public\n    'park restroom', 'hiking trail', 'office after hours', 'bookstore booth', 'library study room',\n    'museum storage', 'university campus', 'shopping mall bathroom', 'cinema back row',\n    \n    // International/Cultural\n    'ryokan room (Japan)', 'riad courtyard (Morocco)', 'hostel private room', 'capsule hotel',\n    'beach cabana', 'ski chalet', 'desert camp', 'treehouse', 'lighthouse', 'monastery guest quarters',\n    \n    // Outdoor & Adventure\n    'camping tent', 'hiking shelter', 'beach dunes', 'forest clearing', 'rooftop under stars',\n    'cliff overlook', 'secluded waterfall', 'mountain peak', 'vineyard', 'olive grove',\n    \n    // Unique/Exotic\n    'art gallery after hours', 'recording studio', 'photography studio', 'penthouse pool',\n    'private island', 'castle turret', 'wine cellar', 'greenhouse', 'observatory dome'\n  ];\n  \n  const photos = [];\n  for (let i = 0; i < TEST_CONFIG.PHOTOS_PER_ENCOUNTER; i++) {\n    photos.push(generateTestPhoto());\n  }\n  \n  // Query the actual database to get correct activity IDs\n  const availableActivities = await db.interactionTypes.toArray();\n  \n  // Create realistic activity distribution with weighted randomness\n  const veryCommonActivities = [\n    'Oral (Giving)', 'Oral (Receiving)', 'Kissing/Making Out', 'Handjob (Giving)', 'Handjob (Receiving)'\n  ];\n  const commonActivities = [\n    'Anal (Topping)', 'Anal (Bottoming)', 'Mutual Masturbation', 'Rimming (Giving)', 'Rimming (Receiving)',\n    '69', 'Body Contact/Massage', 'Makeout Session'\n  ];\n  const uncommonActivities = [\n    'BDSM Dom', 'BDSM Sub', 'Threesome (MMM)', 'Toy Play', 'Public/Semi-Public', 'Car Play',\n    'Spanking (Giving)', 'Role Play', 'Rough Play', 'Gentle/Romantic'\n  ];\n  \n  // Heavily weighted selection - 60% very common, 30% common, 10% uncommon/rare\n  let primaryActivity: string;\n  const rand = Math.random();\n  if (rand < 0.6) {\n    primaryActivity = veryCommonActivities[Math.floor(Math.random() * veryCommonActivities.length)];\n  } else if (rand < 0.9) {\n    primaryActivity = commonActivities[Math.floor(Math.random() * commonActivities.length)];\n  } else {\n    primaryActivity = uncommonActivities[Math.floor(Math.random() * uncommonActivities.length)];\n  }\n  \n  const primaryActivityRecord = availableActivities.find(a => a.name === primaryActivity);\n  const primaryActivityId = primaryActivityRecord?.id || availableActivities[0]?.id || 1; // Use first available or fallback\n  \n  // Variable number of activities - heavily randomized to reduce uniformity\n  const activityChance = Math.random();\n  let numActivities: number;\n  if (activityChance < 0.4) {\n    numActivities = 1; // 40% - single activity\n  } else if (activityChance < 0.7) {\n    numActivities = 2; // 30% - two activities\n  } else if (activityChance < 0.9) {\n    numActivities = 3; // 20% - three activities\n  } else {\n    numActivities = 4 + Math.floor(Math.random() * 3); // 10% - 4-6 activities (wild sessions)\n  }\n  \n  const activitiesPerformed: number[] = [primaryActivityId];\n  \n  // Add additional activities with smart selection to avoid duplicates\n  const usedActivities = new Set([primaryActivity]);\n  \n  for (let i = 1; i < numActivities && i < 8; i++) {\n    // More random selection for additional activities\n    const activityPool = availableActivities.filter(a => !usedActivities.has(a.name));\n    if (activityPool.length === 0) break;\n    \n    const selectedActivityRecord = activityPool[Math.floor(Math.random() * activityPool.length)];\n    const activityId = selectedActivityRecord?.id || availableActivities[0]?.id || 1; // Use actual ID\n    \n    activitiesPerformed.push(activityId);\n    usedActivities.add(selectedActivityRecord.name);\n  }\n  \n  // Random participants (1-3 friends)\n  const numParticipants = 1 + Math.floor(Math.random() * Math.min(3, friendIds.length));\n  const participants = [];\n  const availableFriends = [...friendIds];\n  for (let i = 0; i < numParticipants && availableFriends.length > 0; i++) {\n    const randomIndex = Math.floor(Math.random() * availableFriends.length);\n    participants.push(availableFriends.splice(randomIndex, 1)[0]);\n  }\n  \n  return {\n    // More varied date distribution to reduce uniformity\n    date: (() => {\n      const dateRand = Math.random();\n      if (dateRand < 0.4) {\n        // 40% - recent (last 2 weeks)\n        return new Date(Date.now() - Math.random() * 14 * 24 * 60 * 60 * 1000);\n      } else if (dateRand < 0.7) {\n        // 30% - medium recent (2 weeks to 2 months)\n        return new Date(Date.now() - (14 + Math.random() * 46) * 24 * 60 * 60 * 1000);\n      } else {\n        // 30% - older (2-12 months)\n        return new Date(Date.now() - (60 + Math.random() * 305) * 24 * 60 * 60 * 1000);\n      }\n    })(),\n    \n    // More realistic rating distribution (bell curve, most are good)\n    rating: (() => {\n      const ratingRand = Math.random();\n      if (ratingRand < 0.05) return 1; // 5% terrible\n      if (ratingRand < 0.15) return 2; // 10% bad\n      if (ratingRand < 0.35) return 3; // 20% okay\n      if (ratingRand < 0.7) return 4; // 35% good\n      return 5; // 30% amazing\n    })(),\n    \n    typeId: primaryActivityId, // Use GAY_ACTIVITIES ID for realistic encounters\n    activitiesPerformed,\n    participants,\n    \n    // Varied anonymity rates\n    isAnonymous: Math.random() > 0.85, // 15% anonymous (reduced from 20%)\n    \n    // More realistic beneficiary distribution\n    beneficiary: (() => {\n      const benRand = Math.random();\n      if (benRand < 0.4) return 'both'; // 40% mutual pleasure\n      if (benRand < 0.7) return 'me'; // 30% focused on me\n      return 'friend'; // 30% focused on them\n    })() as any,\n    \n    // Much more varied duration to reduce uniformity\n    durationMinutes: (() => {\n      const durRand = Math.random();\n      if (durRand < 0.2) return 10 + Math.floor(Math.random() * 20); // 20% quickies (10-29 min)\n      if (durRand < 0.6) return 30 + Math.floor(Math.random() * 60); // 40% normal (30-89 min)\n      if (durRand < 0.85) return 90 + Math.floor(Math.random() * 90); // 25% long (90-179 min)\n      return 180 + Math.floor(Math.random() * 240); // 15% marathon (3-7 hours)\n    })(),\n    location: Math.random() > 0.2 ? locations[Math.floor(Math.random() * locations.length)] : undefined,\n    tags: [`encounter-${index}`, `test-data`, Math.random() > 0.5 ? 'hot' : 'mild', Math.random() > 0.7 ? 'repeat' : 'first-time'],\n    notes: `${[\n      'Amazing chemistry, incredible session',\n      'Exactly what I needed after a long week',\n      'This guy knows what he\\'s doing',\n      'Passionate and intense, left me breathless',\n      'Sweet and gentle, really took care of me',\n      'Wild and adventurous, pushed my boundaries',\n      'Perfect gentleman, felt completely safe',\n      'Hot as hell and knew exactly how to please',\n      'Great conversation before and after too',\n      'Spontaneous hookup that exceeded expectations',\n      'Been thinking about this encounter for days',\n      'Would definitely see him again soon',\n      'New favorite position discovered tonight',\n      'Incredible stamina and enthusiasm',\n      'Made me feel so desired and wanted'\n    ][Math.floor(Math.random() * 15)]} at ${venues[Math.floor(Math.random() * venues.length)]}.`,\n    photos,\n    \n    // Realistic payment data (only 15% of encounters have payment - much more realistic)\n    ...(Math.random() < TEST_CONFIG.PAID_ENCOUNTER_RATE ? {\n      isPaid: true,\n      paymentType: Math.random() > 0.7 ? 'received' as const : 'given' as const, // More likely to pay than receive\n      amountAsked: Math.floor(Math.random() * 300) + 80,   // $80-380 asked (more realistic range)\n      amountGiven: Math.floor(Math.random() * 250) + 60,   // $60-310 actually paid\n      currency: ['USD', 'EUR', 'GBP', 'CAD', 'AUD'][Math.floor(Math.random() * 5)] as any,\n      paymentMethod: ['cash', 'venmo', 'cashapp', 'paypal', 'zelle'][Math.floor(Math.random() * 5)] as any, // Removed crypto for realism\n      paymentNotes: [\n        'Fair price for great time',\n        'Worth every penny',\n        'Professional and discreet',\n        'Exactly as advertised',\n        'Generous guy, took care of me',\n        'Quick payment, no drama',\n        'Would book again',\n        'Respectful transaction'\n      ][Math.floor(Math.random() * 8)]\n    } : {}),\n    \n    // More realistic role distributions\n    myRole: (() => {\n      const roleRand = Math.random();\n      if (roleRand < 0.3) return 'Top';\n      if (roleRand < 0.45) return 'Bottom';\n      if (roleRand < 0.85) return 'Versatile'; // Most common\n      return 'Side';\n    })() as any,\n    \n    theirRole: (() => {\n      const roleRand = Math.random();\n      if (roleRand < 0.35) return 'Top';\n      if (roleRand < 0.5) return 'Bottom';\n      if (roleRand < 0.9) return 'Versatile';\n      return 'Side';\n    })() as any,\n    \n    // More varied condom usage (not uniform)\n    condomUsed: (() => {\n      const condomRand = Math.random();\n      if (condomRand < 0.6) return true; // 60% safe\n      return false; // 40% bareback (higher than uniform to be more realistic)\n    })(),\n    \n    // More realistic repeat desire distribution\n    wouldRepeat: (() => {\n      const repeatRand = Math.random();\n      if (repeatRand < 0.75) return true; // 75% would repeat\n      return false; // 25% wouldn't (more realistic than 80%)\n    })(),\n    \n    // Bell curve chemistry ratings (most are good)\n    chemistry: (() => {\n      const chemRand = Math.random();\n      if (chemRand < 0.1) return 1; // 10% no chemistry\n      if (chemRand < 0.25) return 2; // 15% poor chemistry\n      if (chemRand < 0.5) return 3; // 25% okay chemistry\n      if (chemRand < 0.8) return 4; // 30% good chemistry\n      return 5; // 20% amazing chemistry\n    })(),\n    \n    // Varied kinkiness levels (not uniform)\n    kinkiness: (() => {\n      const kinkRand = Math.random();\n      if (kinkRand < 0.3) return 1; // 30% vanilla\n      if (kinkRand < 0.5) return 2; // 20% slightly kinky\n      if (kinkRand < 0.7) return 3; // 20% moderately kinky\n      if (kinkRand < 0.9) return 4; // 20% very kinky\n      return 5; // 10% extremely kinky\n    })(),\n    \n    // More realistic safety discussion rates\n    discussedStatus: Math.random() > 0.35, // 65% discussed status (higher than before)\n    feelsSafe: Math.random() > 0.05, // 95% felt safe (very high, as it should be)\n    \n    // More varied contact exchange\n    exchangedContacts: (() => {\n      const contactRand = Math.random();\n      if (contactRand < 0.45) return true; // 45% exchanged contacts\n      return false; // 55% didn't exchange\n    })(),\n    \n    // More realistic planning rates  \n    plannedMeetAgain: (() => {\n      const planRand = Math.random();\n      if (planRand < 0.35) return true; // 35% made plans\n      return false; // 65% didn't make concrete plans\n    })()\n  };\n}\n\n// Test functions\nexport class DataIntegrityTester {\n  private logger = new TestLogger();\n  private originalFriends: Friend[] = [];\n  private originalEncounters: Encounter[] = [];\n  private testFriendIds: number[] = [];\n  private testEncounterIds: number[] = [];\n\n  async runAllTests(keepTestData: boolean = false): Promise<boolean> {\n    this.logger.log('🚀 Starting comprehensive data integrity tests...');\n    \n    try {\n      await this.clearTestData();\n      await this.testFriendsOperations();\n      await this.testEncountersOperations();\n      await this.testBackupAndRestore();\n      \n      if (!keepTestData) {\n        await this.testDataClearing();\n      } else {\n        this.logger.log('🎯 Keeping test data for exploration (skipping cleanup)');\n        this.logger.log(`✨ Generated ${this.testFriendIds.length} friends and ${this.testEncounterIds.length} encounters`);\n      }\n      \n      return this.logger.summary();\n    } catch (error) {\n      this.logger.error(`Test suite failed: ${error}`);\n      return false;\n    }\n  }\n\n  private async clearTestData() {\n    this.logger.log('🧹 Clearing any existing test data...');\n    \n    // Store original data\n    this.originalFriends = await db.friends.toArray();\n    this.originalEncounters = await db.encounters.toArray();\n    \n    // Clear all data for clean test environment\n    await db.transaction('rw', [db.friends, db.encounters, db.interactionTypes], async () => {\n      await db.friends.clear();\n      await db.encounters.clear();\n      await db.interactionTypes.clear();\n    });\n    \n    // Add GAY_ACTIVITIES for encounters\n    await db.interactionTypes.bulkAdd(GAY_ACTIVITIES);\n    \n    this.logger.log('Test environment prepared');\n  }\n\n  private async testFriendsOperations() {\n    this.logger.log(`👥 Testing friends operations (${TEST_CONFIG.FRIENDS_COUNT} friends)...`);\n    \n    // Test friend creation\n    const createdFriends: Friend[] = [];\n    for (let i = 0; i < TEST_CONFIG.FRIENDS_COUNT; i++) {\n      const friendData = generateTestFriend(i);\n      const friendId = await friendsApi.create(friendData);\n      \n      const retrievedFriend = await db.friends.get(friendId);\n      if (!retrievedFriend) {\n        this.logger.error(`Failed to retrieve created friend #${i + 1}`);\n        continue;\n      }\n      \n      createdFriends.push(retrievedFriend);\n      if (friendId) {\n        this.testFriendIds.push(friendId);\n      }\n      \n      // Validate data integrity\n      this.validateFriendData(friendData, retrievedFriend, `create friend #${i + 1}`);\n    }\n    \n    this.logger.log(`✅ Created ${createdFriends.length} friends successfully`);\n    \n    // Test friend editing\n    for (let i = 0; i < Math.min(5, createdFriends.length); i++) {\n      const friend = createdFriends[i];\n      const updatedData = {\n        ...friend,\n        name: `${friend.name} (Updated)`,\n        age: (friend.age || 25) + 1,\n        notes: `${friend.notes} - UPDATED`,\n        avatarUrl: generateTestPhoto(), // New photo\n        photos: [...(friend.photos || []), generateTestPhoto()], // Add photo\n        preferences: [...(friend.preferences || []), 'Updated Preference']\n      };\n      \n      await friendsApi.update(friend.id!, updatedData);\n      \n      const retrievedFriend = await db.friends.get(friend.id!);\n      if (!retrievedFriend) {\n        this.logger.error(`Failed to retrieve updated friend #${i + 1}`);\n        continue;\n      }\n      \n      // Validate updates\n      if (retrievedFriend.name !== updatedData.name) {\n        this.logger.error(`Friend name not updated correctly for friend #${i + 1}`);\n      }\n      if (retrievedFriend.age !== updatedData.age) {\n        this.logger.error(`Friend age not updated correctly for friend #${i + 1}`);\n      }\n      if ((retrievedFriend.photos?.length || 0) !== (updatedData.photos?.length || 0)) {\n        this.logger.error(`Friend photos not updated correctly for friend #${i + 1}`);\n      }\n      \n      this.logger.log(`Friend #${i + 1} updated and validated`);\n    }\n  }\n\n  private async testEncountersOperations() {\n    this.logger.log(`🔥 Testing encounters operations (${TEST_CONFIG.ENCOUNTERS_COUNT} encounters)...`);\n    \n    if (this.testFriendIds.length === 0) {\n      this.logger.error('No friends available for encounter testing');\n      return;\n    }\n    \n    // Test encounter creation\n    const createdEncounters: Encounter[] = [];\n    for (let i = 0; i < TEST_CONFIG.ENCOUNTERS_COUNT; i++) {\n      const encounterData = await generateTestEncounter(this.testFriendIds, i);\n      const encounterId = await encountersApi.create(encounterData);\n      \n      const retrievedEncounter = await db.encounters.get(encounterId);\n      if (!retrievedEncounter) {\n        this.logger.error(`Failed to retrieve created encounter #${i + 1}`);\n        continue;\n      }\n      \n      createdEncounters.push(retrievedEncounter);\n      if (encounterId) {\n        this.testEncounterIds.push(encounterId);\n      }\n      \n      // Validate data integrity\n      this.validateEncounterData(encounterData, retrievedEncounter, `create encounter #${i + 1}`);\n    }\n    \n    this.logger.log(`✅ Created ${createdEncounters.length} encounters successfully`);\n    \n    // Test encounter editing\n    for (let i = 0; i < Math.min(5, createdEncounters.length); i++) {\n      const encounter = createdEncounters[i];\n      const updatedData = {\n        ...encounter,\n        rating: ((encounter.rating % 5) + 1), // Change rating\n        notes: `${encounter.notes} - UPDATED`,\n        durationMinutes: (encounter.durationMinutes || 30) + 15,\n        photos: [...(encounter.photos || []), generateTestPhoto()], // Add photo\n        tags: [...(encounter.tags || []), 'updated-tag']\n      };\n      \n      await encountersApi.update(encounter.id!, updatedData);\n      \n      const retrievedEncounter = await db.encounters.get(encounter.id!);\n      if (!retrievedEncounter) {\n        this.logger.error(`Failed to retrieve updated encounter #${i + 1}`);\n        continue;\n      }\n      \n      // Validate updates\n      if (retrievedEncounter.rating !== updatedData.rating) {\n        this.logger.error(`Encounter rating not updated correctly for encounter #${i + 1}`);\n      }\n      if (retrievedEncounter.durationMinutes !== updatedData.durationMinutes) {\n        this.logger.error(`Encounter duration not updated correctly for encounter #${i + 1}`);\n      }\n      if ((retrievedEncounter.photos?.length || 0) !== (updatedData.photos?.length || 0)) {\n        this.logger.error(`Encounter photos not updated correctly for encounter #${i + 1}`);\n      }\n      \n      this.logger.log(`Encounter #${i + 1} updated and validated`);\n    }\n    \n    // Test encounter deletion\n    const toDelete = createdEncounters.slice(0, 3);\n    for (const encounter of toDelete) {\n      await encountersApi.delete(encounter.id!);\n      \n      const deletedEncounter = await db.encounters.get(encounter.id!);\n      if (deletedEncounter) {\n        this.logger.error(`Encounter #${encounter.id} was not deleted properly`);\n      } else {\n        this.logger.log(`Encounter #${encounter.id} deleted successfully`);\n      }\n    }\n  }\n\n  private async testBackupAndRestore() {\n    this.logger.log('💾 Testing backup and restore operations...');\n    \n    // Create backup\n    const backup = await createBackup(true); // Include photos\n    \n    // Validate backup structure\n    if (!backup.version || !backup.timestamp) {\n      this.logger.error('Backup missing version or timestamp');\n    }\n    if (!Array.isArray(backup.friends) || !Array.isArray(backup.encounters)) {\n      this.logger.error('Backup missing required data arrays');\n    }\n    \n    const backupFriendCount = backup.friends.length;\n    const backupEncounterCount = backup.encounters.length;\n    \n    this.logger.log(`Backup created with ${backupFriendCount} friends and ${backupEncounterCount} encounters`);\n    \n    // Clear data\n    await db.transaction('rw', [db.friends, db.encounters], async () => {\n      await db.friends.clear();\n      await db.encounters.clear();\n    });\n    \n    // Verify data is cleared\n    const friendsAfterClear = await db.friends.count();\n    const encountersAfterClear = await db.encounters.count();\n    \n    if (friendsAfterClear !== 0 || encountersAfterClear !== 0) {\n      this.logger.error('Data was not cleared properly before restore');\n    }\n    \n    // Restore from backup\n    await restoreFromBackup(backup);\n    \n    // Verify restored data\n    const restoredFriends = await db.friends.toArray();\n    const restoredEncounters = await db.encounters.toArray();\n    \n    if (restoredFriends.length !== backupFriendCount) {\n      this.logger.error(`Friends count mismatch after restore: expected ${backupFriendCount}, got ${restoredFriends.length}`);\n    }\n    \n    if (restoredEncounters.length !== backupEncounterCount) {\n      this.logger.error(`Encounters count mismatch after restore: expected ${backupEncounterCount}, got ${restoredEncounters.length}`);\n    }\n    \n    // Validate a few restored items in detail\n    if (restoredFriends.length > 0) {\n      const friend = restoredFriends[0];\n      const originalFriend = backup.friends[0];\n      \n      if (friend.name !== originalFriend.name || friend.age !== originalFriend.age) {\n        this.logger.error('Friend data integrity lost during backup/restore');\n      }\n      \n      // Check photos are preserved\n      if ((friend.photos?.length || 0) !== (originalFriend.photos?.length || 0)) {\n        this.logger.error('Friend photos not preserved during backup/restore');\n      }\n    }\n    \n    this.logger.log('✅ Backup and restore operations completed successfully');\n  }\n\n  private async testDataClearing() {\n    this.logger.log('🗑️ Testing data clearing operations...');\n    \n    // Test selective clearing\n    const beforeClear = {\n      friends: await db.friends.count(),\n      encounters: await db.encounters.count(),\n      interactionTypes: await db.interactionTypes.count()\n    };\n    \n    // Clear only encounters\n    await db.encounters.clear();\n    \n    const afterEncounterClear = {\n      friends: await db.friends.count(),\n      encounters: await db.encounters.count(),\n      interactionTypes: await db.interactionTypes.count()\n    };\n    \n    if (afterEncounterClear.encounters !== 0) {\n      this.logger.error('Encounters were not cleared properly');\n    }\n    \n    if (afterEncounterClear.friends !== beforeClear.friends) {\n      this.logger.error('Friends were affected by encounter clearing');\n    }\n    \n    // Clear all data\n    await db.transaction('rw', [db.friends, db.encounters, db.interactionTypes], async () => {\n      await db.friends.clear();\n      await db.encounters.clear();\n      await db.interactionTypes.clear();\n    });\n    \n    const afterFullClear = {\n      friends: await db.friends.count(),\n      encounters: await db.encounters.count(),\n      interactionTypes: await db.interactionTypes.count()\n    };\n    \n    if (afterFullClear.friends !== 0 || afterFullClear.encounters !== 0 || afterFullClear.interactionTypes !== 0) {\n      this.logger.error('Full data clear did not work properly');\n    } else {\n      this.logger.log('✅ Data clearing operations completed successfully');\n    }\n    \n    // Restore original data if any existed\n    if (this.originalFriends.length > 0 || this.originalEncounters.length > 0) {\n      await db.transaction('rw', [db.friends, db.encounters], async () => {\n        if (this.originalFriends.length > 0) {\n          await db.friends.bulkAdd(this.originalFriends);\n        }\n        if (this.originalEncounters.length > 0) {\n          await db.encounters.bulkAdd(this.originalEncounters);\n        }\n      });\n      \n      this.logger.log('Original data restored after testing');\n    }\n  }\n\n  private validateFriendData(original: Partial<Friend>, retrieved: Friend, context: string) {\n    const checks = [\n      { field: 'name', original: original.name, retrieved: retrieved.name },\n      { field: 'age', original: original.age, retrieved: retrieved.age },\n      { field: 'bodyType', original: original.bodyType, retrieved: retrieved.bodyType },\n      { field: 'sexualRole', original: original.sexualRole, retrieved: retrieved.sexualRole },\n      { field: 'photos length', original: original.photos?.length, retrieved: retrieved.photos?.length },\n      { field: 'preferences length', original: original.preferences?.length, retrieved: retrieved.preferences?.length }\n    ];\n    \n    for (const check of checks) {\n      if (check.original !== check.retrieved) {\n        this.logger.error(`${context}: ${check.field} mismatch - expected: ${check.original}, got: ${check.retrieved}`);\n      }\n    }\n  }\n\n  private validateEncounterData(original: Partial<Encounter>, retrieved: Encounter, context: string) {\n    const checks = [\n      { field: 'rating', original: original.rating, retrieved: retrieved.rating },\n      { field: 'beneficiary', original: original.beneficiary, retrieved: retrieved.beneficiary },\n      { field: 'durationMinutes', original: original.durationMinutes, retrieved: retrieved.durationMinutes },\n      { field: 'participants length', original: original.participants?.length, retrieved: retrieved.participants?.length },\n      { field: 'activitiesPerformed length', original: original.activitiesPerformed?.length, retrieved: retrieved.activitiesPerformed?.length },\n      { field: 'photos length', original: original.photos?.length, retrieved: retrieved.photos?.length }\n    ];\n    \n    for (const check of checks) {\n      if (check.original !== check.retrieved) {\n        this.logger.error(`${context}: ${check.field} mismatch - expected: ${check.original}, got: ${check.retrieved}`);\n      }\n    }\n    \n    // Check date preservation (within 1 second tolerance)\n    if (original.date && Math.abs(original.date.getTime() - retrieved.date.getTime()) > 1000) {\n      this.logger.error(`${context}: date not preserved correctly`);\n    }\n  }\n}\n\n// Export test runner function\nexport async function runDataIntegrityTests(keepTestData: boolean = false): Promise<boolean> {\n  const tester = new DataIntegrityTester();\n  return await tester.runAllTests(keepTestData);\n}\n\n// Export function to create test data without running full tests\nexport async function createTestDataOnly(): Promise<void> {\n  console.log('🎨 Creating MASSIVE & DIVERSE test dataset...');\n  console.log(`📊 Generating ${TEST_CONFIG.FRIENDS_COUNT} globally diverse friends and ${TEST_CONFIG.ENCOUNTERS_COUNT} realistic encounters`);\n  console.log(`💰 Only ${Math.round(TEST_CONFIG.PAID_ENCOUNTER_RATE * 100)}% paid encounters - much more realistic!`);\n  console.log(`🌍 International names, cities, and cultures represented`);\n  console.log(`🎯 All activities match configured GAY_ACTIVITIES from schema`);\n  console.log('⏳ This may take a moment due to the large dataset...');\n  \n  // Clear existing data\n  await db.transaction('rw', [db.friends, db.encounters, db.interactionTypes], async () => {\n    await db.friends.clear();\n    await db.encounters.clear();\n    await db.interactionTypes.clear();\n  });\n  \n  // Add GAY_ACTIVITIES for encounters\n  await db.interactionTypes.bulkAdd(GAY_ACTIVITIES);\n  \n  // Create friends with progress logging\n  const friendIds: number[] = [];\n  for (let i = 0; i < TEST_CONFIG.FRIENDS_COUNT; i++) {\n    const friendData = generateTestFriend(i);\n    const friendId = await friendsApi.create(friendData);\n    if (friendId) friendIds.push(friendId);\n    \n    // Progress logging every 10 friends\n    if ((i + 1) % 10 === 0) {\n      console.log(`👥 Created ${i + 1}/${TEST_CONFIG.FRIENDS_COUNT} friends...`);\n    }\n  }\n  \n  // Create encounters with progress logging\n  const encounterIds: number[] = [];\n  for (let i = 0; i < TEST_CONFIG.ENCOUNTERS_COUNT; i++) {\n    const encounterData = await generateTestEncounter(friendIds, i);\n    const encounterId = await encountersApi.create(encounterData);\n    if (encounterId) encounterIds.push(encounterId);\n    \n    // Progress logging every 20 encounters\n    if ((i + 1) % 20 === 0) {\n      console.log(`🔥 Created ${i + 1}/${TEST_CONFIG.ENCOUNTERS_COUNT} encounters...`);\n    }\n  }\n  \n  console.log('� MASSIVE test dataset created successfully!');\n  console.log(`✨ Generated ${friendIds.length} friends and ${encounterIds.length} encounters`);\n  \n  // Comprehensive statistics\n  const allFriends = await db.friends.toArray();\n  const allEncounters = await db.encounters.toArray();\n  const paidEncounters = allEncounters.filter(e => e.isPaid);\n  const totalPhotos = allFriends.reduce((sum, f) => sum + (f.photos?.length || 0), 0) + \n                     allEncounters.reduce((sum, e) => sum + (e.photos?.length || 0), 0);\n  \n  // Calculate exciting personal stats\n  const totalMinutes = allEncounters.reduce((sum, e) => sum + (e.durationMinutes || 0), 0);\n  const averageRating = allEncounters.reduce((sum, e) => sum + e.rating, 0) / allEncounters.length;\n  const topRatedEncounters = allEncounters.filter(e => e.rating >= 4);\n  const kinkiestEncounters = allEncounters.filter(e => (e.kinkiness || 0) >= 4);\n  const repeatableGuys = allEncounters.filter(e => e.wouldRepeat);\n  const safeEncounters = allEncounters.filter(e => e.condomUsed);\n  const moneyReceived = paidEncounters.filter(e => e.paymentType === 'received').reduce((sum, e) => sum + (e.amountGiven || 0), 0);\n  const moneyPaid = paidEncounters.filter(e => e.paymentType === 'given').reduce((sum, e) => sum + (e.amountGiven || 0), 0);\n  const hostingFriends = allFriends.filter(f => f.canHost);\n  const prepGuys = allFriends.filter(f => f.onPrep);\n  \n  console.log('🔥 YOUR PERSONAL SEX STATS:');\n  console.log(`� You've got ${allFriends.length} guys in your contact list (${hostingFriends.length} can host you over!)`);\n  console.log(`🍆 ${allEncounters.length} total encounters - you're clearly popular! 😏`);\n  console.log(`⭐ Average encounter rating: ${averageRating.toFixed(1)}/5 - you know how to pick 'em!`);\n  console.log(`🔥 ${topRatedEncounters.length} were 4+ star experiences - incredible encounters!`);\n  console.log(`😈 ${kinkiestEncounters.length} were kinky AF (4+ kink rating) - you're adventurous!`);\n  console.log(`🔁 ${repeatableGuys.length} guys want to see you again - you're clearly amazing in bed!`);\n  \n  if (totalMinutes > 0) {\n    const hours = Math.floor(totalMinutes / 60);\n    const avgDuration = Math.floor(totalMinutes / allEncounters.length);\n    console.log(`⏰ ${hours} hours of fun total - averaging ${avgDuration} minutes per session`);\n  }\n  \n  console.log(`📸 ${totalPhotos} steamy photos captured - you're building quite the collection!`);\n  console.log(`🛡️ ${safeEncounters.length}/${allEncounters.length} were safe (${Math.round(safeEncounters.length/allEncounters.length*100)}%) - you're smart AND sexy!`);\n  console.log(`💊 ${prepGuys.length} friends on PrEP - staying healthy is hot!`);\n  \n  if (paidEncounters.length > 0) {\n    console.log(`💰 MONEY MOVES (${paidEncounters.length} paid encounters - ${Math.round(paidEncounters.length/allEncounters.length*100)}%):`);\n    if (moneyReceived > 0) {\n      console.log(`   💸 You MADE $${moneyReceived.toFixed(2)} - damn, you're worth every penny!`);\n    }\n    if (moneyPaid > 0) {\n      console.log(`   💳 You spent $${moneyPaid.toFixed(2)} - investing in good times!`);\n    }\n    const netGain = moneyReceived - moneyPaid;\n    if (netGain > 0) {\n      console.log(`   🎯 NET PROFIT: +$${netGain.toFixed(2)} - you're making bank! 💅`);\n    } else if (netGain < 0) {\n      console.log(`   🛍️ NET INVESTMENT: $${Math.abs(netGain).toFixed(2)} - money well spent on pleasure!`);\n    } else {\n      console.log(`   ⚖️ Perfectly balanced - gave and received equally!`);\n    }\n  } else {\n    console.log(`💝 All encounters were for pure pleasure - no money involved!`);\n  }\n  \n  console.log('🎯 Ready to explore your legendary sex life? Check Friends and Timeline pages! 🔥');\n}\n\n// Global test functions for console access\n(window as any).runDataIntegrityTests = runDataIntegrityTests;\n(window as any).createTestDataOnly = createTestDataOnly;\n\n// Add sample data management functions to console\nimport { validateSampleDataIntegrity } from '../db/sampleData';\n(window as any).validateSampleDataIntegrity = validateSampleDataIntegrity;\n\nconsole.log('🧪 Data integrity tests loaded!');\nconsole.log('• runDataIntegrityTests() - Full validation (cleans up)');\nconsole.log('• runDataIntegrityTests(true) - Full validation (keeps data)');\nconsole.log('• createTestDataOnly() - Just create test data');\nconsole.log('• validateSampleDataIntegrity() - Fix orphaned sample data references');","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/utils/analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/utils/azureStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11016,11019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11016,11019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { db } from '../db/schema';\nimport { prepareBackupForExport, extractBackupFromExport, shouldEncryptBackup, type EncryptedBackup } from './encryption';\n\nexport interface AzureConfig {\n  storageAccount: string;\n  storageKey: string;\n  containerName: string;\n  tableName: string;\n  sasToken: string;\n  enabled: boolean;\n  // Auto backup settings\n  autoBackupEnabled?: boolean;\n  autoBackupContainer?: string;\n  autoBackupRetention?: number;\n}\n\nexport interface BackupMetadata {\n  backupId: string;\n  timestamp: string;\n  friendsCount: number;\n  encountersCount: number;\n  interactionTypesCount: number;\n  settingsCount: number;\n  appVersion: string;\n  deviceInfo?: string;\n  size?: number; // File size in bytes\n}\n\nexport interface BackupInfo {\n  name: string;\n  size: number;\n  lastModified: Date;\n}\n\nexport interface AzureEntity {\n  PartitionKey: string;\n  RowKey: string;\n  Timestamp?: string;\n  [key: string]: string | number | boolean | undefined;\n}\n\nexport interface MigrationProgress {\n  phase: 'preparing' | 'friends' | 'encounters' | 'photos' | 'settings' | 'cleanup' | 'complete' | 'error' | 'backup' | 'restore';\n  current: number;\n  total: number;\n  message: string;\n}\n\nexport class AzureStorageService {\n  private config: AzureConfig;\n  private blobBaseUrl: string;\n  private userId: string;\n\n  constructor(config: AzureConfig, userId: string) {\n    this.config = config;\n    this.userId = userId;\n    this.blobBaseUrl = `https://${config.storageAccount}.blob.core.windows.net`;\n    \n    // Validate SAS token format\n    this.validateConfig();\n  }\n  \n  private getSasTokenForUrl(): string {\n    // Remove leading ? if present since we'll add it in URL construction\n    return this.config.sasToken.startsWith('?') ? this.config.sasToken.substring(1) : this.config.sasToken;\n  }\n  \n  private validateConfig(): void {\n    if (!this.config.sasToken) {\n      throw new Error('SAS token is required');\n    }\n    \n    // Just do basic format validation - check if it looks like a query string\n    const hasEqualsSign = this.config.sasToken.includes('=');\n    \n    if (!hasEqualsSign) {\n      throw new Error('SAS token format appears invalid. Should contain key=value pairs.');\n    }\n    \n    // Check if SAS token starts with ? (if not, add it)\n    if (!this.config.sasToken.startsWith('?')) {\n      this.config.sasToken = '?' + this.config.sasToken;\n    }\n  }\n\n  /**\n   * Test connection to Azure Blob Storage\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      // Test blob storage connection by trying to list blobs in the specific container\n      // This requires less permissions than listing all containers\n      const url = `${this.blobBaseUrl}/${this.config.containerName}?restype=container&comp=list&${this.getSasTokenForUrl()}`;\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'x-ms-version': '2020-04-08'\n        }\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Azure connection test failed:', {\n          status: response.status,\n          statusText: response.statusText,\n          url: url.replace(this.config.sasToken, '[SAS_TOKEN_HIDDEN]'),\n          error: errorText\n        });\n        \n        // Throw specific error for better user feedback\n        if (response.status === 404) {\n          throw new Error(`Container '${this.config.containerName}' not found. Create it in Azure Portal first.`);\n        } else if (response.status === 403) {\n          throw new Error('SAS token lacks required permissions. Generate new token with read/write/list permissions.');\n        } else if (response.status === 401) {\n          throw new Error('SAS token is invalid or expired. Generate a new token.');\n        } else {\n          throw new Error(`Azure error ${response.status}: ${errorText}`);\n        }\n      }\n      \n      console.log('Azure connection test successful');\n      return true;\n    } catch (error) {\n      console.error('Azure connection test failed:', error);\n      throw error; // Re-throw to show specific error message\n    }\n  }\n\n  /**\n   * Initialize storage (no-op since container is created manually)\n   */\n  async initializeStorage(): Promise<void> {\n    // Container should be created manually in Azure Portal\n    // No table storage needed - we store everything in blobs\n  }\n\n  /**\n   * Create a backup of all user data with optional encryption\n   */\n  async createBackup(onProgress?: (progress: MigrationProgress) => void, pin?: string): Promise<string> {\n    try {\n      onProgress?.({ phase: 'backup', current: 0, total: 100, message: 'Starting backup...' });\n      \n      // Get all data from IndexedDB\n      const friends = await db.friends.toArray();\n      const encounters = await db.encounters.toArray();\n      const interactionTypes = await db.interactionTypes.toArray();\n      const settings = await db.settings.toArray();\n\n      onProgress?.({ phase: 'backup', current: 30, total: 100, message: 'Preparing backup data...' });\n\n      const timestamp = Date.now();\n      const needsEncryption = shouldEncryptBackup();\n      const backupId = needsEncryption \n        ? `${this.userId}_backup_${timestamp}_encrypted.json`\n        : `${this.userId}_backup_${timestamp}.json`;\n      \n      const metadata: BackupMetadata = {\n        backupId,\n        timestamp: new Date(timestamp).toISOString(),\n        friendsCount: friends.length,\n        encountersCount: encounters.length,\n        interactionTypesCount: interactionTypes.length,\n        settingsCount: settings.length,\n        appVersion: '1.0.0',\n        deviceInfo: navigator.userAgent\n      };\n\n      const rawBackupData = {\n        metadata,\n        friends,\n        encounters,\n        interactionTypes,\n        settings,\n        exportedAt: new Date().toISOString(),\n        version: '1.0.0'\n      };\n\n      onProgress?.({ phase: 'backup', current: 60, total: 100, message: 'Encrypting backup...' });\n\n      // Prepare backup with encryption if needed\n      let finalBackupData: EncryptedBackup;\n      if (needsEncryption && pin) {\n        finalBackupData = await prepareBackupForExport(rawBackupData, pin);\n      } else if (needsEncryption && !pin) {\n        throw new Error('PIN required for encrypted Azure backup. Please provide PIN.');\n      } else {\n        finalBackupData = await prepareBackupForExport(rawBackupData);\n      }\n\n      onProgress?.({ phase: 'backup', current: 80, total: 100, message: 'Uploading to Azure...' });\n\n      // Upload to Azure Blob Storage - finalBackupData is already properly formatted by prepareBackupForExport\n      await this.uploadBlob(backupId, JSON.stringify(finalBackupData, null, 2));\n\n      onProgress?.({ phase: 'backup', current: 100, total: 100, message: 'Backup completed!' });\n\n      return backupId;\n    } catch (error) {\n      throw new Error(`Backup failed: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * List all backups by scanning blob storage\n   */\n  /**\n   * List blobs in the container, optionally filtered by prefix\n   */\n  async listBlobs(prefix?: string): Promise<string[]> {\n    try {\n      let url = `${this.blobBaseUrl}/${this.config.containerName}?restype=container&comp=list&${this.getSasTokenForUrl()}`;\n      if (prefix) {\n        url += `&prefix=${encodeURIComponent(prefix)}`;\n      }\n\n      console.log('🔍 listBlobs URL:', url.substring(0, 150) + '...');\n      console.log('🔍 listBlobs prefix:', prefix);\n\n      const response = await fetch(url, {\n        method: 'GET'\n      });\n\n      console.log('📊 listBlobs response status:', response.status, response.statusText);\n\n      if (!response.ok) {\n        throw new Error(`Failed to list blobs: ${response.statusText}`);\n      }\n\n      const xmlText = await response.text();\n      console.log('📄 listBlobs XML response (first 500 chars):', xmlText.substring(0, 500));\n\n      // Parse XML response to extract blob names\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const blobs = xmlDoc.querySelectorAll('Blob > Name');\n      console.log('🔍 Found blob Name elements:', blobs.length);\n      \n      const blobNames: string[] = [];\n      \n      blobs.forEach((blob, index) => {\n        const name = blob.textContent;\n        console.log(`📁 Blob ${index + 1}:`, name);\n        if (name) {\n          blobNames.push(name);\n        }\n      });\n\n      console.log('✅ Final listBlobs result:', blobNames);\n      return blobNames;\n    } catch (error) {\n      console.error('❌ listBlobs error:', error);\n      return [];\n    }\n  }\n\n  /**\n   * List all backups (legacy method for compatibility)\n   */\n  async listBackups(): Promise<string[]> {\n    return this.listBlobs();\n  }\n\n  async listBackupsWithInfo(prefix?: string): Promise<BackupInfo[]> {\n    try {\n      let url = `${this.blobBaseUrl}/${this.config.containerName}?restype=container&comp=list&${this.getSasTokenForUrl()}`;\n      if (prefix) {\n        url += `&prefix=${encodeURIComponent(prefix)}`;\n      }\n\n      const response = await fetch(url, {\n        method: 'GET'\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to list blobs: ${response.statusText}`);\n      }\n\n      const xmlText = await response.text();\n\n      // Parse XML response to extract blob metadata\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const blobs = xmlDoc.querySelectorAll('Blob');\n      const backupInfos: BackupInfo[] = [];\n      \n      blobs.forEach((blob) => {\n        const nameElement = blob.querySelector('Name');\n        const sizeElement = blob.querySelector('Properties > Content-Length');\n        const lastModifiedElement = blob.querySelector('Properties > Last-Modified');\n        \n        if (nameElement?.textContent) {\n          const name = nameElement.textContent;\n          const size = sizeElement?.textContent ? parseInt(sizeElement.textContent) : 0;\n          const lastModified = lastModifiedElement?.textContent ? new Date(lastModifiedElement.textContent) : new Date();\n          \n          backupInfos.push({ name, size, lastModified });\n        }\n      });\n\n      // Sort by lastModified descending (newest first)\n      return backupInfos.sort((a, b) => b.lastModified.getTime() - a.lastModified.getTime());\n    } catch (error) {\n      console.error('❌ Error listing backup info:', error);\n      throw error;\n    }\n  }\n\n  async restoreFromBackup(\n    backupId: string,\n    onProgress?: (progress: MigrationProgress) => void,\n    pin?: string\n  ): Promise<void> {\n    try {\n      onProgress?.({ phase: 'restore', current: 0, total: 100, message: 'Downloading backup...' });\n      \n      // Download backup data\n      const backupJson = await this.downloadBlob(backupId);\n      const rawBackupData = JSON.parse(backupJson);\n\n      onProgress?.({ phase: 'restore', current: 20, total: 100, message: 'Decrypting backup...' });\n\n      // Handle encrypted vs unencrypted backups\n      let actualBackupData: Record<string, any>;\n      if (typeof rawBackupData === 'object' && rawBackupData.encrypted === true) {\n        if (!pin) {\n          throw new Error('PIN required to decrypt Azure backup');\n        }\n        actualBackupData = await extractBackupFromExport(rawBackupData, pin);\n      } else if (typeof rawBackupData === 'object' && rawBackupData.encrypted === false) {\n        actualBackupData = await extractBackupFromExport(rawBackupData);\n      } else {\n        // Legacy unencrypted backup format\n        actualBackupData = rawBackupData;\n      }\n\n      onProgress?.({ phase: 'restore', current: 40, total: 100, message: 'Clearing existing data...' });\n      \n      // Clear existing data\n      await db.friends.clear();\n      await db.encounters.clear();\n      await db.interactionTypes.clear();\n      await db.settings.clear();\n\n      onProgress?.({ phase: 'restore', current: 60, total: 100, message: 'Restoring data...' });\n\n      // Restore data\n      if (actualBackupData.friends?.length) {\n        await db.friends.bulkAdd(actualBackupData.friends);\n      }\n      if (actualBackupData.encounters?.length) {\n        await db.encounters.bulkAdd(actualBackupData.encounters);\n      }\n      if (actualBackupData.interactionTypes?.length) {\n        await db.interactionTypes.bulkAdd(actualBackupData.interactionTypes);\n      }\n      if (actualBackupData.settings?.length) {\n        await db.settings.bulkAdd(actualBackupData.settings);\n      }\n\n      onProgress?.({ phase: 'restore', current: 100, total: 100, message: 'Restore completed!' });\n    } catch (error) {\n      throw new Error(`Restore failed: ${(error as Error).message}`);\n    }\n  }\n\n  async deleteBackup(backupId: string): Promise<void> {\n    try {\n      await this.deleteBlob(backupId);\n    } catch (error) {\n      throw new Error(`Delete backup failed: ${(error as Error).message}`);\n    }\n  }\n\n  // Blob Storage operations\n  async uploadBlob(blobName: string, content: string): Promise<void> {\n    const url = `${this.blobBaseUrl}/${this.config.containerName}/${blobName}?${this.getSasTokenForUrl()}`;\n\n    const response = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        'x-ms-blob-type': 'BlockBlob',\n        'Content-Type': 'application/json'\n      },\n      body: content\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to upload blob: ${response.statusText}`);\n    }\n  }\n\n  private async downloadBlob(blobName: string): Promise<string> {\n    const url = `${this.blobBaseUrl}/${this.config.containerName}/${blobName}?${this.getSasTokenForUrl()}`;\n\n    const response = await fetch(url, {\n      method: 'GET'\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to download blob: ${response.statusText}`);\n    }\n\n    return await response.text();\n  }\n\n  private async deleteBlob(blobName: string): Promise<void> {\n    const url = `${this.blobBaseUrl}/${this.config.containerName}/${blobName}?${this.getSasTokenForUrl()}`;\n\n    const response = await fetch(url, {\n      method: 'DELETE'\n    });\n\n    if (!response.ok && response.status !== 404) {\n      throw new Error(`Failed to delete blob: ${response.statusText}`);\n    }\n  }\n}\n\n/**\n * Generate anonymous user ID for Azure partitioning\n */\nexport function generateUserId(): string {\n  return 'user_' + Math.random().toString(36).substr(2, 16);\n}\n\n/**\n * Validate Azure configuration\n */\nexport function validateAzureConfig(config: Partial<AzureConfig>): string[] {\n  const errors: string[] = [];\n\n  if (!config.storageAccount) {\n    errors.push('Storage Account name is required');\n  }\n\n  if (!config.sasToken) {\n    errors.push('SAS Token is required');\n  }\n\n  if (!config.containerName) {\n    errors.push('Container name is required');\n  }\n\n  if (config.storageAccount && !/^[a-z0-9]{3,24}$/.test(config.storageAccount)) {\n    errors.push('Storage Account name must be 3-24 characters, lowercase letters and numbers only');\n  }\n\n  if (config.containerName && !/^[a-z0-9-]{3,63}$/.test(config.containerName)) {\n    errors.push('Container name must be 3-63 characters, lowercase letters, numbers, and hyphens only');\n  }\n\n  return errors;\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/utils/backup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3839,3842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3839,3842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { db } from '../db/schema';\nimport { prepareBackupForExport, extractBackupFromExport, shouldEncryptBackup, type EncryptedBackup } from './encryption';\nimport { getPinForAutoBackups } from './pinManager';\n\nimport type { Friend, Encounter, InteractionType, Settings } from '../db/schema';\n\nexport interface BackupData {\n  version: string;\n  timestamp: string;\n  friends: Friend[];\n  encounters: Encounter[];\n  interactionTypes: InteractionType[];\n  settings: Settings[];\n  includesPhotos: boolean;\n}\n\nexport async function createBackup(includePhotos: boolean = true): Promise<BackupData> {\n  try {\n    // Get all data from IndexedDB\n    const friends = await db.friends.toArray();\n    const encounters = await db.encounters.toArray();\n    const interactionTypes = await db.interactionTypes.toArray();\n    const settings = await db.settings.toArray();\n\n    // Process friends to handle photos\n    const processedFriends = friends.map(friend => {\n      if (!includePhotos) {\n        // Remove photo data but keep references\n        return {\n          ...friend,\n          avatarUrl: friend.avatarUrl?.startsWith('data:') ? '[PHOTO_REMOVED]' : friend.avatarUrl,\n          photos: friend.photos ? friend.photos.map(photo => \n            photo.startsWith('data:') ? '[PHOTO_REMOVED]' : photo\n          ) : undefined\n        };\n      }\n      return friend;\n    });\n\n    // Process encounters to handle photos\n    const processedEncounters = encounters.map(encounter => {\n      if (!includePhotos) {\n        // Remove photo data but keep references\n        return {\n          ...encounter,\n          photos: encounter.photos ? encounter.photos.map(photo => \n            photo.startsWith('data:') ? '[PHOTO_REMOVED]' : photo\n          ) : undefined\n        };\n      }\n      return encounter;\n    });\n\n    return {\n      version: '1.0.0',\n      timestamp: new Date().toISOString(),\n      friends: processedFriends,\n      encounters: processedEncounters,\n      interactionTypes,\n      settings,\n      includesPhotos: includePhotos\n    };\n  } catch (error) {\n    console.error('Error creating backup:', error);\n    throw new Error('Failed to create backup');\n  }\n}\n\nexport async function exportToFiles(includePhotos: boolean = true): Promise<void> {\n  try {\n    const backupData = await createBackup(includePhotos);\n    \n    // Check if we need to encrypt\n    const needsEncryption = shouldEncryptBackup();\n    let pin: string | null = null;\n    \n    if (needsEncryption) {\n      // Get stored PIN (should be available since user unlocked the app)\n      pin = await getPinForAutoBackups();\n      \n      if (!pin) {\n        throw new Error('PIN not available. Please unlock the app first.');\n      }\n    }\n    \n    let finalData: EncryptedBackup | BackupData;\n    let filename: string;\n    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');\n    const sizeIndicator = includePhotos ? 'full' : 'no-photos';\n    \n    if (needsEncryption && pin) {\n      // Create encrypted backup\n      finalData = await prepareBackupForExport(backupData, pin);\n      filename = `the-load-down-backup-${timestamp}-${sizeIndicator}-encrypted.json`;\n    } else {\n      // Create unencrypted backup - just the raw data\n      finalData = backupData;\n      filename = `the-load-down-backup-${timestamp}-${sizeIndicator}.json`;\n    }\n    \n    const blob = new Blob([JSON.stringify(finalData, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error('Error downloading backup:', error);\n    throw error;\n  }\n}\n\nexport async function restoreFromBackup(backupData: any, pin?: string): Promise<void> {\n  try {\n    // Clear existing data (ask for confirmation first)\n    if (!confirm('This will replace ALL existing data. Are you sure?')) {\n      return;\n    }\n\n    let actualBackupData: BackupData;\n    \n    // Check if this is an encrypted backup\n    if (typeof backupData === 'object' && backupData.encrypted === true) {\n      if (!pin) {\n        throw new Error('PIN required to decrypt backup');\n      }\n      actualBackupData = await extractBackupFromExport(backupData, pin);\n    } else if (typeof backupData === 'object' && backupData.encrypted === false) {\n      actualBackupData = await extractBackupFromExport(backupData);\n    } else {\n      // Legacy unencrypted backup format\n      actualBackupData = backupData;\n    }\n\n    // Clear all tables\n    await db.friends.clear();\n    await db.encounters.clear();\n    await db.interactionTypes.clear();\n    await db.settings.clear();\n\n    // Restore data\n    if (actualBackupData.friends?.length > 0) {\n      await db.friends.bulkAdd(actualBackupData.friends);\n    }\n    \n    if (actualBackupData.encounters?.length > 0) {\n      await db.encounters.bulkAdd(actualBackupData.encounters);\n    }\n    \n    if (actualBackupData.interactionTypes?.length > 0) {\n      await db.interactionTypes.bulkAdd(actualBackupData.interactionTypes);\n    }\n    \n    if (actualBackupData.settings?.length > 0) {\n      await db.settings.bulkAdd(actualBackupData.settings);\n    }\n\n    alert('Backup restored successfully!');\n  } catch (error) {\n    console.error('Error restoring backup:', error);\n    throw new Error('Failed to restore backup: ' + (error as Error).message);\n  }\n}\n\nexport function getBackupSize(backupData: BackupData): { size: number; sizeFormatted: string } {\n  const jsonString = JSON.stringify(backupData);\n  const size = new Blob([jsonString]).size;\n  \n  const formatSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return {\n    size,\n    sizeFormatted: formatSize(size)\n  };\n}\n\n// Get auto backup settings from Azure config\nfunction getAutoBackupSettings() {\n  const saved = localStorage.getItem('azure-backup-config');\n  if (!saved) {\n    return { enabled: false, retentionCount: 10, container: 'auto-backups' };\n  }\n  \n  try {\n    const config = JSON.parse(saved);\n    return {\n    enabled: config.autoBackupEnabled || false,\n    retentionCount: config.autoBackupRetention || 10,\n    container: config.autoBackupContainer || config.containerName || 'backups'\n    };\n  } catch {\n    return { enabled: false, retentionCount: 10, container: 'auto-backups' };\n  }\n}\n\n// Check if we should show manual backup prompt\nexport function shouldShowBackupPrompt(): boolean {\n  const autoSettings = getAutoBackupSettings();\n  const azureConfigured = isAzureConfigured();\n  \n  console.log('shouldShowBackupPrompt check:', {\n    autoEnabled: autoSettings.enabled,\n    azureConfigured,\n    shouldShow: !(autoSettings.enabled && azureConfigured)\n  });\n  \n  // If auto backup is enabled and Azure is configured, don't show manual prompt\n  if (autoSettings.enabled && azureConfigured) {\n    return false;\n  }\n  \n  // Otherwise, show the manual backup prompt\n  return true;\n}\n\n// Check if Azure backup is configured\nexport function isAzureConfigured(): boolean {\n  const saved = localStorage.getItem('azure-backup-config');\n  if (!saved) return false;\n  \n  try {\n    const config = JSON.parse(saved);\n    return config.enabled && config.storageAccount && config.sasToken && config.containerName;\n  } catch {\n    return false;\n  }\n}\n\n// Get Azure service if configured\nasync function getAzureService(): Promise<import('../utils/azureStorage').AzureStorageService | null> {\n  if (!isAzureConfigured()) return null;\n  \n  const saved = localStorage.getItem('azure-backup-config');\n  if (!saved) return null;\n  \n  try {\n    const config = JSON.parse(saved);\n    const { AzureStorageService } = await import('../utils/azureStorage');\n    const userId = localStorage.getItem('azure-user-id') || 'user_' + Math.random().toString(36).substr(2, 16);\n    if (!localStorage.getItem('azure-user-id')) {\n      localStorage.setItem('azure-user-id', userId);\n    }\n    return new AzureStorageService(config, userId);\n  } catch {\n    return null;\n  }\n}\n\n// Simple online check (doesn't require Azure credentials)\nasync function isOnline(): Promise<boolean> {\n  // Just trust the browser's built-in connectivity detection\n  // This avoids external API calls and privacy concerns\n  return navigator.onLine;\n}\n\n// Automatic Azure backup with rolling retention (data only, no photos)\nexport async function triggerAutoAzureBackup(): Promise<void> {\n  console.log('🔄 triggerAutoAzureBackup called');\n  const autoSettings = getAutoBackupSettings();\n  console.log('📋 Auto settings:', autoSettings);\n  \n  if (!autoSettings.enabled) {\n    console.log('❌ Auto backup not enabled, skipping');\n    return;\n  }\n  \n  if (!isAzureConfigured()) {\n    console.log('❌ Azure not configured, skipping');\n    return;\n  }\n  \n  const online = await isOnline();\n  if (!online) {\n    console.log('❌ Not online, skipping');\n    return;\n  }\n  \n  console.log('✅ All checks passed, proceeding with auto backup');\n\n  try {\n    const service = await getAzureService();\n    if (!service) return;\n\n    // Get Azure backup settings to use dedicated container for auto backups\n    const config = JSON.parse(localStorage.getItem('azure-backup-config') || '{}');\n    const autoBackupContainer = autoSettings.container;\n    \n    // Create a special Azure service instance for auto backups if different container\n    let autoService = service;\n    console.log('🗂️ Main container:', config.containerName);\n    console.log('🗂️ Auto backup container:', autoBackupContainer);\n    if (autoBackupContainer !== config.containerName) {\n      console.log('🔄 Creating separate service for auto backup container');\n      const { AzureStorageService } = await import('../utils/azureStorage');\n      const userId = localStorage.getItem('azure-user-id') || 'user_' + Math.random().toString(36).substr(2, 16);\n      autoService = new AzureStorageService({\n        ...config,\n        containerName: autoBackupContainer\n      }, userId);\n    } else {\n      console.log('✅ Using same container for auto backups');\n    }\n\n    // Create backup without photos (faster/smaller)\n    const timestamp = Date.now();\n    \n    // Check if encryption is needed and create appropriate filename\n    const needsEncryption = shouldEncryptBackup();\n    const userId = localStorage.getItem('azure-user-id') || 'user_' + Math.random().toString(36).substr(2, 16);\n    const backupId = needsEncryption \n      ? `${userId}_auto_${timestamp}_encrypted.json`\n      : `${userId}_auto_${timestamp}.json`;\n    \n    // Create data-only backup\n    const backupData = await createBackup(false); // false = no photos\n    \n    // Prepare upload data based on encryption requirements\n    let uploadData: string;\n    \n    if (needsEncryption) {\n      console.log('🔒 Auto-backup requires encryption, checking for stored PIN...');\n      const storedPin = await getPinForAutoBackups();\n      \n      if (storedPin) {\n        console.log('✅ Found stored PIN, creating encrypted auto-backup');\n        const encryptedBackup = await prepareBackupForExport(backupData, storedPin);\n        uploadData = JSON.stringify(encryptedBackup, null, 2);\n      } else {\n        console.log('❌ No stored PIN available, skipping auto-backup for security');\n        console.log('💡 Manual backup through UI will prompt for PIN and can also store it for future auto-backups');\n        return; // Skip auto-backup if encryption is required but no PIN is stored\n      }\n    } else {\n      console.log('📝 No encryption required, creating plain auto-backup');\n      uploadData = JSON.stringify(backupData, null, 2);\n    }\n    \n    // Upload to Azure (async, non-blocking)\n    await autoService.uploadBlob(backupId, uploadData);\n\n    // Implement rolling retention: keep only configured number of newest backups\n    console.log('🧹 Starting backup cleanup, retention count:', autoSettings.retentionCount);\n    console.log('🗂️ Auto backup container:', config.autoBackupContainer || config.containerName);\n    try {\n      console.log('📋 Listing existing auto backups...');\n      const autoBackups = await autoService.listBlobs('auto_');\n      console.log('🤖 Found', autoBackups.length, 'auto backups:', autoBackups);\n\n      // Delete oldest backups if we have more than the retention count\n      if (autoBackups.length > autoSettings.retentionCount) {\n        // Sort by name (which includes timestamp) to get oldest first\n        const sortedBackups = autoBackups.sort();\n        const backupsToDelete = sortedBackups.slice(0, autoBackups.length - autoSettings.retentionCount);\n        console.log('🗑️ Need to delete', backupsToDelete.length, 'old backups:', backupsToDelete);\n        \n        for (const backupId of backupsToDelete) {\n          try {\n            console.log('🗑️ Deleting backup:', backupId);\n            await autoService.deleteBackup(backupId);\n            console.log('✅ Deleted backup:', backupId);\n          } catch (error) {\n            console.warn('❌ Failed to delete old backup:', backupId, error);\n          }\n        }\n      } else {\n        console.log('✅ No cleanup needed, within retention limit');\n      }\n    } catch (error) {\n      console.warn('⚠️ Failed to clean up old auto-backups (continuing anyway):', error);\n    }\n\n    console.log('✅ Automatic Azure backup completed:', backupId);\n  } catch (error) {\n    console.warn('Automatic Azure backup failed (silently):', error);\n    // Fail silently to not interrupt user workflow\n  }\n}\n\nexport async function showBackupPrompt(): Promise<void> {\n  const azureConfigured = isAzureConfigured();\n  const needsEncryption = shouldEncryptBackup();\n  \n  return new Promise((resolve) => {\n    const modal = document.createElement('div');\n    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';\n    \n    const encryptionNote = needsEncryption ? `\n      <div class=\"mb-4 p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg border border-amber-200 dark:border-amber-800\">\n        <p class=\"text-sm text-amber-800 dark:text-amber-200\">\n          🔒 PIN protection is enabled - backups will be encrypted\n        </p>\n      </div>\n    ` : '';\n    \n    const azureButtons = azureConfigured ? `\n      <div class=\"mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n        <h4 class=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">☁️ Azure Cloud Backup</h4>\n        <div class=\"space-y-2\">\n          <button id=\"azure-backup\" class=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n            🌐 Save to Azure Cloud\n          </button>\n        </div>\n      </div>\n      <div class=\"mb-3\">\n        <h4 class=\"font-medium text-gray-900 dark:text-gray-100 mb-2\">📁 Local Backup</h4>\n      </div>\n    ` : '<h4 class=\"font-medium text-gray-900 dark:text-gray-100 mb-2\">📁 Local Backup</h4>';\n\n    modal.innerHTML = `\n      <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 max-w-sm w-full\">\n        <h3 class=\"text-lg font-semibold mb-4\">💾 Save Backup?</h3>\n        <p class=\"text-sm text-gray-600 dark:text-gray-300 mb-4\">\n          Would you like to save a backup of your data after this change?\n        </p>\n        \n        ${encryptionNote}\n        \n        <div class=\"space-y-3\">\n          ${azureButtons}\n          <div class=\"space-y-2\">\n            <button id=\"backup-with-photos\" class=\"w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\">\n              📸 Full Backup (with photos)\n            </button>\n            <button id=\"backup-no-photos\" class=\"w-full px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors\">\n              ⚡ Quick Backup (no photos)\n            </button>\n          </div>\n          <button id=\"backup-skip\" class=\"w-full px-4 py-2 border border-gray-300 text-gray-700 dark:border-gray-600 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\">\n            Skip for now\n          </button>\n        </div>\n      </div>\n    `;\n\n    document.body.appendChild(modal);\n\n    const azureBtn = modal.querySelector('#azure-backup') as HTMLButtonElement;\n    const withPhotos = modal.querySelector('#backup-with-photos') as HTMLButtonElement;\n    const noPhotos = modal.querySelector('#backup-no-photos') as HTMLButtonElement;\n    const skip = modal.querySelector('#backup-skip') as HTMLButtonElement;\n\n    const cleanup = () => {\n      document.body.removeChild(modal);\n      resolve();\n    };\n\n    // Helper function to get PIN if needed\n    const getPinIfNeeded = (): string | null => {\n      if (needsEncryption) {\n        return prompt('Enter your PIN to encrypt the backup:');\n      }\n      return null; // No PIN needed\n    };\n\n    // Azure backup handler\n    if (azureBtn) {\n      azureBtn.addEventListener('click', async () => {\n        try {\n          azureBtn.disabled = true;\n          azureBtn.textContent = '☁️ Uploading...';\n          \n          const pin = getPinIfNeeded();\n          if (needsEncryption && !pin) {\n            throw new Error('PIN required for encrypted backup');\n          }\n          \n          const service = await getAzureService();\n          if (!service) {\n            throw new Error('Azure service not available');\n          }\n          \n          const backupId = await service.createBackup(undefined, pin || undefined);\n          const displayId = backupId.split('_backup_')[1].replace('.json', '').replace('_encrypted', '');\n          alert('✅ Azure backup saved successfully!\\nBackup ID: ' + displayId + (needsEncryption ? ' (encrypted)' : ''));\n        } catch (error) {\n          alert('❌ Azure backup failed: ' + (error as Error).message);\n        }\n        cleanup();\n      });\n    }\n\n    withPhotos?.addEventListener('click', async () => {\n      try {\n        const pin = getPinIfNeeded();\n        if (needsEncryption && !pin) {\n          throw new Error('PIN required for encrypted backup');\n        }\n        \n        await exportToFiles(true);\n        alert('✅ Full backup saved to Files!' + (needsEncryption ? ' (encrypted)' : ''));\n      } catch (error) {\n        alert('❌ Backup failed: ' + (error as Error).message);\n      }\n      cleanup();\n    });\n\n    noPhotos?.addEventListener('click', async () => {\n      try {\n        await exportToFiles(false);\n        alert('✅ Quick backup downloaded successfully!' + (needsEncryption ? ' (encrypted)' : ''));\n      } catch (error) {\n        alert('❌ Backup failed: ' + (error as Error).message);\n      }\n      cleanup();\n    });\n\n    skip?.addEventListener('click', cleanup);\n\n    // Close on backdrop click\n    modal.addEventListener('click', (e) => {\n      if (e.target === modal) cleanup();\n    });\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/utils/currency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/utils/encryption.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4174,4177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4174,4177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6384,6387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6384,6387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Client-side encryption utilities for backup data protection\n * Implements AES-256-GCM encryption for backup files when PIN is configured\n */\n\nimport { getSecuritySettings } from './security';\nimport type { BackupData } from './backup';\n\n/**\n * Generate a cryptographic key from PIN + salt using PBKDF2\n */\nasync function deriveKeyFromPin(pin: string, salt: ArrayBuffer): Promise<CryptoKey> {\n  const encoder = new TextEncoder();\n  const pinData = encoder.encode(pin);\n  \n  // Import PIN as raw key material\n  const keyMaterial = await crypto.subtle.importKey(\n    'raw',\n    pinData,\n    'PBKDF2',\n    false,\n    ['deriveKey']\n  );\n  \n  // Derive AES-256 key using PBKDF2\n  return await crypto.subtle.deriveKey(\n    {\n      name: 'PBKDF2',\n      salt: salt,\n      iterations: 100000, // 100k iterations for security\n      hash: 'SHA-256'\n    },\n    keyMaterial,\n    {\n      name: 'AES-GCM',\n      length: 256\n    },\n    false,\n    ['encrypt', 'decrypt']\n  );\n}\n\n/**\n * Encrypt backup data using PIN-derived key\n */\nexport async function encryptBackupData(data: string, pin: string): Promise<{\n  encryptedData: string;\n  salt: string;\n  iv: string;\n  version: string;\n}> {\n  try {\n    // Generate random salt and IV\n    const salt = crypto.getRandomValues(new Uint8Array(32));\n    const iv = crypto.getRandomValues(new Uint8Array(12));\n    \n    // Derive encryption key from PIN\n    const key = await deriveKeyFromPin(pin, salt.buffer);\n    \n    // Encrypt the data\n    const encoder = new TextEncoder();\n    const dataBuffer = encoder.encode(data);\n    \n    const encryptedBuffer = await crypto.subtle.encrypt(\n      {\n        name: 'AES-GCM',\n        iv: iv\n      },\n      key,\n      dataBuffer\n    );\n    \n    // Convert to base64 for storage - use Array.from to avoid stack overflow with large data\n    const encryptedArray = new Uint8Array(encryptedBuffer);\n    const encryptedData = btoa(Array.from(encryptedArray, (byte) => String.fromCharCode(byte)).join(''));\n    const saltB64 = btoa(Array.from(salt, (byte) => String.fromCharCode(byte)).join(''));\n    const ivB64 = btoa(Array.from(iv, (byte) => String.fromCharCode(byte)).join(''));\n    \n    return {\n      encryptedData,\n      salt: saltB64,\n      iv: ivB64,\n      version: '1.0'\n    };\n  } catch (error) {\n    throw new Error(`Encryption failed: ${(error as Error).message}`);\n  }\n}\n\n/**\n * Decrypt backup data using PIN-derived key\n */\nexport async function decryptBackupData(\n  encryptedData: string,\n  salt: string,\n  iv: string,\n  pin: string\n): Promise<string> {\n  try {\n    // Convert from base64\n    const encryptedArray = new Uint8Array(\n      atob(encryptedData).split('').map(char => char.charCodeAt(0))\n    );\n    const saltArray = new Uint8Array(\n      atob(salt).split('').map(char => char.charCodeAt(0))\n    );\n    const ivArray = new Uint8Array(\n      atob(iv).split('').map(char => char.charCodeAt(0))\n    );\n    \n    // Derive decryption key from PIN\n    const key = await deriveKeyFromPin(pin, saltArray.buffer);\n    \n    // Decrypt the data\n    const decryptedBuffer = await crypto.subtle.decrypt(\n      {\n        name: 'AES-GCM',\n        iv: ivArray\n      },\n      key,\n      encryptedArray\n    );\n    \n    // Convert back to string\n    const decoder = new TextDecoder();\n    return decoder.decode(decryptedBuffer);\n  } catch (error) {\n    throw new Error(`Decryption failed: ${(error as Error).message}`);\n  }\n}\n\n/**\n * Check if backup should be encrypted based on security settings\n */\nexport function shouldEncryptBackup(): boolean {\n  const settings = getSecuritySettings();\n  return settings.hasPin && settings.encryptBackups;\n}\n\n/**\n * Wrap backup data with encryption metadata\n */\nexport interface EncryptedBackup {\n  encrypted: boolean;\n  version: string; \n  data?: string; // Plain data if not encrypted\n  encryptedData?: string; // Encrypted data\n  salt?: string; // Encryption salt\n  iv?: string; // Encryption IV\n  timestamp: string;\n  metadata: {\n    algorithm: string;\n    keyDerivation: string;\n    iterations: number;\n  };\n}\n\n/**\n * Prepare backup data for export with optional encryption\n */\nexport async function prepareBackupForExport(\n  backupData: Record<string, any>,\n  pin?: string\n): Promise<EncryptedBackup> {\n  const timestamp = new Date().toISOString();\n  \n  // Safe JSON stringify to avoid circular references\n  let dataJson: string;\n  try {\n    dataJson = JSON.stringify(backupData, null, 2);\n  } catch {\n    // Handle circular references by using a replacer function\n    const seen = new WeakSet();\n    dataJson = JSON.stringify(backupData, (_key, value) => {\n      if (typeof value === 'object' && value !== null) {\n        if (seen.has(value)) {\n          return '[Circular Reference]';\n        }\n        seen.add(value);\n      }\n      return value;\n    }, 2);\n  }\n  \n  // Check if PIN is configured and provided\n  const shouldEncrypt = shouldEncryptBackup() && pin;\n  \n  if (shouldEncrypt && pin) {\n    const encrypted = await encryptBackupData(dataJson, pin);\n    \n    return {\n      encrypted: true,\n      version: '1.0',\n      encryptedData: encrypted.encryptedData,\n      salt: encrypted.salt,\n      iv: encrypted.iv,\n      timestamp,\n      metadata: {\n        algorithm: 'AES-256-GCM',\n        keyDerivation: 'PBKDF2',\n        iterations: 100000\n      }\n    };\n  } else {\n    return {\n      encrypted: false,\n      version: '1.0',\n      data: dataJson,\n      timestamp,\n      metadata: {\n        algorithm: 'none',\n        keyDerivation: 'none',\n        iterations: 0\n      }\n    };\n  }\n}\n\n/**\n * Extract backup data from export with decryption if needed\n */\nexport async function extractBackupFromExport(\n  exportData: EncryptedBackup,\n  pin?: string\n): Promise<BackupData> {\n  if (exportData.encrypted) {\n    if (!pin) {\n      throw new Error('PIN required to decrypt backup');\n    }\n    \n    if (!exportData.encryptedData || !exportData.salt || !exportData.iv) {\n      throw new Error('Invalid encrypted backup format');\n    }\n    \n    const decryptedJson = await decryptBackupData(\n      exportData.encryptedData,\n      exportData.salt,\n      exportData.iv,\n      pin\n    );\n    \n    return JSON.parse(decryptedJson);\n  } else {\n    if (!exportData.data) {\n      throw new Error('Invalid backup format');\n    }\n    \n    return JSON.parse(exportData.data);\n  }\n}\n\n/**\n * Validate encrypted backup format\n */\nexport function isValidEncryptedBackup(data: any): data is EncryptedBackup {\n  return (\n    typeof data === 'object' &&\n    data !== null &&\n    typeof data.encrypted === 'boolean' &&\n    typeof data.version === 'string' &&\n    typeof data.timestamp === 'string' &&\n    typeof data.metadata === 'object' &&\n    (\n      (!data.encrypted && typeof data.data === 'string') ||\n      (data.encrypted && \n       typeof data.encryptedData === 'string' &&\n       typeof data.salt === 'string' &&\n       typeof data.iv === 'string')\n    )\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/utils/iosBackup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[552,555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[552,555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createBackup } from './backup';\n\n// iOS-specific backup utilities\nexport interface iOSBackupOptions {\n  format: 'json' | 'csv' | 'pdf' | 'markdown';\n  includePhotos: boolean;\n  splitSize?: number; // For large backups, split into smaller files\n}\n\n// Detect if we're on iOS\nexport function isiOS(): boolean {\n  return /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n}\n\n// Detect if we're in a PWA on iOS\nexport function isiOSPWA(): boolean {\n  return isiOS() && 'standalone' in window.navigator && (window.navigator as any).standalone === true;\n}\n\n// iOS Web Share API support\nexport function canUseWebShare(): boolean {\n  return 'share' in navigator && 'canShare' in navigator;\n}\n\n// Create a shareable text summary for iOS\nexport async function createSummaryForSharing(): Promise<string> {\n  const backup = await createBackup(false);\n  const friendCount = backup.friends.length;\n  const encounterCount = backup.encounters.length;\n  \n  const lastEncounter = backup.encounters\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0];\n  \n  const summary = `📊 The Load Down Summary\n\n👥 Friends: ${friendCount}\n🔥 Encounters: ${encounterCount}\n📅 Latest: ${lastEncounter ? new Date(lastEncounter.date).toLocaleDateString() : 'None'}\n⭐ Avg Rating: ${backup.encounters.length > 0 ? \n  (backup.encounters.reduce((sum, e) => sum + e.rating, 0) / backup.encounters.length).toFixed(1) : 'N/A'}\n\nGenerated: ${new Date().toLocaleDateString()}\n\n#EncounterLedger #PersonalStats`;\n\n  return summary;\n}\n\n// Create CSV format for easy Excel import\nexport async function createCSVBackup(includePhotos: boolean = false): Promise<string> {\n  const backup = await createBackup(includePhotos);\n  \n  let csv = 'Type,Date,Friend,Rating,Duration,Activities,Location,Notes\\n';\n  \n  backup.encounters.forEach(encounter => {\n    const friendName = backup.friends.find(f => f.id === encounter.participants?.[0])?.name || 'Unknown';\n    const activities = encounter.activitiesPerformed?.map((i: number) => \n      backup.interactionTypes.find(type => type.id === i)?.name || 'Unknown'\n    ).join('; ') || '';\n    \n    const row = [\n      'Encounter',\n      new Date(encounter.date).toLocaleDateString(),\n      `\"${friendName}\"`,\n      encounter.rating,\n      encounter.durationMinutes || '',\n      `\"${activities}\"`,\n      `\"${encounter.location?.place || ''}\"`,\n      `\"${encounter.notes || ''}\"`\n    ].join(',');\n    \n    csv += row + '\\n';\n  });\n  \n  return csv;\n}\n\n// Create Markdown format for better readability\nexport async function createMarkdownBackup(): Promise<string> {\n  const backup = await createBackup(false);\n  \n  let md = `# 🏳️‍🌈 The Load Down Backup\n\n**Generated:** ${new Date().toLocaleDateString()}  \n**Friends:** ${backup.friends.length}  \n**Encounters:** ${backup.encounters.length}\n\n## 📊 Statistics\n\n`;\n\n  // Add monthly breakdown\n  const monthlyStats = backup.encounters.reduce((acc, encounter) => {\n    const month = new Date(encounter.date).toLocaleDateString('en-US', { \n      year: 'numeric', \n      month: 'long' \n    });\n    acc[month] = (acc[month] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  Object.entries(monthlyStats).forEach(([month, count]) => {\n    md += `- **${month}:** ${count} encounters\\n`;\n  });\n\n  md += `\\n## 👥 Friends\\n\\n`;\n  backup.friends.forEach(friend => {\n    const encounterCount = backup.encounters.filter(e => \n      friend.id && e.participants?.includes(friend.id)\n    ).length;\n    \n    md += `### ${friend.name}\\n`;\n    md += `- **Encounters:** ${encounterCount}\\n`;\n    if (friend.age) md += `- **Age:** ${friend.age}\\n`;\n    if (friend.bodyType) md += `- **Type:** ${friend.bodyType}\\n`;\n    if (friend.notes) md += `- **Notes:** ${friend.notes}\\n`;\n    md += '\\n';\n  });\n\n  return md;\n}\n\n// iOS native sharing with Web Share API\nexport async function shareiOS(data: {\n  title?: string;\n  text?: string;\n  url?: string;\n  files?: File[];\n}): Promise<boolean> {\n  if (!canUseWebShare()) return false;\n\n  try {\n    if (data.files && navigator.canShare && !navigator.canShare({ files: data.files })) {\n      // Fallback to text sharing if file sharing isn't supported\n      delete data.files;\n    }\n\n    await navigator.share(data);\n    return true;\n  } catch (error) {\n    console.error('iOS share failed:', error);\n    return false;\n  }\n}\n\n// Create iOS-optimized backup files\nexport async function createiOSBackup(options: iOSBackupOptions): Promise<File> {\n  const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');\n  const sizeIndicator = options.includePhotos ? 'full' : 'compact';\n  \n  let content: string;\n  let mimeType: string;\n  let extension: string = 'json'; // Default extension\n\n  switch (options.format) {\n    case 'csv':\n      content = await createCSVBackup(options.includePhotos);\n      mimeType = 'text/csv';\n      extension = 'csv';\n      break;\n    \n    case 'markdown':\n      content = await createMarkdownBackup();\n      mimeType = 'text/markdown';\n      extension = 'md';\n      break;\n    \n    case 'json':\n    default: {\n      const backup = await createBackup(options.includePhotos);\n      \n      // Check if backup should be encrypted\n      const { shouldEncryptBackup, prepareBackupForExport } = await import('./encryption');\n      const needsEncryption = shouldEncryptBackup();\n      \n      if (needsEncryption) {\n        const pin = prompt('Enter your PIN to encrypt the backup:');\n        if (!pin) {\n          throw new Error('PIN required for encrypted backup');\n        }\n        const encryptedBackup = await prepareBackupForExport(backup, pin);\n        content = JSON.stringify(encryptedBackup, null, 2);\n        extension = 'encrypted.json';\n      } else {\n        // For unencrypted backup, just use the raw data\n        content = JSON.stringify(backup, null, 2);\n      }\n      \n      mimeType = 'application/json';\n      break;\n    }\n  }\n\n  const fileName = `the-load-down-${timestamp}-${sizeIndicator}.${extension}`;\n  return new File([content], fileName, { type: mimeType });\n}\n\n// iOS-style backup modal with native sharing\nexport async function showiOSBackupModal(): Promise<void> {\n  return new Promise((resolve) => {\n    const modal = document.createElement('div');\n    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-end justify-center z-50 p-0';\n    \n    const isiOSDevice = isiOS();\n    const canShare = canUseWebShare();\n    \n    modal.innerHTML = `\n      <div class=\"bg-white dark:bg-gray-800 rounded-t-2xl w-full max-w-md transform transition-transform duration-300 translate-y-full\" id=\"backup-sheet\">\n        <div class=\"p-6 pb-8\">\n          <!-- iOS-style handle -->\n          <div class=\"w-12 h-1 bg-gray-300 rounded-full mx-auto mb-4\"></div>\n          \n          <h3 class=\"text-xl font-semibold text-center mb-2\">💾 Export Data</h3>\n          <p class=\"text-sm text-gray-600 dark:text-gray-300 text-center mb-6\">\n            Choose how to share your encounter data\n          </p>\n          \n          <div class=\"space-y-3\">\n            ${canShare ? `\n              <button id=\"share-summary\" class=\"w-full flex items-center justify-center space-x-3 px-4 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors\">\n                <span class=\"text-xl\">📱</span>\n                <span>Share Quick Summary</span>\n              </button>\n            ` : ''}\n            \n            <button id=\"export-json\" class=\"w-full flex items-center justify-center space-x-3 px-4 py-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-colors\">\n              <span class=\"text-xl\">📄</span>\n              <span>Full Data (JSON)</span>\n            </button>\n            \n            <button id=\"export-csv\" class=\"w-full flex items-center justify-center space-x-3 px-4 py-3 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-colors\">\n              <span class=\"text-xl\">📊</span>\n              <span>Spreadsheet (CSV)</span>\n            </button>\n            \n            <button id=\"export-markdown\" class=\"w-full flex items-center justify-center space-x-3 px-4 py-3 bg-orange-600 text-white rounded-xl hover:bg-orange-700 transition-colors\">\n              <span class=\"text-xl\">📝</span>\n              <span>Report (Markdown)</span>\n            </button>\n            \n            ${isiOSDevice ? `\n              <div class=\"border-t border-gray-200 dark:border-gray-600 pt-3 mt-4\">\n                <p class=\"text-xs text-gray-500 text-center mb-3\">Photos (large file size)</p>\n                <div class=\"flex space-x-2\">\n                  <button id=\"with-photos\" class=\"flex-1 px-3 py-2 bg-gray-600 text-white rounded-lg text-sm\">\n                    📸 Include Photos\n                  </button>\n                  <button id=\"no-photos\" class=\"flex-1 px-3 py-2 bg-gray-600 text-white rounded-lg text-sm\">\n                    ⚡ Photos Separate\n                  </button>\n                </div>\n              </div>\n            ` : ''}\n          </div>\n          \n          <button id=\"backup-cancel\" class=\"w-full mt-4 px-4 py-3 border border-gray-300 text-gray-700 dark:border-gray-600 dark:text-gray-300 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\">\n            Cancel\n          </button>\n        </div>\n      </div>\n    `;\n\n    document.body.appendChild(modal);\n    \n    // Animate in\n    setTimeout(() => {\n      const sheet = modal.querySelector('#backup-sheet') as HTMLElement;\n      if (sheet) {\n        sheet.style.transform = 'translateY(0)';\n      }\n    }, 10);\n\n    let includePhotos = false;\n\n    const cleanup = () => {\n      const sheet = modal.querySelector('#backup-sheet') as HTMLElement;\n      if (sheet) {\n        sheet.style.transform = 'translateY(100%)';\n        setTimeout(() => {\n          document.body.removeChild(modal);\n          resolve();\n        }, 300);\n      }\n    };\n\n    // Handle photo options\n    modal.querySelector('#with-photos')?.addEventListener('click', () => {\n      includePhotos = true;\n      modal.querySelectorAll('#with-photos, #no-photos').forEach(btn => \n        btn.classList.remove('bg-blue-600')\n      );\n      modal.querySelector('#with-photos')?.classList.add('bg-blue-600');\n    });\n\n    modal.querySelector('#no-photos')?.addEventListener('click', () => {\n      includePhotos = false;\n      modal.querySelectorAll('#with-photos, #no-photos').forEach(btn => \n        btn.classList.remove('bg-blue-600')\n      );\n      modal.querySelector('#no-photos')?.classList.add('bg-blue-600');\n    });\n\n    // Handle sharing summary\n    modal.querySelector('#share-summary')?.addEventListener('click', async () => {\n      try {\n        const summary = await createSummaryForSharing();\n        const shared = await shareiOS({\n          title: 'The Load Down Summary',\n          text: summary\n        });\n        \n        if (!shared) {\n          // Fallback to clipboard\n          await navigator.clipboard.writeText(summary);\n          alert('📋 Summary copied to clipboard!');\n        }\n      } catch {\n        alert('❌ Failed to share summary');\n      }\n      cleanup();\n    });\n\n    // Handle file exports\n    const handleExport = async (format: 'json' | 'csv' | 'markdown') => {\n      try {\n        const file = await createiOSBackup({ format, includePhotos });\n        \n        if (canShare) {\n          const shared = await shareiOS({\n            title: `The Load Down Backup (${format.toUpperCase()})`,\n            files: [file]\n          });\n          \n          if (!shared) {\n            // Fallback to download\n            const url = URL.createObjectURL(file);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = file.name;\n            a.click();\n            URL.revokeObjectURL(url);\n          }\n        } else {\n          // Direct download\n          const url = URL.createObjectURL(file);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = file.name;\n          a.click();\n          URL.revokeObjectURL(url);\n        }\n        \n        alert('✅ Backup exported successfully!');\n      } catch (error) {\n        alert('❌ Export failed: ' + (error as Error).message);\n      }\n      cleanup();\n    };\n\n    modal.querySelector('#export-json')?.addEventListener('click', () => handleExport('json'));\n    modal.querySelector('#export-csv')?.addEventListener('click', () => handleExport('csv'));\n    modal.querySelector('#export-markdown')?.addEventListener('click', () => handleExport('markdown'));\n\n    modal.querySelector('#backup-cancel')?.addEventListener('click', cleanup);\n\n    // Close on backdrop click\n    modal.addEventListener('click', (e) => {\n      if (e.target === modal) cleanup();\n    });\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/utils/pinManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/utils/scoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/bbb/bbb/src/utils/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
